{
    "summary": "__\n\n  1. Whole game\n  2. 3  Data transformation\n\n__\n\nR for Data Science (2e)\n\n__\n\n__\n\n  * Welcome\n\n  * Preface to the second edition\n\n  * Introduction\n\n  * Whole game __\n\n    * 1  Data visualization\n\n    * 2  Workflow: basics\n\n    * 3  Data transformation\n\n    * 4  Workflow: code style\n\n    * 5  Data tidying\n\n    * 6  Workflow: scripts and projects\n\n    * 7  Data import\n\n    * 8  Workflow: getting help\n\n  * Visualize __\n\n    * 9  Layers\n\n    * 10  Exploratory data analysis\n\n    * 11  Communication\n\n  * Transform __\n\n    * 12  Logical vectors\n\n    * 13  Numbers\n\n    * 14  Strings\n\n    * 15  Regular expressions\n\n    * 16  Factors\n\n    * 17  Dates and times\n\n    * 18  Missing values\n\n    * 19  Joins\n\n  * Import __\n\n    * 20  Spreadsheets\n\n    * 21  Databases\n\n    * 22  Arrow\n\n    * 23  Hierarchical data\n\n    * 24  Web scraping\n\n  * Program __\n\n    * 25  Functions\n\n    * 26  Iteration\n\n    * 27  A field guide to base R\n\n  * Communicate __\n\n    * 28  Quarto\n\n    * 29  Quarto formats\n\n## Table of contents\n\n  * 3.1 Introduction\n    * 3.1.1 Prerequisites\n    * 3.1.2 nycflights13\n    * 3.1.3 dplyr basics\n  * 3.2 Rows\n    * 3.2.1 `filter()`\n    * 3.2.2 Common mistakes\n    * 3.2.3 `arrange()`\n    * 3.2.4 `distinct()`\n    * 3.2.5 Exercises\n  * 3.3 Columns\n    * 3.3.1 `mutate()`\n    * 3.3.2 `select()`\n    * 3.3.3 `rename()`\n    * 3.3.4 `relocate()`\n    * 3.3.5 Exercises\n  * 3.4 The pipe\n  * 3.5 Groups\n    * 3.5.1 `group_by()`\n    * 3.5.2 `summarize()`\n    * 3.5.3 The `slice_` functions\n    * 3.5.4 Grouping by multiple variables\n    * 3.5.5 Ungrouping\n    * 3.5.6 `.by`\n    * 3.5.7 Exercises\n  * 3.6 Case study: aggregates and sample size\n  * 3.7 Summary\n\n__\n\nEdit this page\n\nReport an issue\n\n# 3  Data transformation\n\n##  3.1 Introduction\n\nVisualization is an important tool for generating insight, but it\u2019s rare that\nyou get the data in exactly the right form you need to make the graph you\nwant. Often you\u2019ll need to create some new variables or summaries to answer\nyour questions with your data, or maybe you just want to rename the variables\nor reorder the observations to make the data a little easier to work with.\nYou\u2019ll learn how to do all that (and more!) in this chapter, which will\nintroduce you to data transformation using the **dplyr** package and a new\ndataset on flights that departed from New York City in 2013.\n\nThe goal of this chapter is to give you an overview of all the key tools for\ntransforming a data frame. We\u2019ll start with functions that operate on rows and\nthen columns of a data frame, then circle back to talk more about the pipe, an\nimportant tool that you use to combine verbs. We will then introduce the\nability to work with groups. We will end the chapter with a case study that\nshowcases these functions in action and we\u2019ll come back to the functions in\nmore detail in later chapters, as we start to dig into specific types of data\n(e.g., numbers, strings, dates).\n\n###  3.1.1 Prerequisites\n\nIn this chapter we\u2019ll focus on the dplyr package, another core member of the\ntidyverse. We\u2019ll illustrate the key ideas using data from the nycflights13\npackage, and use ggplot2 to help us understand the data.\n\n    \n    \n    library(nycflights13)\n    library(tidyverse)\n    #> \u2500\u2500 Attaching core tidyverse packages \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 tidyverse 2.0.0 \u2500\u2500\n    #> \u2714 dplyr     1.1.4     \u2714 readr     2.1.4\n    #> \u2714 forcats   1.0.0     \u2714 stringr   1.5.1\n    #> \u2714 ggplot2   3.4.4     \u2714 tibble    3.2.1\n    #> \u2714 lubridate 1.9.3     \u2714 tidyr     1.3.0\n    #> \u2714 purrr     1.0.2     \n    #> \u2500\u2500 Conflicts \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 tidyverse_conflicts() \u2500\u2500\n    #> \u2716 dplyr::filter() masks stats::filter()\n    #> \u2716 dplyr::lag()    masks stats::lag()\n    #> \u2139 Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors __\n\nTake careful note of the conflicts message that\u2019s printed when you load the\ntidyverse. It tells you that dplyr overwrites some functions in base R. If you\nwant to use the base version of these functions after loading dplyr, you\u2019ll\nneed to use their full names: `stats::filter()` and `stats::lag()`. So far\nwe\u2019ve mostly ignored which package a function comes from because most of the\ntime it doesn\u2019t matter. However, knowing the package can help you find help\nand find related functions, so when we need to be precise about which package\na function comes from, we\u2019ll use the same syntax as R:\n`packagename::functionname()`.\n\n###  3.1.2 nycflights13\n\nTo explore the basic dplyr verbs, we\u2019re going to use `nycflights13::flights`.\nThis dataset contains all 336,776 flights that departed from New York City in\n2013. The data comes from the US Bureau of Transportation Statistics, and is\ndocumented in `?flights`.\n\n    \n    \n    flights\n    #> # A tibble: 336,776 \u00d7 19\n    #>    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n    #>   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n    #> 1  2013     1     1      517            515         2      830            819\n    #> 2  2013     1     1      533            529         4      850            830\n    #> 3  2013     1     1      542            540         2      923            850\n    #> 4  2013     1     1      544            545        -1     1004           1022\n    #> 5  2013     1     1      554            600        -6      812            837\n    #> 6  2013     1     1      554            558        -4      740            728\n    #> # \u2139 336,770 more rows\n    #> # \u2139 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, \u2026 __\n\n`flights` is a tibble, a special type of data frame used by the tidyverse to\navoid some common gotchas. The most important difference between tibbles and\ndata frames is the way tibbles print; they are designed for large datasets, so\nthey only show the first few rows and only the columns that fit on one screen.\nThere are a few options to see everything. If you\u2019re using RStudio, the most\nconvenient is probably `View(flights)`, which will open an interactive\nscrollable and filterable view. Otherwise you can use `print(flights, width =\nInf)` to show all columns, or use `glimpse()`:\n\n    \n    \n    glimpse(flights)\n    #> Rows: 336,776\n    #> Columns: 19\n    #> $ year           <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013\u2026\n    #> $ month          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\u2026\n    #> $ day            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\u2026\n    #> $ dep_time       <int> 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 55\u2026\n    #> $ sched_dep_time <int> 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 60\u2026\n    #> $ dep_delay      <dbl> 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2,\u2026\n    #> $ arr_time       <int> 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 8\u2026\n    #> $ sched_arr_time <int> 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 8\u2026\n    #> $ arr_delay      <dbl> 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7,\u2026\n    #> $ carrier        <chr> \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\"\u2026\n    #> $ flight         <int> 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301\u2026\n    #> $ tailnum        <chr> \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N\u2026\n    #> $ origin         <chr> \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LG\u2026\n    #> $ dest           <chr> \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IA\u2026\n    #> $ air_time       <dbl> 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149\u2026\n    #> $ distance       <dbl> 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 73\u2026\n    #> $ hour           <dbl> 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6\u2026\n    #> $ minute         <dbl> 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59\u2026\n    #> $ time_hour      <dttm> 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-0\u2026 __\n\nIn both views, the variables names are followed by abbreviations that tell you\nthe type of each variable: `<int>` is short for integer, `<dbl>` is short for\ndouble (aka real numbers), `<chr>` for character (aka strings), and `<dttm>`\nfor date-time. These are important because the operations you can perform on a\ncolumn depend so much on its \u201ctype\u201d.\n\n###  3.1.3 dplyr basics\n\nYou\u2019re about to learn the primary dplyr verbs (functions) which will allow you\nto solve the vast majority of your data manipulation challenges. But before we\ndiscuss their individual differences, it\u2019s worth stating what they have in\ncommon:\n\n  1. The first argument is always a data frame.\n\n  2. The subsequent arguments typically describe which columns to operate on, using the variable names (without quotes).\n\n  3. The output is always a new data frame.\n\nBecause each verb does one thing well, solving complex problems will usually\nrequire combining multiple verbs, and we\u2019ll do so with the pipe, `|>`. We\u2019ll\ndiscuss the pipe more in Section 3.4, but in brief, the pipe takes the thing\non its left and passes it along to the function on its right so that `x |>\nf(y)` is equivalent to `f(x, y)`, and `x |> f(y) |> g(z)` is equivalent to\n`g(f(x, y), z)`. The easiest way to pronounce the pipe is \u201cthen\u201d. That makes\nit possible to get a sense of the following code even though you haven\u2019t yet\nlearned the details:\n\n    \n    \n    flights |>\n      filter(dest == \"IAH\") |> \n      group_by(year, month, day) |> \n      summarize(\n        arr_delay = mean(arr_delay, na.rm = TRUE)\n      ) __\n\ndplyr\u2019s verbs are organized into four groups based on what they operate on:\n**rows** , **columns** , **groups** , or **tables**. In the following sections\nyou\u2019ll learn the most important verbs for rows, columns, and groups, then\nwe\u2019ll come back to the join verbs that work on tables in Chapter 19. Let\u2019s\ndive in!\n\n##  3.2 Rows\n\nThe most important verbs that operate on rows of a dataset are `filter()`,\nwhich changes which rows are present without changing their order, and\n`arrange()`, which changes the order of the rows without changing which are\npresent. Both functions only affect the rows, and the columns are left\nunchanged. We\u2019ll also discuss `distinct()` which finds rows with unique values\nbut unlike `arrange()` and `filter()` it can also optionally modify the\ncolumns.\n\n###  3.2.1 `filter()`\n\n`filter()` allows you to keep rows based on the values of the columns1. The\nfirst argument is the data frame. The second and subsequent arguments are the\nconditions that must be true to keep the row. For example, we could find all\nflights that departed more than 120 minutes (two hours) late:\n\n    \n    \n    flights |> \n      filter(dep_delay > 120)\n    #> # A tibble: 9,723 \u00d7 19\n    #>    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n    #>   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n    #> 1  2013     1     1      848           1835       853     1001           1950\n    #> 2  2013     1     1      957            733       144     1056            853\n    #> 3  2013     1     1     1114            900       134     1447           1222\n    #> 4  2013     1     1     1540           1338       122     2020           1825\n    #> 5  2013     1     1     1815           1325       290     2120           1542\n    #> 6  2013     1     1     1842           1422       260     1958           1535\n    #> # \u2139 9,717 more rows\n    #> # \u2139 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, \u2026 __\n\nAs well as `>` (greater than), you can use `>=` (greater than or equal to),\n`<` (less than), `<=` (less than or equal to), `==` (equal to), and `!=` (not\nequal to). You can also combine conditions with `&` or `,` to indicate \u201cand\u201d\n(check for both conditions) or with `|` to indicate \u201cor\u201d (check for either\ncondition):\n\n    \n    \n    # Flights that departed on January 1\n    flights |> \n      filter(month == 1 & day == 1)\n    #> # A tibble: 842 \u00d7 19\n    #>    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n    #>   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n    #> 1  2013     1     1      517            515         2      830            819\n    #> 2  2013     1     1      533            529         4      850            830\n    #> 3  2013     1     1      542            540         2      923            850\n    #> 4  2013     1     1      544            545        -1     1004           1022\n    #> 5  2013     1     1      554            600        -6      812            837\n    #> 6  2013     1     1      554            558        -4      740            728\n    #> # \u2139 836 more rows\n    #> # \u2139 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, \u2026\n    \n    # Flights that departed in January or February\n    flights |> \n      filter(month == 1 | month == 2)\n    #> # A tibble: 51,955 \u00d7 19\n    #>    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n    #>   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n    #> 1  2013     1     1      517            515         2      830            819\n    #> 2  2013     1     1      533            529         4      850            830\n    #> 3  2013     1     1      542            540         2      923            850\n    #> 4  2013     1     1      544            545        -1     1004           1022\n    #> 5  2013     1     1      554            600        -6      812            837\n    #> 6  2013     1     1      554            558        -4      740            728\n    #> # \u2139 51,949 more rows\n    #> # \u2139 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, \u2026 __\n\nThere\u2019s a useful shortcut when you\u2019re combining `|` and `==`: `%in%`. It keeps\nrows where the variable equals one of the values on the right:\n\n    \n    \n    # A shorter way to select flights that departed in January or February\n    flights |> \n      filter(month %in% c(1, 2))\n    #> # A tibble: 51,955 \u00d7 19\n    #>    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n    #>   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n    #> 1  2013     1     1      517            515         2      830            819\n    #> 2  2013     1     1      533            529         4      850            830\n    #> 3  2013     1     1      542            540         2      923            850\n    #> 4  2013     1     1      544            545        -1     1004           1022\n    #> 5  2013     1     1      554            600        -6      812            837\n    #> 6  2013     1     1      554            558        -4      740            728\n    #> # \u2139 51,949 more rows\n    #> # \u2139 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, \u2026 __\n\nWe\u2019ll come back to these comparisons and logical operators in more detail in\nChapter 12.\n\nWhen you run `filter()` dplyr executes the filtering operation, creating a new\ndata frame, and then prints it. It doesn\u2019t modify the existing `flights`\ndataset because dplyr functions never modify their inputs. To save the result,\nyou need to use the assignment operator, `<-`:\n\n    \n    \n    jan1 <- flights |> \n      filter(month == 1 & day == 1) __\n\n###  3.2.2 Common mistakes\n\nWhen you\u2019re starting out with R, the easiest mistake to make is to use `=`\ninstead of `==` when testing for equality. `filter()` will let you know when\nthis happens:\n\n    \n    \n    flights |> \n      filter(month = 1)\n    #> Error in `filter()`:\n    #> ! We detected a named input.\n    #> \u2139 This usually means that you've used `=` instead of `==`.\n    #> \u2139 Did you mean `month == 1`? __\n\nAnother mistakes is you write \u201cor\u201d statements like you would in English:\n\n    \n    \n    flights |> \n      filter(month == 1 | 2) __\n\nThis \u201cworks\u201d, in the sense that it doesn\u2019t throw an error, but it doesn\u2019t do\nwhat you want because `|` first checks the condition `month == 1` and then\nchecks the condition `2`, which is not a sensible condition to check. We\u2019ll\nlearn more about what\u2019s happening here and why in Section 15.6.2.\n\n###  3.2.3 `arrange()`\n\n`arrange()` changes the order of the rows based on the value of the columns.\nIt takes a data frame and a set of column names (or more complicated\nexpressions) to order by. If you provide more than one column name, each\nadditional column will be used to break ties in the values of preceding\ncolumns. For example, the following code sorts by the departure time, which is\nspread over four columns. We get the earliest years first, then within a year\nthe earliest months, etc.\n\n    \n    \n    flights |> \n      arrange(year, month, day, dep_time)\n    #> # A tibble: 336,776 \u00d7 19\n    #>    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n    #>   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n    #> 1  2013     1     1      517            515         2      830            819\n    #> 2  2013     1     1      533            529         4      850            830\n    #> 3  2013     1     1      542            540         2      923            850\n    #> 4  2013     1     1      544            545        -1     1004           1022\n    #> 5  2013     1     1      554            600        -6      812            837\n    #> 6  2013     1     1      554            558        -4      740            728\n    #> # \u2139 336,770 more rows\n    #> # \u2139 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, \u2026 __\n\nYou can use `desc()` on a column inside of `arrange()` to re-order the data\nframe based on that column in descending (big-to-small) order. For example,\nthis code orders flights from most to least delayed:\n\n    \n    \n    flights |> \n      arrange(desc(dep_delay))\n    #> # A tibble: 336,776 \u00d7 19\n    #>    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n    #>   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n    #> 1  2013     1     9      641            900      1301     1242           1530\n    #> 2  2013     6    15     1432           1935      1137     1607           2120\n    #> 3  2013     1    10     1121           1635      1126     1239           1810\n    #> 4  2013     9    20     1139           1845      1014     1457           2210\n    #> 5  2013     7    22      845           1600      1005     1044           1815\n    #> 6  2013     4    10     1100           1900       960     1342           2211\n    #> # \u2139 336,770 more rows\n    #> # \u2139 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, \u2026 __\n\nNote that the number of rows has not changed \u2013 we\u2019re only arranging the data,\nwe\u2019re not filtering it.\n\n###  3.2.4 `distinct()`\n\n`distinct()` finds all the unique rows in a dataset, so in a technical sense,\nit primarily operates on the rows. Most of the time, however, you\u2019ll want the\ndistinct combination of some variables, so you can also optionally supply\ncolumn names:\n\n    \n    \n    # Remove duplicate rows, if any\n    flights |> \n      distinct()\n    #> # A tibble: 336,776 \u00d7 19\n    #>    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n    #>   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n    #> 1  2013     1     1      517            515         2      830            819\n    #> 2  2013     1     1      533            529         4      850            830\n    #> 3  2013     1     1      542            540         2      923            850\n    #> 4  2013     1     1      544            545        -1     1004           1022\n    #> 5  2013     1     1      554            600        -6      812            837\n    #> 6  2013     1     1      554            558        -4      740            728\n    #> # \u2139 336,770 more rows\n    #> # \u2139 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, \u2026\n    \n    # Find all unique origin and destination pairs\n    flights |> \n      distinct(origin, dest)\n    #> # A tibble: 224 \u00d7 2\n    #>   origin dest \n    #>   <chr>  <chr>\n    #> 1 EWR    IAH  \n    #> 2 LGA    IAH  \n    #> 3 JFK    MIA  \n    #> 4 JFK    BQN  \n    #> 5 LGA    ATL  \n    #> 6 EWR    ORD  \n    #> # \u2139 218 more rows __\n\nAlternatively, if you want to the keep other columns when filtering for unique\nrows, you can use the `.keep_all = TRUE` option.\n\n    \n    \n    flights |> \n      distinct(origin, dest, .keep_all = TRUE)\n    #> # A tibble: 224 \u00d7 19\n    #>    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n    #>   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n    #> 1  2013     1     1      517            515         2      830            819\n    #> 2  2013     1     1      533            529         4      850            830\n    #> 3  2013     1     1      542            540         2      923            850\n    #> 4  2013     1     1      544            545        -1     1004           1022\n    #> 5  2013     1     1      554            600        -6      812            837\n    #> 6  2013     1     1      554            558        -4      740            728\n    #> # \u2139 218 more rows\n    #> # \u2139 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, \u2026 __\n\nIt\u2019s not a coincidence that all of these distinct flights are on January 1:\n`distinct()` will find the first occurrence of a unique row in the dataset and\ndiscard the rest.\n\nIf you want to find the number of occurrences instead, you\u2019re better off\nswapping `distinct()` for `count()`, and with the `sort = TRUE` argument you\ncan arrange them in descending order of number of occurrences. You\u2019ll learn\nmore about count in Section 13.3.\n\n    \n    \n    flights |>\n      count(origin, dest, sort = TRUE)\n    #> # A tibble: 224 \u00d7 3\n    #>   origin dest      n\n    #>   <chr>  <chr> <int>\n    #> 1 JFK    LAX   11262\n    #> 2 LGA    ATL   10263\n    #> 3 LGA    ORD    8857\n    #> 4 JFK    SFO    8204\n    #> 5 LGA    CLT    6168\n    #> 6 EWR    ORD    6100\n    #> # \u2139 218 more rows __\n\n###  3.2.5 Exercises\n\n  1. In a single pipeline for each condition, find all flights that meet the condition:\n\n    * Had an arrival delay of two or more hours\n    * Flew to Houston (`IAH` or `HOU`)\n    * Were operated by United, American, or Delta\n    * Departed in summer (July, August, and September)\n    * Arrived more than two hours late, but didn\u2019t leave late\n    * Were delayed by at least an hour, but made up over 30 minutes in flight\n  2. Sort `flights` to find the flights with longest departure delays. Find the flights that left earliest in the morning.\n\n  3. Sort `flights` to find the fastest flights. (Hint: Try including a math calculation inside of your function.)\n\n  4. Was there a flight on every day of 2013?\n\n  5. Which flights traveled the farthest distance? Which traveled the least distance?\n\n  6. Does it matter what order you used `filter()` and `arrange()` if you\u2019re using both? Why/why not? Think about the results and how much work the functions would have to do.\n\n##  3.3 Columns\n\nThere are four important verbs that affect the columns without changing the\nrows: `mutate()` creates new columns that are derived from the existing\ncolumns, `select()` changes which columns are present, `rename()` changes the\nnames of the columns, and `relocate()` changes the positions of the columns.\n\n###  3.3.1 `mutate()`\n\nThe job of `mutate()` is to add new columns that are calculated from the\nexisting columns. In the transform chapters, you\u2019ll learn a large set of\nfunctions that you can use to manipulate different types of variables. For\nnow, we\u2019ll stick with basic algebra, which allows us to compute the `gain`,\nhow much time a delayed flight made up in the air, and the `speed` in miles\nper hour:\n\n    \n    \n    flights |> \n      mutate(\n        gain = dep_delay - arr_delay,\n        speed = distance / air_time * 60\n      )\n    #> # A tibble: 336,776 \u00d7 21\n    #>    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n    #>   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n    #> 1  2013     1     1      517            515         2      830            819\n    #> 2  2013     1     1      533            529         4      850            830\n    #> 3  2013     1     1      542            540         2      923            850\n    #> 4  2013     1     1      544            545        -1     1004           1022\n    #> 5  2013     1     1      554            600        -6      812            837\n    #> 6  2013     1     1      554            558        -4      740            728\n    #> # \u2139 336,770 more rows\n    #> # \u2139 13 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, \u2026 __\n\nBy default, `mutate()` adds new columns on the right hand side of your\ndataset, which makes it difficult to see what\u2019s happening here. We can use the\n`.before` argument to instead add the variables to the left hand side2:\n\n    \n    \n    flights |> \n      mutate(\n        gain = dep_delay - arr_delay,\n        speed = distance / air_time * 60,\n        .before = 1\n      )\n    #> # A tibble: 336,776 \u00d7 21\n    #>    gain speed  year month   day dep_time sched_dep_time dep_delay arr_time\n    #>   <dbl> <dbl> <int> <int> <int>    <int>          <int>     <dbl>    <int>\n    #> 1    -9  370.  2013     1     1      517            515         2      830\n    #> 2   -16  374.  2013     1     1      533            529         4      850\n    #> 3   -31  408.  2013     1     1      542            540         2      923\n    #> 4    17  517.  2013     1     1      544            545        -1     1004\n    #> 5    19  394.  2013     1     1      554            600        -6      812\n    #> 6   -16  288.  2013     1     1      554            558        -4      740\n    #> # \u2139 336,770 more rows\n    #> # \u2139 12 more variables: sched_arr_time <int>, arr_delay <dbl>, \u2026 __\n\nThe `.` is a sign that `.before` is an argument to the function, not the name\nof a third new variable we are creating. You can also use `.after` to add\nafter a variable, and in both `.before` and `.after` you can use the variable\nname instead of a position. For example, we could add the new variables after\n`day`:\n\n    \n    \n    flights |> \n      mutate(\n        gain = dep_delay - arr_delay,\n        speed = distance / air_time * 60,\n        .after = day\n      ) __\n\nAlternatively, you can control which variables are kept with the `.keep`\nargument. A particularly useful argument is `\"used\"` which specifies that we\nonly keep the columns that were involved or created in the `mutate()` step.\nFor example, the following output will contain only the variables `dep_delay`,\n`arr_delay`, `air_time`, `gain`, `hours`, and `gain_per_hour`.\n\n    \n    \n    flights |> \n      mutate(\n        gain = dep_delay - arr_delay,\n        hours = air_time / 60,\n        gain_per_hour = gain / hours,\n        .keep = \"used\"\n      ) __\n\nNote that since we haven\u2019t assigned the result of the above computation back\nto `flights`, the new variables `gain,` `hours`, and `gain_per_hour` will only\nbe printed but will not be stored in a data frame. And if we want them to be\navailable in a data frame for future use, we should think carefully about\nwhether we want the result to be assigned back to `flights`, overwriting the\noriginal data frame with many more variables, or to a new object. Often, the\nright answer is a new object that is named informatively to indicate its\ncontents, e.g., `delay_gain`, but you might also have good reasons for\noverwriting `flights`.\n\n###  3.3.2 `select()`\n\nIt\u2019s not uncommon to get datasets with hundreds or even thousands of\nvariables. In this situation, the first challenge is often just focusing on\nthe variables you\u2019re interested in. `select()` allows you to rapidly zoom in\non a useful subset using operations based on the names of the variables:\n\n  * Select columns by name:\n    \n        flights |> \n      select(year, month, day) __\n\n  * Select all columns between year and day (inclusive):\n    \n        flights |> \n      select(year:day) __\n\n  * Select all columns except those from year to day (inclusive):\n    \n        flights |> \n      select(!year:day) __\n\nHistorically this operation was done with `-` instead of `!`, so you\u2019re likely\nto see that in the wild. These two operators serve the same purpose but with\nsubtle differences in behavior. We recommend using `!` because it reads as\n\u201cnot\u201d and combines well with `&` and `|`.\n\n  * Select all columns that are characters:\n    \n        flights |> \n      select(where(is.character)) __\n\nThere are a number of helper functions you can use within `select()`:\n\n  * `starts_with(\"abc\")`: matches names that begin with \u201cabc\u201d.\n  * `ends_with(\"xyz\")`: matches names that end with \u201cxyz\u201d.\n  * `contains(\"ijk\")`: matches names that contain \u201cijk\u201d.\n  * `num_range(\"x\", 1:3)`: matches `x1`, `x2` and `x3`.\n\nSee `?select` for more details. Once you know regular expressions (the topic\nof Chapter 15) you\u2019ll also be able to use `matches()` to select variables that\nmatch a pattern.\n\nYou can rename variables as you `select()` them by using `=`. The new name\nappears on the left hand side of the `=`, and the old variable appears on the\nright hand side:\n\n    \n    \n    flights |> \n      select(tail_num = tailnum)\n    #> # A tibble: 336,776 \u00d7 1\n    #>   tail_num\n    #>   <chr>   \n    #> 1 N14228  \n    #> 2 N24211  \n    #> 3 N619AA  \n    #> 4 N804JB  \n    #> 5 N668DN  \n    #> 6 N39463  \n    #> # \u2139 336,770 more rows __\n\n###  3.3.3 `rename()`\n\nIf you want to keep all the existing variables and just want to rename a few,\nyou can use `rename()` instead of `select()`:\n\n    \n    \n    flights |> \n      rename(tail_num = tailnum)\n    #> # A tibble: 336,776 \u00d7 19\n    #>    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n    #>   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n    #> 1  2013     1     1      517            515         2      830            819\n    #> 2  2013     1     1      533            529         4      850            830\n    #> 3  2013     1     1      542            540         2      923            850\n    #> 4  2013     1     1      544            545        -1     1004           1022\n    #> 5  2013     1     1      554            600        -6      812            837\n    #> 6  2013     1     1      554            558        -4      740            728\n    #> # \u2139 336,770 more rows\n    #> # \u2139 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, \u2026 __\n\nIf you have a bunch of inconsistently named columns and it would be painful to\nfix them all by hand, check out `janitor::clean_names()` which provides some\nuseful automated cleaning.\n\n###  3.3.4 `relocate()`\n\nUse `relocate()` to move variables around. You might want to collect related\nvariables together or move important variables to the front. By default\n`relocate()` moves variables to the front:\n\n    \n    \n    flights |> \n      relocate(time_hour, air_time)\n    #> # A tibble: 336,776 \u00d7 19\n    #>   time_hour           air_time  year month   day dep_time sched_dep_time\n    #>   <dttm>                 <dbl> <int> <int> <int>    <int>          <int>\n    #> 1 2013-01-01 05:00:00      227  2013     1     1      517            515\n    #> 2 2013-01-01 05:00:00      227  2013     1     1      533            529\n    #> 3 2013-01-01 05:00:00      160  2013     1     1      542            540\n    #> 4 2013-01-01 05:00:00      183  2013     1     1      544            545\n    #> 5 2013-01-01 06:00:00      116  2013     1     1      554            600\n    #> 6 2013-01-01 05:00:00      150  2013     1     1      554            558\n    #> # \u2139 336,770 more rows\n    #> # \u2139 12 more variables: dep_delay <dbl>, arr_time <int>, \u2026 __\n\nYou can also specify where to put them using the `.before` and `.after`\narguments, just like in `mutate()`:\n\n    \n    \n    flights |> \n      relocate(year:dep_time, .after = time_hour)\n    flights |> \n      relocate(starts_with(\"arr\"), .before = dep_time) __\n\n###  3.3.5 Exercises\n\n  1. Compare `dep_time`, `sched_dep_time`, and `dep_delay`. How would you expect those three numbers to be related?\n\n  2. Brainstorm as many ways as possible to select `dep_time`, `dep_delay`, `arr_time`, and `arr_delay` from `flights`.\n\n  3. What happens if you specify the name of the same variable multiple times in a `select()` call?\n\n  4. What does the `any_of()` function do? Why might it be helpful in conjunction with this vector?\n    \n        variables <- c(\"year\", \"month\", \"day\", \"dep_delay\", \"arr_delay\") __\n\n  5. Does the result of running the following code surprise you? How do the select helpers deal with upper and lower case by default? How can you change that default?\n    \n        flights |> select(contains(\"TIME\")) __\n\n  6. Rename `air_time` to `air_time_min` to indicate units of measurement and move it to the beginning of the data frame.\n\n  7. Why doesn\u2019t the following work, and what does the error mean?\n    \n        flights |> \n      select(tailnum) |> \n      arrange(arr_delay)\n    #> Error in `arrange()`:\n    #> \u2139 In argument: `..1 = arr_delay`.\n    #> Caused by error:\n    #> ! object 'arr_delay' not found __\n\n##  3.4 The pipe\n\nWe\u2019ve shown you simple examples of the pipe above, but its real power arises\nwhen you start to combine multiple verbs. For example, imagine that you wanted\nto find the fast flights to Houston\u2019s IAH airport: you need to combine\n`filter()`, `mutate()`, `select()`, and `arrange()`:\n\n    \n    \n    flights |> \n      filter(dest == \"IAH\") |> \n      mutate(speed = distance / air_time * 60) |> \n      select(year:day, dep_time, carrier, flight, speed) |> \n      arrange(desc(speed))\n    #> # A tibble: 7,198 \u00d7 7\n    #>    year month   day dep_time carrier flight speed\n    #>   <int> <int> <int>    <int> <chr>    <int> <dbl>\n    #> 1  2013     7     9      707 UA         226  522.\n    #> 2  2013     8    27     1850 UA        1128  521.\n    #> 3  2013     8    28      902 UA        1711  519.\n    #> 4  2013     8    28     2122 UA        1022  519.\n    #> 5  2013     6    11     1628 UA        1178  515.\n    #> 6  2013     8    27     1017 UA         333  515.\n    #> # \u2139 7,192 more rows __\n\nEven though this pipeline has four steps, it\u2019s easy to skim because the verbs\ncome at the start of each line: start with the `flights` data, then filter,\nthen mutate, then select, then arrange.\n\nWhat would happen if we didn\u2019t have the pipe? We could nest each function call\ninside the previous call:\n\n    \n    \n    arrange(\n      select(\n        mutate(\n          filter(\n            flights, \n            dest == \"IAH\"\n          ),\n          speed = distance / air_time * 60\n        ),\n        year:day, dep_time, carrier, flight, speed\n      ),\n      desc(speed)\n    ) __\n\nOr we could use a bunch of intermediate objects:\n\n    \n    \n    flights1 <- filter(flights, dest == \"IAH\")\n    flights2 <- mutate(flights1, speed = distance / air_time * 60)\n    flights3 <- select(flights2, year:day, dep_time, carrier, flight, speed)\n    arrange(flights3, desc(speed)) __\n\nWhile both forms have their time and place, the pipe generally produces data\nanalysis code that is easier to write and read.\n\nTo add the pipe to your code, we recommend using the built-in keyboard\nshortcut Ctrl/Cmd + Shift + M. You\u2019ll need to make one change to your RStudio\noptions to use `|>` instead of `%>%` as shown in Figure 3.1; more on `%>%`\nshortly.\n\nFigure 3.1: To insert `|>`, make sure the \u201cUse native pipe operator\u201d option is\nchecked.\n\n__\n\nmagrittr\n\nIf you\u2019ve been using the tidyverse for a while, you might be familiar with the\n`%>%` pipe provided by the **magrittr** package. The magrittr package is\nincluded in the core tidyverse, so you can use `%>%` whenever you load the\ntidyverse:\n\n    \n    \n    library(tidyverse)\n    \n    mtcars %>% \n      group_by(cyl) %>%\n      summarize(n = n()) __\n\nFor simple cases, `|>` and `%>%` behave identically. So why do we recommend\nthe base pipe? Firstly, because it\u2019s part of base R, it\u2019s always available for\nyou to use, even when you\u2019re not using the tidyverse. Secondly, `|>` is quite\na bit simpler than `%>%`: in the time between the invention of `%>%` in 2014\nand the inclusion of `|>` in R 4.1.0 in 2021, we gained a better understanding\nof the pipe. This allowed the base implementation to jettison infrequently\nused and less important features.\n\n##  3.5 Groups\n\nSo far you\u2019ve learned about functions that work with rows and columns. dplyr\ngets even more powerful when you add in the ability to work with groups. In\nthis section, we\u2019ll focus on the most important functions: `group_by()`,\n`summarize()`, and the slice family of functions.\n\n###  3.5.1 `group_by()`\n\nUse `group_by()` to divide your dataset into groups meaningful for your\nanalysis:\n\n    \n    \n    flights |> \n      group_by(month)\n    #> # A tibble: 336,776 \u00d7 19\n    #> # Groups:   month [12]\n    #>    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n    #>   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n    #> 1  2013     1     1      517            515         2      830            819\n    #> 2  2013     1     1      533            529         4      850            830\n    #> 3  2013     1     1      542            540         2      923            850\n    #> 4  2013     1     1      544            545        -1     1004           1022\n    #> 5  2013     1     1      554            600        -6      812            837\n    #> 6  2013     1     1      554            558        -4      740            728\n    #> # \u2139 336,770 more rows\n    #> # \u2139 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, \u2026 __\n\n`group_by()` doesn\u2019t change the data but, if you look closely at the output,\nyou\u2019ll notice that the output indicates that it is \u201cgrouped by\u201d month\n(`Groups: month [12]`). This means subsequent operations will now work \u201cby\nmonth\u201d. `group_by()` adds this grouped feature (referred to as class) to the\ndata frame, which changes the behavior of the subsequent verbs applied to the\ndata.\n\n###  3.5.2 `summarize()`\n\nThe most important grouped operation is a summary, which, if being used to\ncalculate a single summary statistic, reduces the data frame to have a single\nrow for each group. In dplyr, this operation is performed by `summarize()`3,\nas shown by the following example, which computes the average departure delay\nby month:\n\n    \n    \n    flights |> \n      group_by(month) |> \n      summarize(\n        avg_delay = mean(dep_delay)\n      )\n    #> # A tibble: 12 \u00d7 2\n    #>   month avg_delay\n    #>   <int>     <dbl>\n    #> 1     1        NA\n    #> 2     2        NA\n    #> 3     3        NA\n    #> 4     4        NA\n    #> 5     5        NA\n    #> 6     6        NA\n    #> # \u2139 6 more rows __\n\nUhoh! Something has gone wrong and all of our results are `NA`s (pronounced\n\u201cN-A\u201d), R\u2019s symbol for missing value. This happened because some of the\nobserved flights had missing data in the delay column, and so when we\ncalculated the mean including those values, we got an `NA` result. We\u2019ll come\nback to discuss missing values in detail in Chapter 18, but for now we\u2019ll tell\nthe `mean()` function to ignore all missing values by setting the argument\n`na.rm` to `TRUE`:\n\n    \n    \n    flights |> \n      group_by(month) |> \n      summarize(\n        avg_delay = mean(dep_delay, na.rm = TRUE)\n      )\n    #> # A tibble: 12 \u00d7 2\n    #>   month avg_delay\n    #>   <int>     <dbl>\n    #> 1     1      10.0\n    #> 2     2      10.8\n    #> 3     3      13.2\n    #> 4     4      13.9\n    #> 5     5      13.0\n    #> 6     6      20.8\n    #> # \u2139 6 more rows __\n\nYou can create any number of summaries in a single call to `summarize()`.\nYou\u2019ll learn various useful summaries in the upcoming chapters, but one very\nuseful summary is `n()`, which returns the number of rows in each group:\n\n    \n    \n    flights |> \n      group_by(month) |> \n      summarize(\n        avg_delay = mean(dep_delay, na.rm = TRUE), \n        n = n()\n      )\n    #> # A tibble: 12 \u00d7 3\n    #>   month avg_delay     n\n    #>   <int>     <dbl> <int>\n    #> 1     1      10.0 27004\n    #> 2     2      10.8 24951\n    #> 3     3      13.2 28834\n    #> 4     4      13.9 28330\n    #> 5     5      13.0 28796\n    #> 6     6      20.8 28243\n    #> # \u2139 6 more rows __\n\nMeans and counts can get you a surprisingly long way in data science!\n\n###  3.5.3 The `slice_` functions\n\nThere are five handy functions that allow you extract specific rows within\neach group:\n\n  * `df |> slice_head(n = 1)` takes the first row from each group.\n  * `df |> slice_tail(n = 1)` takes the last row in each group.\n  * `df |> slice_min(x, n = 1)` takes the row with the smallest value of column `x`.\n  * `df |> slice_max(x, n = 1)` takes the row with the largest value of column `x`.\n  * `df |> slice_sample(n = 1)` takes one random row.\n\nYou can vary `n` to select more than one row, or instead of `n =`, you can use\n`prop = 0.1` to select (e.g.) 10% of the rows in each group. For example, the\nfollowing code finds the flights that are most delayed upon arrival at each\ndestination:\n\n    \n    \n    flights |> \n      group_by(dest) |> \n      slice_max(arr_delay, n = 1) |>\n      relocate(dest)\n    #> # A tibble: 108 \u00d7 19\n    #> # Groups:   dest [105]\n    #>   dest   year month   day dep_time sched_dep_time dep_delay arr_time\n    #>   <chr> <int> <int> <int>    <int>          <int>     <dbl>    <int>\n    #> 1 ABQ    2013     7    22     2145           2007        98      132\n    #> 2 ACK    2013     7    23     1139            800       219     1250\n    #> 3 ALB    2013     1    25      123           2000       323      229\n    #> 4 ANC    2013     8    17     1740           1625        75     2042\n    #> 5 ATL    2013     7    22     2257            759       898      121\n    #> 6 AUS    2013     7    10     2056           1505       351     2347\n    #> # \u2139 102 more rows\n    #> # \u2139 11 more variables: sched_arr_time <int>, arr_delay <dbl>, \u2026 __\n\nNote that there are 105 destinations but we get 108 rows here. What\u2019s up?\n`slice_min()` and `slice_max()` keep tied values so `n = 1` means give us all\nrows with the highest value. If you want exactly one row per group you can set\n`with_ties = FALSE`.\n\nThis is similar to computing the max delay with `summarize()`, but you get the\nwhole corresponding row (or rows if there\u2019s a tie) instead of the single\nsummary statistic.\n\n###  3.5.4 Grouping by multiple variables\n\nYou can create groups using more than one variable. For example, we could make\na group for each date.\n\n    \n    \n    daily <- flights |>  \n      group_by(year, month, day)\n    daily\n    #> # A tibble: 336,776 \u00d7 19\n    #> # Groups:   year, month, day [365]\n    #>    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n    #>   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n    #> 1  2013     1     1      517            515         2      830            819\n    #> 2  2013     1     1      533            529         4      850            830\n    #> 3  2013     1     1      542            540         2      923            850\n    #> 4  2013     1     1      544            545        -1     1004           1022\n    #> 5  2013     1     1      554            600        -6      812            837\n    #> 6  2013     1     1      554            558        -4      740            728\n    #> # \u2139 336,770 more rows\n    #> # \u2139 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, \u2026 __\n\nWhen you summarize a tibble grouped by more than one variable, each summary\npeels off the last group. In hindsight, this wasn\u2019t a great way to make this\nfunction work, but it\u2019s difficult to change without breaking existing code. To\nmake it obvious what\u2019s happening, dplyr displays a message that tells you how\nyou can change this behavior:\n\n    \n    \n    daily_flights <- daily |> \n      summarize(n = n())\n    #> `summarise()` has grouped output by 'year', 'month'. You can override using\n    #> the `.groups` argument. __\n\nIf you\u2019re happy with this behavior, you can explicitly request it in order to\nsuppress the message:\n\n    \n    \n    daily_flights <- daily |> \n      summarize(\n        n = n(), \n        .groups = \"drop_last\"\n      ) __\n\nAlternatively, change the default behavior by setting a different value, e.g.,\n`\"drop\"` to drop all grouping or `\"keep\"` to preserve the same groups.\n\n###  3.5.5 Ungrouping\n\nYou might also want to remove grouping from a data frame without using\n`summarize()`. You can do this with `ungroup()`.\n\n    \n    \n    daily |> \n      ungroup()\n    #> # A tibble: 336,776 \u00d7 19\n    #>    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n    #>   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n    #> 1  2013     1     1      517            515         2      830            819\n    #> 2  2013     1     1      533            529         4      850            830\n    #> 3  2013     1     1      542            540         2      923            850\n    #> 4  2013     1     1      544            545        -1     1004           1022\n    #> 5  2013     1     1      554            600        -6      812            837\n    #> 6  2013     1     1      554            558        -4      740            728\n    #> # \u2139 336,770 more rows\n    #> # \u2139 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, \u2026 __\n\nNow let\u2019s see what happens when you summarize an ungrouped data frame.\n\n    \n    \n    daily |> \n      ungroup() |>\n      summarize(\n        avg_delay = mean(dep_delay, na.rm = TRUE), \n        flights = n()\n      )\n    #> # A tibble: 1 \u00d7 2\n    #>   avg_delay flights\n    #>       <dbl>   <int>\n    #> 1      12.6  336776 __\n\nYou get a single row back because dplyr treats all the rows in an ungrouped\ndata frame as belonging to one group.\n\n###  3.5.6 `.by`\n\ndplyr 1.1.0 includes a new, experimental, syntax for per-operation grouping,\nthe `.by` argument. `group_by()` and `ungroup()` aren\u2019t going away, but you\ncan now also use the `.by` argument to group within a single operation:\n\n    \n    \n    flights |> \n      summarize(\n        delay = mean(dep_delay, na.rm = TRUE), \n        n = n(),\n        .by = month\n      ) __\n\nOr if you want to group by multiple variables:\n\n    \n    \n    flights |> \n      summarize(\n        delay = mean(dep_delay, na.rm = TRUE), \n        n = n(),\n        .by = c(origin, dest)\n      ) __\n\n`.by` works with all verbs and has the advantage that you don\u2019t need to use\nthe `.groups` argument to suppress the grouping message or `ungroup()` when\nyou\u2019re done.\n\nWe didn\u2019t focus on this syntax in this chapter because it was very new when we\nwrote the book. We did want to mention it because we think it has a lot of\npromise and it\u2019s likely to be quite popular. You can learn more about it in\nthe dplyr 1.1.0 blog post.\n\n###  3.5.7 Exercises\n\n  1. Which carrier has the worst average delays? Challenge: can you disentangle the effects of bad airports vs. bad carriers? Why/why not? (Hint: think about `flights |> group_by(carrier, dest) |> summarize(n())`)\n\n  2. Find the flights that are most delayed upon departure from each destination.\n\n  3. How do delays vary over the course of the day. Illustrate your answer with a plot.\n\n  4. What happens if you supply a negative `n` to `slice_min()` and friends?\n\n  5. Explain what `count()` does in terms of the dplyr verbs you just learned. What does the `sort` argument to `count()` do?\n\n  6. Suppose we have the following tiny data frame:\n    \n        df <- tibble(\n      x = 1:5,\n      y = c(\"a\", \"b\", \"a\", \"a\", \"b\"),\n      z = c(\"K\", \"K\", \"L\", \"L\", \"K\")\n    ) __\n\n    1. Write down what you think the output will look like, then check if you were correct, and describe what `group_by()` does.\n        \n                df |>\n          group_by(y) __\n\n    2. Write down what you think the output will look like, then check if you were correct, and describe what `arrange()` does. Also comment on how it\u2019s different from the `group_by()` in part (a)?\n        \n                df |>\n          arrange(y) __\n\n    3. Write down what you think the output will look like, then check if you were correct, and describe what the pipeline does.\n        \n                df |>\n          group_by(y) |>\n          summarize(mean_x = mean(x)) __\n\n    4. Write down what you think the output will look like, then check if you were correct, and describe what the pipeline does. Then, comment on what the message says.\n        \n                df |>\n          group_by(y, z) |>\n          summarize(mean_x = mean(x)) __\n\n    5. Write down what you think the output will look like, then check if you were correct, and describe what the pipeline does. How is the output different from the one in part (d).\n        \n                df |>\n          group_by(y, z) |>\n          summarize(mean_x = mean(x), .groups = \"drop\") __\n\n    6. Write down what you think the outputs will look like, then check if you were correct, and describe what each pipeline does. How are the outputs of the two pipelines different?\n        \n                df |>\n          group_by(y, z) |>\n          summarize(mean_x = mean(x))\n        \n        df |>\n          group_by(y, z) |>\n          mutate(mean_x = mean(x)) __\n\n##  3.6 Case study: aggregates and sample size\n\nWhenever you do any aggregation, it\u2019s always a good idea to include a count\n(`n()`). That way, you can ensure that you\u2019re not drawing conclusions based on\nvery small amounts of data. We\u2019ll demonstrate this with some baseball data\nfrom the **Lahman** package. Specifically, we will compare what proportion of\ntimes a player gets a hit (`H`) vs. the number of times they try to put the\nball in play (`AB`):\n\n    \n    \n    batters <- Lahman::Batting |> \n      group_by(playerID) |> \n      summarize(\n        performance = sum(H, na.rm = TRUE) / sum(AB, na.rm = TRUE),\n        n = sum(AB, na.rm = TRUE)\n      )\n    batters\n    #> # A tibble: 20,469 \u00d7 3\n    #>   playerID  performance     n\n    #>   <chr>           <dbl> <int>\n    #> 1 aardsda01      0          4\n    #> 2 aaronha01      0.305  12364\n    #> 3 aaronto01      0.229    944\n    #> 4 aasedo01       0          5\n    #> 5 abadan01       0.0952    21\n    #> 6 abadfe01       0.111      9\n    #> # \u2139 20,463 more rows __\n\nWhen we plot the skill of the batter (measured by the batting average,\n`performance`) against the number of opportunities to hit the ball (measured\nby times at bat, `n`), you see two patterns:\n\n  1. The variation in `performance` is larger among players with fewer at-bats. The shape of this plot is very characteristic: whenever you plot a mean (or other summary statistics) vs. group size, you\u2019ll see that the variation decreases as the sample size increases4.\n\n  2. There\u2019s a positive correlation between skill (`performance`) and opportunities to hit the ball (`n`) because teams want to give their best batters the most opportunities to hit the ball.\n\n    \n    \n    batters |> \n      filter(n > 100) |> \n      ggplot(aes(x = n, y = performance)) +\n      geom_point(alpha = 1 / 10) + \n      geom_smooth(se = FALSE) __\n\nNote the handy pattern for combining ggplot2 and dplyr. You just have to\nremember to switch from `|>`, for dataset processing, to `+` for adding layers\nto your plot.\n\nThis also has important implications for ranking. If you naively sort on\n`desc(performance)`, the people with the best batting averages are clearly the\nones who tried to put the ball in play very few times and happened to get a\nhit, they\u2019re not necessarily the most skilled players:\n\n    \n    \n    batters |> \n      arrange(desc(performance))\n    #> # A tibble: 20,469 \u00d7 3\n    #>   playerID  performance     n\n    #>   <chr>           <dbl> <int>\n    #> 1 abramge01           1     1\n    #> 2 alberan01           1     1\n    #> 3 banisje01           1     1\n    #> 4 bartocl01           1     1\n    #> 5 bassdo01            1     1\n    #> 6 birasst01           1     2\n    #> # \u2139 20,463 more rows __\n\nYou can find a good explanation of this problem and how to overcome it at\nhttp://varianceexplained.org/r/empirical_bayes_baseball/ and\nhttps://www.evanmiller.org/how-not-to-sort-by-average-rating.html.\n\n##  3.7 Summary\n\nIn this chapter, you\u2019ve learned the tools that dplyr provides for working with\ndata frames. The tools are roughly grouped into three categories: those that\nmanipulate the rows (like `filter()` and `arrange()`, those that manipulate\nthe columns (like `select()` and `mutate()`), and those that manipulate groups\n(like `group_by()` and `summarize()`). In this chapter, we\u2019ve focused on these\n\u201cwhole data frame\u201d tools, but you haven\u2019t yet learned much about what you can\ndo with the individual variable. We\u2019ll come back to that in the Transform part\nof the book, where each chapter will give you tools for a specific type of\nvariable.\n\nIn the next chapter, we\u2019ll pivot back to workflow to discuss the importance of\ncode style, keeping your code well organized in order to make it easy for you\nand others to read and understand your code.\n\n* * *\n\n  1. Later, you\u2019ll learn about the `slice_*()` family which allows you to choose rows based on their positions.\u21a9\ufe0e\n\n  2. Remember that in RStudio, the easiest way to see a dataset with many columns is `View()`.\u21a9\ufe0e\n\n  3. Or `summarise()`, if you prefer British English.\u21a9\ufe0e\n\n  4. *cough* the law of large numbers *cough*.\u21a9\ufe0e\n\n__ 2  Workflow: basics\n\n4  Workflow: code style __\n\nR for Data Science (2e) was written by Hadley Wickham, Mine \u00c7etinkaya-Rundel,\nand Garrett Grolemund.\n\n\n\nThis book was built with Quarto.\n\n",
    "links": "[{\"link\": \"https://r4ds.hadley.nz/data-transform.html\", \"text\": \"\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#introduction\", \"text\": \"\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#prerequisites\", \"text\": \"\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#nycflights13\", \"text\": \"\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#dplyr-basics\", \"text\": \"\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#rows\", \"text\": \"\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#filter\", \"text\": \"\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#common-mistakes\", \"text\": \"\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#arrange\", \"text\": \"\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#distinct\", \"text\": \"\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#exercises\", \"text\": \"\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#columns\", \"text\": \"\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#sec-mutate\", \"text\": \"\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#sec-select\", \"text\": \"\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#rename\", \"text\": \"\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#relocate\", \"text\": \"\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#exercises-1\", \"text\": \"\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#sec-the-pipe\", \"text\": \"\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#groups\", \"text\": \"\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#group_by\", \"text\": \"\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#sec-summarize\", \"text\": \"\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#the-slice_-functions\", \"text\": \"\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#grouping-by-multiple-variables\", \"text\": \"\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#ungrouping\", \"text\": \"\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#by\", \"text\": \"\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#exercises-2\", \"text\": \"\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#sec-sample-size\", \"text\": \"\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#summary\", \"text\": \"\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#sec-the-pipe\", \"text\": \"Section\u00a03.4\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#fn1\", \"text\": \"1\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#fn2\", \"text\": \"2\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#fig-pipe-options\", \"text\": \"\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#fn3\", \"text\": \"3\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#fn4\", \"text\": \"4\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#fnref1\", \"text\": \"\u21a9\ufe0e\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#fnref2\", \"text\": \"\u21a9\ufe0e\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#fnref3\", \"text\": \"\u21a9\ufe0e\"}, {\"link\": \"https://r4ds.hadley.nz/data-transform.html#fnref4\", \"text\": \"\u21a9\ufe0e\"}]"
}