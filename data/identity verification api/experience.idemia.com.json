{
    "summary": "Solutions\n\nLog inSign up\n\nIdentity Proofing\n\n  * Overview\n  * Demo\n  * Resources\n  * How it Works\n  * Develop\n\nSearch Docs\n\nBackBack\n\n##### Versions:\n\nAPI Version 1.0API Version 1.0\n\nSign upLog in\n\nSearch Docs\n\nBackBack\n\n##### Versions:\n\nAPI Version 1.0API Version 1.0\n\nSign upLog in\n\nNavigate to another page\n\nDevelopIdentity ProofingHome\n\n  1. Identity Proofing & Verification\n  2. API documentation\n\n# Getting Started\n\nThis guide will allow you to create an example ID proofing scenario using the\n**ID &V** API. You will learn to validate an identity document (ID) and verify\na user's face against the ID's portrait.\n\n## ID Proofing Use Case Steps\n\nThe steps of the example use case are:\n\n  * **Step 1** : Create an identity to be processed by ID&V\n  * **Step 2** : Send user consents\n  * **Step 3** : Verify an ID document\n  * **Step 4** : Check the status of the ID document\n  * **Step 5** : Check the status of the identity\n  * **Step 6** : Verify a selfie against the previously verified ID document\n  * **Step 7** : Check the status of the portrait\n  * **Step 8** : Check the status of the identity\n  * **Step 9** : End the process and retrieve the proof file (transaction result)\n\n### UML Diagram for Web Service Calls\n\nThe UML diagram below explains all the steps for Web service calls to ID&V.\n\n#### Process Steps for Web Service Calls\n\nThese Web service calls processes are shown in the UML diagram above.\n\n**Step 1: Create the Identity**\n\n  * The _GIPS-UA API Key_ from the User Agent and the _GPIS-RS API Key_ from the Relying Service to start the registration process.\n  * The identity is created.\n  * The User Agent uses a `POST` command to send the URL identity request to ID&V\n  * The `identityID` is returned and the identity is created\n\n**Step 2: Submit Consent on Portrait**\n\n  * The User Agent uses a `POST` command to send the `identityID` request consent to ID&V.\n\n**Step 3: Capture Identity Document**\n\n  * The `POST` command is used to submit the identity document capture (`IDENTITY_CARD`) request to ID&V.\n  * The HTTP `200` response for Identity document PROCESSING is returned to the User Agent.\n\n**Step 4: Polling on Identity Document Status while PROCESSING**\n\n  * The User Agent uses a `GET` command to make a request for an identity document status check to ID&V.\n  * The identity document status response is returned to the User Agent.\n\n**Step 5: Retrieve Identity Status**\n\n  * The User Agent uses a `GET` command to make a request to retrieve the identity status from ID&V.\n  * The HTTP `200` response for identity status LOA and identity document & attributes status is returned to the User Agent.\n\n**Step 6: Capture Selfie**\n\n  * The User Agent uses a `POST` command to submit the user's portrait selfie capture to ID&V.\n  * The HTTP `200` response for portrait status PROCESSING is returned to the User Agent.\n\n**Step 7: Polling on Portrait Status while PROCESSING**\n\n  * The User Agent uses a `POST` command to request the Portrait Status from the ID&V.\n  * The HTTP `200` response for portrait status is returned to the User Agent.\n\n**Step 8: Retrieve Identity**\n\n  * The User Agent uses a `GET` command to request retrieval of the identity ID from ID&V.\n  * The HTTP `200` response for identity status LOA and identity document & attributes status is returned to the User Agent.\n\n**Step 9: Retrieve Proof**\n\n  * The User Agent confirms that the process is done.\n  * The User Agent uses a `GET` command to request the identity proof from ID&V.\n  * `GET` Proof request is forbidden if the status of transaction is PROCESSING, GIPS will returned HTTP `403` to the Relying Service.\n  * The HTTP `200` proof response is returned to the Relying Service.\n  * The Relying Service processes and stores the proof\n  * The User Agent is notified that the end of the process has been reached.\n\n## Web Services Calls\n\nThere are many ways to implement the appropriate web service requests,\ndepending upon your programming language.\n\nA Web service is an application designed to communicate with other programs.\nIt can be accessed using a standard Web protocol (HTTP or HTTPS).\n\nThe request examples in this section use the cURL tool syntax.\n\n### Request URL Variables\n\nThe variables used in the request URLs are are shown below.\n\nVariable\n\n|\n\nDescription  \n  \n---|---  \n`URL_MAIN_PART`| The Service domain  \n`APIKEY_VALUE`| Client application API key as provided by portal\nadministrator(s)  \n`IDENTITY_ID`| The value obtained after performing Step 1 is below. This\nshould be the `id` value from the _Create Identity_ response message.  \n  \n### Step 1: Create an Identity\n\nThis request creates the identity for the provided user documents to initiate\nthe verification process.\n\n#### Example Identity Request\n\nThe sample identity request is shown in the snippet:\n\n    \n    \n    Shell\n    \n    \n    1curl -X POST https://[URL_MAIN_PART]/gips/v1/identities  \\\n    \n    2  -H 'Content-Type: multipart/form-data' \\\n    \n    3  -H 'apikey: [APIKEY_VALUE]'\n\n##### Request Variables\n\nThe variables for the identity request are shown below.\n\nVariable\n\n|\n\nDescription  \n  \n---|---  \n`URL_MAIN_PART`| The Service domain  \n`APIKEY_VALUE`| The client application API key as provided by your\nadministrator(s)  \n`IDENTITY_ID`| The value obtained after performing **Step 1** that should be\nthe `id` value from the _Create Identity_ response message  \n  \nWhen this request is sent, the web service response contains an `id` field.\nThe value of that field replaces `IDENTITY_ID` in subsequent requests.\n\n#### Example Identity Response\n\nAn example identity response is shown in the snippet:\n\n    \n    \n    JSON\n    \n    \n    1{\n    \n    2\t\"id\": \"d4eee197-69e9-43a9-be07-16cc600d04e8\",\n    \n    3\t\"status\": \"EXPECTING_INPUT\",\n    \n    4\t\"levelOfAssurance\": \"LOA0\",\n    \n    5\t\"creationDateTime\": \"2018-11-20T13:41:00.869\",\n    \n    6\t\"evaluationDateTime\": \"2018-11-20T13:41:00.883\",\n    \n    7\t\"upgradePaths\": {}\n    \n    8}\n\n##### Response Variables\n\nThe variables used for the identity response as shown below.\n\nVariable\n\n|\n\nDescription  \n  \n---|---  \n`id`| The identity ID that will be used to identify the current transaction in\nother requests.  \n`status`| Status of the transaction  \n`levelOfAssurance` (LOA)| Level of trust of current identity  \n`creationDateTime`| Identity creation date  \n`evaluationDateTime`| Last date on which the identity was evaluated  \n`upgradePaths`| List of possible submissions that would increase LOA  \n  \n### Step 2: Send Consent\n\nConsent is a notification from the client application to the Web service that\nthe end-user consents to their identity evidence being processed by the\nservice.\n\nWith this request, the client application notifies the Web service that the\nuser consented to the use of their portrait for biometrics processing.\n\nIt allows the web service to extract biometric data from the selfie and match\nit against the picture in the ID document that will be provided.\n\n#### Example Consent Request\n\nAn example consent notification request notification to the ID&V is shown in\nthe snippet:\n\n    \n    \n    Shell\n    \n    \n    1curl -X POST \\\n    \n    2  https://[URL_MAIN_PART]/gips/v1/identities/[IDENTITY_ID]/consents \\\n    \n    3  -H 'Content-Type: application/json' \\\n    \n    4  -H 'apikey: [APIKEY_VALUE]' \\\n    \n    5  -d '[{\n    \n    6    \t\"approved\": true,\n    \n    7    \t\"type\": \"PORTRAIT\"\n    \n    8      }]'\n\n##### Request Variables\n\nThe variables used in the consent request are shown below.\n\nVariable\n\n|\n\nDescription  \n  \n---|---  \n`URL_MAIN_PART`| The Web service domain  \n`APIKEY_VALUE`| Client application API key as provided by your\nadministrator(s)  \n`IDENTITY_ID`| Value obtained after performing Step 1. This value should be\nthe `id` value from the _Create Identity_ response message.  \n  \n#### Example Consent Response\n\nAn example consent response is shown in the snippet:\n\n    \n    \n    JSON\n    \n    \n    1[\n    \n    2  {\n    \n    3    \"consentId\": \"be5d9a77-5706-41ff-b8d6-e14a555cb0a7\",\n    \n    4    \"approved\": true,\n    \n    5    \"type\": \"PORTRAIT\",\n    \n    6    \"validityPeriod\": {\n    \n    7      \"to\": \"2019-05-20\"\n    \n    8    }\n    \n    9  }\n    \n    10]\n\n##### Response Variables\n\nThe variables used in the consent response are shown below.\n\nVariable\n\n|\n\nDescription  \n  \n---|---  \n`consentId`| The consent ID that might be used to identify the submitted\nconsent.  \n`approved`| Boolean indicating status of the consent (true/false)  \n`type`| Type of consent submitted (possible values may be: `PORTRAIT`, `GIV`).\nThe enumerated value can be found under the API Docs section in the Portal.  \n`creationDateTime`| Identity creation date  \n`validityPeriod`| The period for which the consent is considered valid.  \n`to`| The date at which the consent will expire and will not be considered\nvalid anymore.  \n  \n### Step 3: Verify an ID Document\n\nWith this request, the client application submits an ID document to the web\nservice for processing. The supported ID document types are:\n\n  * Passport\n  * Identity Card\n  * Driver's License\n  * Resident Card\n\n#### Example ID Verification Request\n\nAn example request to submit an ID document to the Web service for processing\nis shown in the snippet:\n\n    \n    \n    Shell\n    \n    \n    1curl -X POST \\\n    \n    2https://[URL_MAIN_PART]/gips/v1/identities/[IDENTITY_ID]/id-documents/capture \\\n    \n    3  -H 'Content-Type: multipart/form-data' \\\n    \n    4  -H 'apikey: [APIKEY_VALUE]' \\\n    \n    5  -F 'DocumentFront=@[ABSOLUTE_LOCAL_PATH_TO_IDDOCUMENT_FRONT]'\n    \n    6  -F 'DocumentBack=@[ABSOLUTE_LOCAL_PATH_TO_IDDOCUMENT_BACK]'\n    \n    7  -F 'DocumentCaptureDetails=@[ABSOLUTE_LOCAL_PATH_TO_DOCUMENTCAPTUREDETAILS]'\n\n##### Request Variables\n\nThe variables used in the document verification request are shown below.\n\nVariable\n\n|\n\nDescription  \n  \n---|---  \n`URL_MAIN_PART`| The Service domain  \n`APIKEY_VALUE`| Client application API key as provided by your\nAdministrator(s)  \n`IDENTITY_ID`| Value retrieved after performing Step 1. This should be the\n`id` value from the _Create Identity_ response message.  \n`ABSOLUTE_LOCAL_PATH_TO_IDDOCUMENT_FRONT`| Value of the absolute path to the\nlocal file for use in identifying document front. For instance:\n\"C:\\mydocumentfront.jpg\"  \n`ABSOLUTE_LOCAL_PATH_TO_IDDOCUMENT_BACK`| Value of the absolute path towards\nthe local file to use to identify document back/reverse side. For instance:\n\"C:\\mydocumentback.jpg.\" This field is only mandatory in some use cases. See\nFAQ for more details.  \n`ABSOLUTE_LOCAL_PATH_TO_ DOCUMENTCAPTUREDETAILS`| `DocumentCaptureDetails` is\nused to attach a JSON file containing specific information regarding the\ndocument being tested. This field is optional, but attaching this file can\ngreatly improve the quality of the Service response.  \n  \n`DocumentCaptureDetails` is a JSON file with the format shown in the snippet:\n\n    \n    \n    JSON\n    \n    \n    1{\n    \n    2  \"jurisdiction\": \"[COUNTRY_CODE]\",\n    \n    3  \"documentType\": \"[DOCUMENT_TYPE]\",\n    \n    4  \"source\": \"LIVE_CAPTURE_IMAGE\"\n    \n    5}\n\n###### DocumentCaptureDetails Variables\n\nThe variables used in the `DocumentCaptureDetails` file are shown below.\n\nVariable\n\n|\n\nDescription  \n  \n---|---  \n`COUNTRY_CODE`| Alpha-3 code from ISO 3166-1 (e.g., USA for the United States,\nDEU for Germany)  \n`DOCUMENT_TYPE`| One of the supported document types (excepted values are\n`PASSPORT`, `DRIVING_LICENSE`, `RESIDENT_CARD`, `IDENTITY_CARD`, `TAX_CARD`,\n`VOTER_CARD`.)  \n`IMAGE_SOURCE`| Information about how the image was captured:\n`LIVE_CAPTURE_IMAGE` if the identity document image has been taken live with\nthe **Document Capture SDK** at the time of the transaction;\n`LIVE_CAPTURE_VIDEO` if the identity document image was extracted from a\nvideo; `SCAN` if the photo of the identity document is captured with a flat\nscanner; or `OTHER` for other source.  \n  \n#### Example ID Verification Request\n\nAn example document verification request is shown in the snippet:\n\n    \n    \n    JSON\n    \n    \n    1{\n    \n    2  \"status\": \"PROCESSING\",\n    \n    3  \"type\": \"PASSPORT\",\n    \n    4  \"id\": \"96541141-c44b-4606-9423-5e0486395b60\"\n    \n    5}\n\n##### Request Variables\n\nThe variables used in the document verification request are shown below.\n\nVariable\n\n|\n\nDescription  \n  \n---|---  \n`id`| The document identifier that will be used in all future requests (Step\n4)  \n`status`| Document status  \n`type`| The document type  \n  \n### Step 4: Check Document Status\n\nWith this request, the client application checks the processing status of the\nsubmitted ID document.\n\n#### Example Document Status Request\n\nAn example request to check the processing status of the submitted ID document\nis shown in the snippet:\n\n    \n    \n    Shell\n    \n    \n    1curl -X GET \\\n    \n    2https://[URL_MAIN_PART]/gips/v1/identities/[IDENTITY_ID]/status/[IDDOCUMENT_ID] \\\n    \n    3-H 'apikey: [APIKEY_VALUE]'\n\n##### Request Variable\n\nThe request variable to check the document status is shown below.\n\nVariable\n\n|\n\nDescription  \n  \n---|---  \n`IDDOCUMENT_ID`| The value retrieved after performing the previous step. The\ncontent of this value should be taken from the `id` value of _Evaluate an ID\nDocument_ response message.  \n  \nThe client application can use this API to implement polling and proceeds to\nthe next steps only once certain that the document's status is `VERIFIED`.\nOtherwise, it will prompt the user to retry with another document capture.\n\n#### Example Document Status Response\n\nAn example to check the document processing status is shown in the snippet:\n\n    \n    \n    JSON\n    \n    \n    1{\n    \n    2  \"status\": \"VERIFIED\",\n    \n    3  \"type\": \"DRIVING_LICENSE\",\n    \n    4  \"id\": \"afe08d37-5f4d-4c07-ab77-d8041e0dcd3a\"\n    \n    5}\n\n##### Response Variables\n\nThe response variables to check the document status are shown below.\n\nVariable\n\n|\n\nDescription  \n  \n---|---  \n`ID`| The document identifier.  \n`Status`| Processing status of the ID document.  \n  \n###### Variable Values\n\nThe possible values for the `status` variable are shown below:\n\n  * `VERIFIED` \\- This value indicates that Document/Face has successfully been verified. When `VERIFIED`, a document/face is scored on a scale of 1 to 4.\n\n    * `LEVEL1` \\- Low confidence\n    * `LEVEL2` \\- Medium confidence\n    * `LEVEL3` \\- High confidence\n    * `LEVEL4` \\- Very high confidence\n  * `INVALID` \\- This value indicates that the document/face is considered invalid after the checks are performed.\n\n  * `NOT_VERIFIED` \\- This value indicates that the document/face was processed, but not enough checks were performed to make a verification decision. Most of the time this occurs due to the bad quality of the image or an unsupported document type.\n\n  * `PROCESSING` \\- This value indicates that the evidence is currently being processed by the service.\n\n  * `ADJUDICATION` \\- This value indicates that the evidence is currently reviewed by a human expert.\n\n### Step 5: Check Identity Status\n\nWith this request, the client application can check the status of the identity\nand see which level of assurance (LOA) has been achieved.\n\n#### Example Identity Status Request\n\nAn example request to check the status of the identity and the LOA is shown in\nthe snippet:\n\n    \n    \n    Shell\n    \n    \n    1curl -X GET \\\n    \n    2https://[URL_MAIN_PART]/gips/v1/identities/[IDENTITY_ID] \\\n    \n    3-H 'Content-Type: application/json' \\\n    \n    4-H 'apikey: [APIKEY_VALUE]'\n\n#### Example Identity Status Response\n\nAn example response to the identity status request and the LOA is shown in the\nsnippet:\n\n    \n    \n    JSON\n    \n    \n    1{\n    \n    2  \"globalStatus\": {\n    \n    3    \"id\": \"afc85bca-d46c-4653-8053-1f4790f1a582\",\n    \n    4    \"status\": \"EXPECTING_INPUT\",\n    \n    5    \"levelOfAssurance\": \"LOA1\"\n    \n    6  },\n    \n    7  \"consents\": [],\n    \n    8  \"attributes\": [],\n    \n    9  \"addresses\": [],\n    \n    10  \"idDocuments\": [\n    \n    11    {\n    \n    12      \"evidenceId\": \"8c6240fd-6b48-4a97-a847-1ae7e8e96ccb\",\n    \n    13      \"submitDateTime\": \"2019-05-13T16:59:20.15\",\n    \n    14      \"type\": \"DRIVING_LICENSE\",\n    \n    15      \"evidenceStatus\": {\n    \n    16        \"evaluationDateTime\": \"2019-05-13T17:01:21.036\",\n    \n    17        \"status\": \"VERIFIED\",\n    \n    18        \"strength\": \"LEVEL3\",\n    \n    19        \"score\": \"LEVEL3\"\n    \n    20      },\n    \n    21      \"idDocumentData\": {\n    \n    22        \"idDocumentType\": \"DRIVING_LICENSE\"\n    \n    23        // ...\n    \n    24      }\n    \n    25    }\n    \n    26  ]\n    \n    27}\n\n##### LOA Values\n\nCheck the `levelOfAssurance` value to view the current score of the identity\ncreated.\n\nThe client application can also check the status and content of all submitted\ndata:\n\n  * **Step 2** : Summarized in the `consents` structure\n  * **Step 3** : Summarized in the `idDocuments` structure\n\nThe rest of the answer carries various information, like the upgrade path to\nimprove LOA or the attributes (personal information extracted from documents\nor submitted by the user).\n\n### Step 6: Verify a Selfie Against an ID Document\n\nWith this request, the client application can submit a portrait picture of the\nuser for processing.\n\n#### Example Request for Selfie Verification\n\nAn example request to verify a selfie against an ID document is shown in the\nsnippet:\n\n    \n    \n    Shell\n    \n    \n    1curl -X POST \\\n    \n    2https://[URL_MAIN_PART]/gips/v1/identities/[IDENTITY_ID]/attributes/portrait/capture \\\n    \n    3-H 'Content-Type: multipart/form-data' \\\n    \n    4-H 'apikey: [APIKEY_VALUE]' \\\n    \n    5-F 'Portrait=@[ABSOLUTE_LOCAL_PATH_TO_SELFIE]'\n\n##### Request Variables\n\nThe request variables to verify the selfie are shown below.\n\nVariable\n\n|\n\nDescription  \n  \n---|---  \n`URL_MAIN_PART`| The Service domain  \n`APIKEY_VALUE`| Client application API key as provided by your administrators  \n`IDENTITY_ID`| Value obtained after performing Step 1. This value should be\nthe `id` value from the _Create Identity_ response message.  \n`ABSOLUTE_LOCAL_PATH_TO_SELFIE`| Value of the absolute path towards the local\nfile to use for portrait verification. For instance: \"C:\\myselfie.jpg\".  \n  \n#### Example Response for Selfie Verification\n\nAn example response to verify a selfie against an ID document is shown in the\nsnippet:\n\n    \n    \n    JSON\n    \n    \n    1{\n    \n    2  \"status\": \"PROCESSING\",\n    \n    3  \"type\": \"PORTRAIT\",\n    \n    4  \"id\": \"2d5e81c6-a600-47ed-aa22-2101b940fed6\"\n    \n    5}\n\n##### Response Variables\n\nThe response variables for selfie verification are shown below.\n\nVariable\n\n|\n\nDescription  \n  \n---|---  \n`id`| The user portrait identifier that will be used in future requests (Step\n7).  \n`status`| Status of the portrait.  \n  \nTo learn more about this web service, see the _Documentation_ section in the\nAPI Explorer section of the Developer Portal.\n\n### Step 7: Check the Status of the Portrait\n\nWith this request, the client application checks the status of the submitted\nportrait.\n\n#### Example Request to Check Portrait Status\n\nAn example request to check the status of the submitted user portrait is shown\nin the snippet:\n\n    \n    \n    Shell\n    \n    \n    1curl -X GET \\\n    \n    2https://[URL_MAIN_PART]/gips/v1/identities/[IDENTITY_ID]/status/[PORTRAIT_ID] \\\n    \n    3-H 'apikey: [APIKEY_VALUE]'\n\n##### Request Variables\n\nThe request variables to check the status of the user portrait are shown\nbelow.\n\nVariable\n\n|\n\nDescription  \n  \n---|---  \n`URL_MAIN_PART`| The Service domain.  \n`APIKEY_VALUE`| Client application API key as provided by your\nadministrator(s).  \n`IDENTITY_ID`| Value obtained after performing Step 1. This value should be\nthe `id` value from the _Create Identity_ response message.  \n`PORTRAIT_ID`| Value obtained after performing Step 6. The content of this\nvalue should be taken from the `id` value of the _Evaluate a Portrait_\nresponse message. The client application can use this API to implement polling\nand go to the next steps only when certain that the portrait's status is\n`VERIFIED`, otherwise it will prompt the user to retry with another portrait\ncapture.  \n  \n#### Example Response to Check Portrait Status\n\nAn example response to checking the status of the submitted user portrait is\nshown in the snippet:\n\n    \n    \n    JSON\n    \n    \n    1{\n    \n    2  \"status\": \"INVALID\",\n    \n    3  \"type\": \"PORTRAIT\",\n    \n    4  \"id\": \"97d8354e-7297-4eba-be39-1569d4c6342b\"\n    \n    5}\n\n##### Response Variables\n\nThe response variables to check the portrait status are shown below.\n\nVariable\n\n|\n\nDescription  \n  \n---|---  \n`id`| The portrait's ID.  \n`type`| Type of the evidence (here PORTRAIT).  \n`status`| Status of the portrait processing.  \n  \n###### Values for Status Variable\n\nThe values for the `status` variable include the following:\n\n  * `VERIFIED` \\- means that document/face has successfully been verified. When VERIFIED, a Document/Face is scored on a scale of 1 to 4.\n\n    * `LEVEL1`: low confidence\n    * `LEVEL2`: medium confidence\n    * `LEVEL3`: high confidence\n    * `LEVEL4`: very high confidence\n  * `INVALID` \\- means that the document/face is considered invalid after the checks performed\n\n  * `NOT_VERIFIED` \\- means that the document/face was processed, but not enough checks were performed to take a decision, most of the time due to bad quality of the image, or an unsupported document type\n\n  * `PROCESSING` \\- means that the evidence is currently being processed by the service\n\n  * `ADJUDICATION` \\- means that the evidence is currently reviewed by a human expert\n\n### Step 8: Check the Status of the Identity\n\nThis is the same request as in Step 5, but the result is slightly different,\nas portrait verification has taken place since then.\n\n#### Example Identity Status Response\n\nAn example status response for the identity check is shown in the snippet:\n\n    \n    \n    JSON\n    \n    \n    1{\n    \n    2  \"globalStatus\": {\n    \n    3    \"id\": \"string\",\n    \n    4    \"status\": \"EXPECTING_INPUT\",\n    \n    5    \"levelOfAssurance\": \"LOA2\",\n    \n    6    \"creationDateTime\": \"2018-11-20T16:00:19.537Z\",\n    \n    7    \"evaluationDateTime\": \"2018-11-20T16:00:19.537Z\",\n    \n    8    \"nameReferenceEvidenceId\": \"96541141-c44b-4606-9423-5e0486395b60\",\n    \n    9    \"portraitReferenceEvidenceId\": \"2d5e81c6-a600-47ed-aa22-2101b940fed6\",\n    \n    10    \"upgradePaths\": {}\n    \n    11  },\n    \n    12  \"consents\": [\n    \n    13    {\n    \n    14      \"consentId\": \"be5d9a77-5706-41ff-b8d6-e14a555cb0a7\",\n    \n    15      \"approved\": true,\n    \n    16      \"type\": \"PORTRAIT\",\n    \n    17      \"validityPeriod\": {\n    \n    18        \"to\": \"2018-11-20T16:00:19.538Z\"\n    \n    19      }\n    \n    20    }\n    \n    21  ],\n    \n    22  \"attributes\": [\n    \n    23    {\n    \n    24\t\t...\n    \n    25    }\n    \n    26  ],\n    \n    27  \"idDocuments\": [\n    \n    28    {\n    \n    29\t\t...\n    \n    30    }\n    \n    31  ],\n    \n    32  \"portrait\": {\n    \n    33\t...\n    \n    34  }\n    \n    35}\n\n> **_Note:_** The current LOA should have a value of `2`, increased since Step\n> 5 because of **portrait verification portrait > evidenceStatus > status =\n> VERIFIED** (as in Step 6). A new element was included that was not in Step\n> 5, namely \"portrait.\"\n>\n> For more details on the response content, see the corresponding Swagger\n> documentation in the `API Docs` section of the Portal.\n\n### Step 9: Ending the Process and Retrieving the Proof\n\nWith this request, the client application terminates the proofing process and\nretrieves all information that the Service has gathered and generated.\n\n`GET` Proof request is forbidden if the status of transaction is PROCESSING,\nGIPS will returned HTTP `403` to the Relying Service.\n\nIn response to this request, the client application receives an archive file.\nThe client application may archive this file for audit purpose and use its\ncontent as a reference for the user's identity.\n\nGetting the proof terminates the transaction and the Service applies the\ndeletion policy to the personal information gathered during the session.\n\n#### Example Request for Identity Proofing File\n\nAn example request for the identity proofing file that references the user's\nidentity is shown in the snippet:\n\n    \n    \n    Shell\n    \n    \n    1curl -X GET \\\n    \n    2  https://[URL_MAIN_PART]/gips/v1/identities/[IDENTITY_ID]/proof \\\n    \n    3  -H 'apikey: [APIKEY_VALUE]' -o proof.tar.gz\n\n##### Request Variables\n\nThe request variables for the identity proofing file are shown below.\n\nVariable\n\n|\n\nDescription  \n  \n---|---  \n`URL_MAIN_PART`| The Service domain  \n`APIKEY_VALUE`| Client application API key as provided by your\nadministrator(s)  \n`IDENTITY_ID`| Value obtained after performing Step 1. This value should be\nthe `id` value from the _Create Identity_ response message.  \n  \nOn this page:\n\nOn this page:\n\nID Proofing Use Case Steps\n\nID Proofing Use Case Steps UML Diagram for Web Service Calls Web Services\nCalls Request URL Variables Step 1: Create an Identity Step 2: Send Consent\nStep 3: Verify an ID Document Step 4: Check Document Status Step 5: Check\nIdentity Status Step 6: Verify a Selfie Against an ID Document Step 7: Check\nthe Status of the Portrait Step 8: Check the Status of the Identity Step 9:\nEnding the Process and Retrieving the Proof\n\n## Solutions\n\n### Identity Proofing\n\n  * Identity Proofing App\n\n  * Identity Proofing & Verification\n\n  * Capture SDKs\n\n  * Biometric Services\n\n### Mobile ID\n\n  * Online Authentication\n\n  * Verify SDKs\n\n## Support\n\n  * Submit a ticket\n\n  * Contact\n\n* * *\n\n\u00a9 IDEMIA 2023 All rights reserved.\n\nLegal & Privacy\n\nNecessary cookies help make the website usable by enabling basic functions\nlike page navigation and access to secure areas of the website. The website\ncannot function properly without these cookies.\n\nRead more about our terms of use and privacy policy\n\nI understand\n\n",
    "links": "[{\"link\": \"https://experience.idemia.com/\", \"text\": \"\"}, {\"link\": \"https://experience.idemia.com/auth/login/?redirect=%2Fidentity-proofing%2Fdevelop%2Fidentity-proofing-verification%2Fapi-docs%2F\", \"text\": \"Log in\"}, {\"link\": \"https://experience.idemia.com/auth/signup/?redirect=%2Fidentity-proofing%2Fdevelop%2Fidentity-proofing-verification%2Fapi-docs%2F\", \"text\": \"Sign up\"}, {\"link\": \"https://experience.idemia.com/identity-proofing/\", \"text\": \"Identity Proofing\"}, {\"link\": \"https://experience.idemia.com/identity-proofing/\", \"text\": \"Overview\"}, {\"link\": \"https://experience.idemia.com/identity-proofing/demo/\", \"text\": \"Demo\"}, {\"link\": \"https://experience.idemia.com/identity-proofing/resources/\", \"text\": \"Resources\"}, {\"link\": \"https://experience.idemia.com/identity-proofing/how-it-works/\", \"text\": \"How it Works\"}, {\"link\": \"https://experience.idemia.com/identity-proofing/develop/\", \"text\": \"Develop\"}, {\"link\": \"https://experience.idemia.com/identity-proofing/develop/identity-proofing-verification/\", \"text\": \"\"}, {\"link\": \"https://experience.idemia.com/identity-proofing/develop/identity-proofing-verification/api-docs/1/\", \"text\": \"\"}, {\"link\": \"https://experience.idemia.com/auth/signup/\", \"text\": \"Sign up\"}, {\"link\": \"https://experience.idemia.com/auth/login/\", \"text\": \"Log in\"}, {\"link\": \"https://experience.idemia.com/identity-proofing/develop/identity-proofing-verification/\", \"text\": \"\"}, {\"link\": \"https://experience.idemia.com/identity-proofing/develop/identity-proofing-verification/api-docs/1/\", \"text\": \"\"}, {\"link\": \"https://experience.idemia.com/auth/signup/\", \"text\": \"Sign up\"}, {\"link\": \"https://experience.idemia.com/auth/login/\", \"text\": \"Log in\"}, {\"link\": \"https://experience.idemia.com/identity-proofing/develop/\", \"text\": \"Develop\"}, {\"link\": \"https://experience.idemia.com/identity-proofing/\", \"text\": \"Identity Proofing\"}, {\"link\": \"https://experience.idemia.com/\", \"text\": \"Home\"}, {\"link\": \"https://experience.idemia.com/identity-proofing/develop/identity-proofing-verification/\", \"text\": \"Identity Proofing & Verification\"}, {\"link\": \"https://experience.idemia.com/identity-proofing/develop/identity-proofing-verification/api-docs/\", \"text\": \"API documentation\"}, {\"link\": \"https://experience.idemia.com/identity-proofing/\", \"text\": \"Identity Proofing\"}, {\"link\": \"https://experience.idemia.com/identity-proofing/develop/identity-proofing-app/\", \"text\": \"Identity Proofing App\"}, {\"link\": \"https://experience.idemia.com/identity-proofing/develop/identity-proofing-verification/\", \"text\": \"Identity Proofing & Verification\"}, {\"link\": \"https://experience.idemia.com/identity-proofing/develop/capture-sdk/\", \"text\": \"Capture SDKs\"}, {\"link\": \"https://experience.idemia.com/identity-proofing/develop/biometric-services/\", \"text\": \"Biometric Services\"}, {\"link\": \"https://experience.idemia.com/mobile-id/\", \"text\": \"Mobile ID\"}, {\"link\": \"https://experience.idemia.com/mobile-id/develop/online-authentication/7_17/\", \"text\": \"Online Authentication\"}, {\"link\": \"https://experience.idemia.com/mobile-id/develop/verify-sdks/\", \"text\": \"Verify SDKs\"}, {\"link\": \"https://experience.idemia.com/contact/\", \"text\": \"Contact\"}, {\"link\": \"https://experience.idemia.com/legal-docs/\", \"text\": \"Legal & Privacy\"}, {\"link\": \"https://experience.idemia.com/legal-docs/general/terms-of-use/\", \"text\": \"terms of use\"}, {\"link\": \"https://experience.idemia.com/legal-docs/general/privacy-policy/\", \"text\": \"privacy policy\"}]",
    "priceAndPlans": "Solutions\n\nLog inSign up\n\nIdentity Proofing\n\n  * Overview\n  * Demo\n  * Resources\n  * How it Works\n  * Develop\n\nSearch Docs\n\nAPI Version 1.0\n\nAPI Version 1.0\n\nBackBack\n\n##### API documentation\n\nGetting StartedAPI specificationsAPI specificationsBiometric\nVerificationLiveness detectionLive Document CaptureDocument Validation Against\na System of RecordUsing NFC for Document AuthenticationOne Time Passcode (OTP)\nPhone VerificationIdentity Claim VerificationTrusted Identity Claim\nVerificationProof SpecificationUsing ID&V WebHooksNIST SP 800-63\n\nSign upLog in\n\nSearch Docs\n\nAPI Version 1.0\n\nAPI Version 1.0\n\nBackBack\n\n##### API documentation\n\nGetting StartedAPI specificationsAPI specificationsBiometric\nVerificationLiveness detectionLive Document CaptureDocument Validation Against\na System of RecordUsing NFC for Document AuthenticationOne Time Passcode (OTP)\nPhone VerificationIdentity Claim VerificationTrusted Identity Claim\nVerificationProof SpecificationUsing ID&V WebHooksNIST SP 800-63\n\nSign upLog in\n\nNavigate to another page\n\nIdentity Proofing & VerificationDevelopIdentity ProofingHome\n\n  1. API documentation\n  2. Liveness detection\n\n# Liveness detection\n\nThis document describes how to use the IDEMIA Identity and Verification (ID&V)\nAPI for verifying an individual\u2019s face portrait, both for liveness detection\nand user verification against a reference identity evidence.\n\n## Biometric services\n\nID&V offers a service for capturing and validating a user\u2019s portrait. This\nservice:\n\n  * captures the user\u2019s portrait during a video stream.\n  * verifies that the user is a live person.\n  * verifies that the portrait corresponds to the portrait that is displayed on a reference identity document (evidence). That reference identity document will have been previously verified by the service.\n\nThe best image is extracted from a liveness portrait video capture which can\nbe performed from a browser or from a native operating system environment.\nThis best image will be used internally in ID&V in the same way as a selfie\ncapture image for biometric user verification using the ID&V biometric\nmatching functionality.\n\n### Liveness portrait video capture using a web browser\n\n  1. The server initializes the liveness session.\n  2. Liveness check is performed using the web browser to establish the video stream with the Biometric server.\n  3. The liveness session data is collected by the server.\n  4. The server analyzes the liveness session data, takes the decision, and extracts the best portrait image.\n\n### Liveness portrait video capture using a native SDK\n\nThe device uses a native SDK which initiates the user's liveness portrait\ncapture. The server side makes the decision.\n\n  1. The server initializes the liveness session.\n  2. Liveness check is performed using the native SDK.\n  3. The liveness session data is collected by the server.\n  4. The server analyzes the liveness session data, makes the decision, and extracts the best portrait image.\n\n## Requirements\n\nTo execute the scenarios, the client application needs:\n\n  * **API keys and URLs to access the Identity Proofing service**. The GIPS-RS key for back-end to back-end communication. The GIPS-UA key is for the user-facing application to Identity Proofing back-end communication.\n\n  * **In case of liveness detection by using a web browser** : An API key and a URL to establish the video stream between the user-facing application and the Biometric server (BIOSERVER-VIDEO).\n\n  * **In case of liveness detection by using a native SDK** : A URL to access the Identity Proofing service. This defines the liveness check configuration.\n\nDetails about the video stream creation with a web browser and the Biometric\nServer are available in Biometric Services SDK API Guide.\n\nDetails about face capture with the native SDK are available:\n\n  * for iOS: iOS Biometric Capture SDK\n\n  * for Android: Android Biometric Capture SDK\n\nAdditionally, the client application must notify the ID&V service that it has\nobtained the user\u2019s consent for processing their self-portrait image. That\nstep will be explained in the sequence diagrams of this document.\n\n## Scenario\n\nIn this scenario, we detail how a client application verifies an identity\ndocument and a user\u2019s portrait using a video stream to capture the face, and\ndetermine the liveness of the user.\n\nThere are two ways for capturing a self-portrait image of an individual with\nliveness detection:\n\n  * Liveness video capture using a web browser\n\n  * Liveness video capture using a native SDK\n\n### Liveness video capture using a web browser\n\n#### Steps overview\n\n  1. **Create** the identity.\n  2. **Submit** consent.\n  3. **Submit** an identity document capture.\n  4. **Start** a liveness video capture by using the browser.\n  5. **Retreive** portrait verification results and identity proof.\n\nIn the following example, we use a passport as a reference identity document.\n\n#### Steps\n\n**Step 1: Create identity**\n\nCreate an identity on the Identity Proofing server that will receive all of\nthe data and gather the verification results related to this identity.\n\n**Step 2: Submit consent**\n\nNotify the Identity Proofing service of the different verifications and\npermissions the user has consented to.\n\n**Step 3: Submit identity document capture**\n\nSend the identity document images for verification.\n\n  * The service performs the document authentication and extracts the user\u2019s personally identifiable information (PII) and document information;\n\n  * If the identity document image is usable:\n\n    * The service performs the biometric coding of the document image to verify the quality of the portrait.\n\n    * The service selects the document\u2019s portrait as the reference portrait for this user.\n\n    * If the identity document is valid, its status becomes `VERIFIED` and the identity document is assigned a score depending on the number and quality of verifications that have been performed (for example, `LEVEL2`).\n\n**Step 4: Start a liveness video capture through the web browser**\n\nInitialize a session with the service to verify a user\u2019s liveness and capture\nthe user\u2019s portrait.\n\nThe client application:\n\n  * Sends a request to the service to start a live video capture.\n\n    * The service creates a session in BioServer and returns the `sessionId` to the client application.\n  * Initializes a `peerConnection` with BioServer for capturing the video stream.\n\n  * Receives a notification from BioServer that the liveness capture is done.\n\n    * The service receives a callback from BioServer that the liveness capture is done.\n\n    * The service retrieves the result of the liveness from BioServer.\n\n    * The service gets the best image extracted from BioServer.\n\nThe service performs the face biometric matching between the reference image\nfrom the identity document and the best image is extracted from the liveness\nvideo capture.\n\n**Step 5: Get portrait verification result and retrieve proof**\n\nThe client application can retrieve the result of the face capture and\nverification:\n\n  * If the portrait images match, the portrait status is `VERIFIED` and the portrait is assigned a score equal to the score of the document from which the reference image was extracted (if the identity document score is `LEVEL2`, then the portrait score after successful matching will also be `LEVEL2`).\n\n  * If portrait image does not match the reference document, the portrait status is `INVALID` and the portrait is assigned a `LEVEL0` score and an error code.\n\nThe status and score of the identity document do not change.\n\nOnce the client application has reached the end of the process, it can close\nthe transaction by retrieving the proof file that contains all of the identity\nverification details.\n\n### Liveness video capture using a native SDK\n\n**Steps overview**\n\n  1. **Create** the identity.\n  2. **Submit** consent.\n  3. **Start** a liveness video capture by using the native SDK.\n  4. The native SDK **starts** the liveness metadata collection.\n  5. **Submit** an identity document capture.\n  6. **Retreive** portrait verification results and retrieve proof.\n\nIn the following example, we use a mobile application with a native SDK for\nthe live video capture.\n\n#### Steps\n\n**Step 1: Create identity**\n\nCreate an identity on the Identity Proofing server that will receive all of\nthe data and gather the verification results related to this identity.\n\n**Step 2: Submit consent**\n\nNotify the Identity Proofing service of the different verifications and\npermissions the user has consented to.\n\n**Step 3: Start a liveness video capture by using the native SDK**\n\nCreate a video capture session and initialize the liveness parameters to be\nused for verifying a user\u2019s liveness by using the native SDK and capture the\nuser\u2019s portrait.\n\nThe client application:\n\n  * Sends a request to ID&V for starting a live video capture by using the native SDK\n\nThe Identity Proofing service:\n\n  * Creates a session in BioServer\n  * Initializes the liveness parameters in BioServer depending on the configuration defined for the client application\n  * Returns to the client application the liveness session identifier to be used by the SDK to retrieve the liveness parameters and perform the liveness face capture\n\n**Step 4: The nativeSDK starts the liveness metadata collection**\n\nThe client application:\n\n  * Retreives the `liveness parameters` and checks the signature of the BioServer response\n\n  * Prepare liveness metadata by submitting to BioServer the `encryptedMasterSecret`, `encryptedDeviceId`, `livenessDeviceInfo` and `sdkParameters` to get the selfie capture permission.\n\n  * Start the selfie video capture of the user\n\n  * Send the liveness metadata and video record information to BioServer.\n\n**_Note_** : Details about the Replay Liveness APIs are available here: Replay\nLiveness APIs\n\nThe Identity Proofing service:\n\n  * Receives a notification from BioServer that the liveness capture is done\n\n  * Retrieves the result of the liveness verification from BioServer\n\n  * Gets the user's portrait image extracted by BioServer\n\n  * Performs the face biometric matching between the reference image from the identity document and the best image is extracted from the liveness video capture.\n\n**Step 5: Submit identity document capture**\n\nThe client application sends the identity document images for verification.\n\nThe Identity Proofing service:\n\n  * Performs the document authentication and extracts the user\u2019s personally identifiable information (PII) and document information;\n\n  * If the identity document image is usable:\n\n    * Performs the biometric coding of the document image to verify the quality of the portrait.\n\n    * Selects the document\u2019s portrait as the reference portrait for this user.\n\n    * If the identity document is valid, it status becomes `VERIFIED` and the identity document is assigned a score depending on the number and quality of verifications that have been performed (for example, `LEVEL2`).\n\n  * Performs the face biometric matching between the reference image from the identity document and the user's portrait image is extracted from the video capture.\n\n**Step 6: Receive portrait verification result and retrieve proof**\n\nThe client application can retrieve the result of the face capture and\nverification:\n\n  * If the portrait images match, the portrait status is `VERIFIED` and the portrait is assigned a score equal to the score of the document from which the reference image was extracted (if the identity document score is `LEVEL2`, then the portrait score after successful matching will also be `LEVEL2`).\n\n  * If portrait image does not match the reference document, the portrait status is `INVALID` and the portrait is assigned a `LEVEL0` score and an error code.\n\nThe status and score of the identity document do not change.\n\nOnce the client application has reached the end of the process, it can close\nthe transaction by retrieving the proof file that contains all of the identity\nverification details.\n\n## Web Service calls\n\nThere are many ways to implement the appropriate web service requests\ndepending on your programming language. For the sake of clarity, the request\nexamples use the cURL tool syntax.\n\nThe variables used in the request URLs are:\n\n**Variable**\n\n|\n\n **Meaning**  \n  \n---|---  \nURL_MAIN_PART| The ID&V domain.  \nAPIKEY_VALUE| Client application API key as provided by portal\nadministrator(s).  \nIDENTITY_ID| The value obtained after performing step 1 below. This should be\nthe `id` value from the _Create Identity_ response message.  \n  \n### Create an Identity\n\nThis request initiates the verification process with ID&V.\n\n_The request looks like this:_\n\n    \n    \n    Shell\n    \n    \n    1curl -X POST https://[URL_MAIN_PART]/gips/v1/identities  \\\n    \n    2-H 'Content-Type: multipart/form-data' \\\n    \n    3-H 'apikey: [APIKEY_VALUE]'\n\nWhen this request is sent, the ID&V response contains an `id` field. The value\nof that field replaces `IDENTITY_ID` in subsequent requests.\n\n_Sample response:_\n\n    \n    \n    JSON\n    \n    \n    1{\n    \n    2  \"id\": \"gips-c386c92e-fd7a-4024-bb41-b0f2aab7540c\",\n    \n    3  \"status\": \"EXPECTING_INPUT\",\n    \n    4  \"levelOfAssurance\": \"LOA0\",\n    \n    5  \"creationDateTime\": \"2022-12-20T14:46:27.2675744\",\n    \n    6  \"evaluationDateTime\": \"2022-12-20T14:46:27.7473597\",\n    \n    7  \"upgradePaths\": {}\n    \n    8}\n\nVariable\n\n|\n\nDescription  \n  \n---|---  \nid| The identity identifier that will be used to identify the current\ntransaction in subsequent requests.  \nstatus| Status of the transaction  \nlevelOfAssurance (LOA)| The current Level of trust for that identity  \ncreationDateTime| Identity creation date  \nevaluationDateTime| The date the identity was last evaluated  \nupgradePaths| List of possible submissions that would increase LOA  \n  \n### Submit consent\n\nConsent is a notification from the client application to ID&V that the user\nconsents to their personal information (in this case, their portrait image)\nbeing processed by ID&V for a given period.\n\nWith this request, the client application notifies ID&V that the user has\nconsented to the biometric processing of their portrait image.\n\n_The request looks like this:_\n\n    \n    \n    Shell\n    \n    \n    1curl -X POST \\\n    \n    2  https://[URL_MAIN_PART]/gips/v1/identities/[IDENTITY_ID]/consents \\\n    \n    3  -H 'Content-Type: application/json' \\\n    \n    4  -H 'apikey: [APIKEY_VALUE]' \\\n    \n    5  -d '[{\n    \n    6    \"approved\": true,\n    \n    7    \"type\": \"PORTRAIT\"\n    \n    8}]'\n\n_Sample response:_\n\n    \n    \n    JSON\n    \n    \n    1[\n    \n    2  {\n    \n    3    \"consentId\": \"781c83db-2b6d-462d-8225-3f2d7fe243f9\",\n    \n    4    \"approved\": true,\n    \n    5    \"type\": \"PORTRAIT\",\n    \n    6    \"validityPeriod\": {\n    \n    7      \"from\": \"2018-01-01\",\n    \n    8      \"to\": \"2023-06-20\"\n    \n    9    }\n    \n    10  }\n    \n    11]\n\nVariable\n\n|\n\nDescription  \n  \n---|---  \nconsentId| The consent identifier that might be used to identify the submitted\nconsent.  \napproved| Boolean indicating status of the consent: `true` or `false`.  \ntype| Type of consent submitted, possible values are: `PORTRAIT`, `GIV`.  \nvalidityPeriod| The period for which the consent is considered valid.  \nto| The date at which the consent will expire and will no longer be considered\nvalid.  \n  \n### Submit a document capture\n\nWith this request, the client application submits an identity document to ID&V\nfor processing. The supported identity document types are:\n\n  * Passport\n\n  * Identity card\n\n  * Driver's license\n\n  * Resident card\n\n_The request looks like this:_\n\n    \n    \n    Shell\n    \n    \n    1curl -X POST \\\n    \n    2https://[URL_MAIN_PART]/gips/v1/identities/[IDENTITY_ID]/id-documents/capture \\\n    \n    3-H 'Content-Type: multipart/form-data' \\\n    \n    4-H 'apikey: [APIKEY_VALUE]' \\\n    \n    5-F 'DocumentFront=@[ABSOLUTE_LOCAL_PATH_TO_IDDOCUMENT_FRONT]'\n    \n    6-F 'DocumentBack=@[ABSOLUTE_LOCAL_PATH_TO_IDDOCUMENT_BACK]'\n    \n    7-F 'DocumentCaptureDetails=@[ABSOLUTE_LOCAL_PATH_TO_DOCUMENTCAPTUREDETAILS]'\n\nVariable\n\n|\n\nDescription  \n  \n---|---  \nURL_MAIN_PART| The ID&V domain.  \nAPIKEY_VALUE| Client application API key as provided by your administrator.  \nIDENTITY_ID| Value retrieved after performing step 1. This should be the `id`\nvalue from the _Create Identity_ response message.  \nABSOLUTE_LOCAL_PATH_TO_IDDOCUMENT_FRONT| Value of the absolute path to the\ndocument front image. For instance: \"C:\\mydocumentfront.jpg\".  \nABSOLUTE_LOCAL_PATH_TO_IDDOCUMENT_BACK| Value of the absolute path to the\ndocument back image. For instance: \"C:\\mydocumentback.jpg.\"  \nABSOLUTE_LOCAL_PATH_TO_ DOCUMENTCAPTUREDETAILS| `DocumentCaptureDetails` is\nused to attach a JSON file containing specific information regarding the\ndocument. This is optional, but providing this information can greatly improve\nthe quality of the ID&V response.  \n  \n`DocumentCaptureDetails` is a JSON file with the following format:\n\n    \n    \n    JSON\n    \n    \n    1{\n    \n    2  \"jurisdiction\": \"[COUNTRY_CODE]\",\n    \n    3  \"documentType\": \"[DOCUMENT_TYPE]\",\n    \n    4  \"source\": \"[IMAGE_SOURCE]\"\n    \n    5}\n\nVariable\n\n|\n\nDescription  \n  \n---|---  \nCOUNTRY_CODE| Alpha-3 code from ISO 3166-1 (for example, USA for the United\nStates, DEU for Germany)  \nDOCUMENT_TYPE| One of the supported document types, accepted values are:\n`PASSPORT`, `DRIVING_LICENSE`, `RESIDENT_CARD`, `IDENTITY_CARD`, `TAX_CARD`,\n`VOTER_CARD`.  \nIMAGE_SOURCE| Information about how the image was captured:\n`LIVE_CAPTURE_IMAGE` if the identity document image has been taken live with a\nDocument Capture SDK, `LIVE_CAPTURE_VIDEO` if the identity document image was\nextracted during a video session. `SCAN` if the photo of the identity document\nis captured with a flat scanner, or `OTHER` for other source.  \n  \n_Sample response:_\n\n    \n    \n    JSON\n    \n    \n    1{\n    \n    2  \"status\": \"PROCESSING\",\n    \n    3  \"type\": \"PASSPORT\",\n    \n    4  \"id\": \"a5b568e5-25df-4323-b34e-c5405823b706\"\n    \n    5}\n\nVariable\n\n|\n\nDescription  \n  \n---|---  \nid| The document identifier that will be used in all future requests (step 4).  \nstatus| Document status  \ntype| The document type.  \n  \n### Check document status\n\nWith this request, the client application checks the processing status of the\nsubmitted identity document.\n\n_The request looks like this:_\n\n    \n    \n    Shell\n    \n    \n    1curl -X GET \\\n    \n    2https://[URL_MAIN_PART]/gips/v1/identities/[IDENTITY_ID]/status/[IDDOCUMENT_ID] \\\n    \n    3-H 'apikey: [APIKEY_VALUE]'\n\nVariable\n\n|\n\nDescription  \n  \n---|---  \nIDDOCUMENT_ID| The value retrieved after performing the previous step. The\ncontent of this value should be taken from the `id` value of the _Evaluate an\nidentity document_ response message.  \n  \nThe client application can use this API to implement polling and proceed to\nthe next steps only when it's certain that the document\u2019s status is\n`VERIFIED,` or it will prompt the user to retry with another document capture.\n\n_Sample response:_\n\n    \n    \n    JSON\n    \n    \n    1{\n    \n    2  \"status\": \"VERIFIED\",\n    \n    3  \"type\": \"PASSPORT\",\n    \n    4  \"id\": \"a5b568e5-25df-4323-b34e-c5405823b706\"\n    \n    5}\n\nVariable\n\n|\n\nDescription  \n  \n---|---  \nid| The document identifier.  \nstatus| Document status  \ntype| The document type.  \n  \nValues for `status` can be:\n\n  * `VERIFIED` \\- document or portrait has successfully been verified. When VERIFIED, a document or portrait is scored on a scale of 1 to 4.\n\n    * `LEVEL1`: low confidence\n    * `LEVEL2`: medium confidence\n    * `LEVEL3`: high confidence\n    * `LEVEL4`: very high confidence\n  * `INVALID` \\- document or portrait is considered invalid after the checks performed\n\n  * `NOT_VERIFIED` \\- document or portrait was processed, but not enough checks were performed to take a decision, typically due to poor quality of the image, or an unsupported document type\n\n  * `PROCESSING` \\- evidence is currently being processed by the service\n\n  * `ADJUDICATION` \\- evidence is currently being reviewed by a human expert\n\n### Start a live capture video session using a browser\n\nWith this request, the client application starts a live capture video session\nof the person to verify the liveness of the user, and extract the user's face\nimage that will be compared with a portrait extracted from a reference\nevidence such as a `VERIFIED` identity document's portrait.\n\nThe service provides, in response, a BioServer session identifier for\ninitializing the video stream between the browser and the BioServer and then\nlinks the result to the rest of the user's identity.\n\n_The request looks like this:_\n\n    \n    \n    Shell\n    \n    \n    1curl -X POST \\\n    \n    2  https://[URL_MAIN_PART]/gips/v1/identities/[IDENTITY_ID]/attributes/portrait/capture-session?mode=webSDK \\\n    \n    3  -H 'Content-Type: application/json' \\\n    \n    4  -H 'apikey: [APIKEY_VALUE]'\n\n_Sample response:_\n\n    \n    \n    JSON\n    \n    \n    1{\n    \n    2  \"status\": \"PROCESSING\",\n    \n    3  \"type\": \"PORTRAIT\",\n    \n    4  \"id\": \"e7917cff-5727-4106-a756-1ddf4216aca6\",\n    \n    5  \"sessionId\": \"0991ced\"\n    \n    6}\n\nVariable\n\n|\n\nDescription  \n  \n---|---  \nid| The user portrait identifier that will be used in future requests.  \ntype| Evidence type (here PORTRAIT)  \nstatus| Status of the portrait  \nsessionId| The identifier to use during the video session with BioServer.  \n  \n### Start a live capture video session using a native SDK\n\nWith this request, the client application starts a live capture video session\nof the person in order to verify the liveness of the user, and extract the\nuser's face image that will be compared with a portrait extracted from a\nreference evidence (e.g. a `VERIFIED` identity document's portrait).\n\nThe Service will provide, in the response, the liveness parameters (liveness\ntype, security Level, number of challenges to ask, and certificate) that will\nenable the performance of the liveness and face capture with the native SDK.\n\n_The request looks like this:_\n\n    \n    \n    Shell\n    \n    \n    1curl -X POST \\\n    \n    2  https://[URL_MAIN_PART]/gips/v1/identities/[IDENTITY_ID]/attributes/portrait/capture-session?mode=nativeSDK \\\n    \n    3  -H 'Content-Type: application/json' \\\n    \n    4  -H 'apikey: [APIKEY_VALUE]' \\\n    \n    5  -d '{\n    \n    6\t\"type\": \"LIVENESS_PASSIVE_VIDEO\",\n    \n    7\t\"securityLevel\": \"MEDIUM\",\n    \n    8\t\"nbChallenge\": 2\n    \n    9}'\n\nThe payload of this request is optional and can be empty. In that case, the\ndefault configuration is applied.\n\nDescription of JSON fields in the payload:\n\nVariable\n\n|\n\nMandatory\n\n|\n\nDescription  \n  \n---|---|---  \ntype| false| Liveness type. `LIVENESS_MEDIUM` user needs to move its head any\ndirection; `LIVENESS_HIGH` user needs to move its head in a defined direction.  \nsecurityLevel| false| Defines the level of security checks. Refer to Face\nCapture SDK reference for possible values.  \nnbChallenge| false| Number of user challenges. Between `1` and `3`.  \n  \n_Sample response:_\n\n    \n    \n    JSON\n    \n    \n    1{\n    \n    2  \"status\": \"PROCESSING\",\n    \n    3  \"type\": \"PORTRAIT\",\n    \n    4  \"id\": \"12971f18-16ce-4a10-890a-bda5ffc7ecd7\",\n    \n    5  \"sessionId\": \"0851de47-b98e-4526-b049-cf20c1a3bc93\"\n    \n    6}\n\nVariable\n\n|\n\nDescription  \n  \n---|---  \nstatus| Status of the portrait's evidence.  \ntype| Evidence type (here PORTRAIT).  \nid| The user portrait identifier that will be used in future requests.  \nsessionId| Identifier of the BioServer session  \n  \n### Check the Status of the Portrait\n\nWith this request, the client application checks the status of the submitted\nportrait.\n\nThe client application can use this API to implement polling and go to the\nnext steps only when being certain the portrait\u2019s status is `VERIFIED` or\nprompt the user to retry with another portrait capture.\n\n_The request looks like this:_\n\n    \n    \n    Shell\n    \n    \n    1curl -X GET \\\n    \n    2https://[URL_MAIN_PART]/gips/v1/identities/[IDENTITY_ID]/status/[PORTRAIT_ID] \\\n    \n    3-H 'apikey: [APIKEY_VALUE]'\n\nVariable\n\n|\n\nDescription  \n  \n---|---  \nURL_MAIN_PART| The service domain.  \nAPIKEY_VALUE| Client application API key as provided by your administrator.  \nIDENTITY_ID| Value obtained after performing step 1. This value should be the\n`id` value from the _Create Identity_ response message.  \nPORTRAIT_ID| Value obtained after performing step 6. The content of this value\nshould be taken from the `id` value of the _Evaluate a Portrait_ response\nmessage. The client application can use this API to implement polling and go\nto next steps only when certain that the portrait's status is `VERIFIED`,\notherwise it will prompt the user to retry with another portrait capture.  \n  \n_Sample response:_\n\n    \n    \n    JSON\n    \n    \n    1{\n    \n    2  \"status\": \"VERIFIED\",\n    \n    3  \"type\": \"PORTRAIT\",\n    \n    4  \"id\": \"12971f18-16ce-4a10-890a-bda5ffc7ecd7\"\n    \n    5}\n\nVariable\n\n|\n\nDescription  \n  \n---|---  \nid| The portrait's identifier.  \ntype| Type of the evidence (here PORTRAIT).  \nstatus| Status of the portrait processing.  \n  \nValues for `status` can be:\n\n  * `VERIFIED` \\- document or face has successfully been verified. When VERIFIED, a document or face is scored on a scale of 1 to 4.\n\n    * `LEVEL1` \\- low confidence\n    * `LEVEL2` \\- medium confidence\n    * `LEVEL3` \\- high confidence\n    * `LEVEL4` \\- very high confidence\n  * `INVALID` \\- document or face is considered invalid after the checks performed\n\n  * `NOT_VERIFIED` \\- document or face was processed, but not enough checks were performed to take a decision, most of the time due to bad quality of the image, or an unsupported document type\n\n  * `PROCESSING` \\- evidence is currently being processed by the service\n\n  * `ADJUDICATION` \\- evidence is currently being reviewed by a human expert\n\n### Check the status of the identity\n\nWith this request, the client application can check the status of the identity\nand see what level of assurance (LOA) has been reached.\n\n_The request looks like this:_\n\n    \n    \n    Shell\n    \n    \n    1curl -X GET \\\n    \n    2https://[URL_MAIN_PART]/gips/v1/identities/[IDENTITY_ID] \\\n    \n    3-H 'Content-Type: application/json' \\\n    \n    4    -H 'apikey: [APIKEY_VALUE]'\n\n_Sample response:_\n\n    \n    \n    JSON\n    \n    \n    1{\n    \n    2  \"globalStatus\": {\n    \n    3    \"id\": \"gips-c386c92e-fd7a-4024-bb41-b0f2aab7540c\",\n    \n    4    \"status\": \"EXPECTING_INPUT\",\n    \n    5    \"levelOfAssurance\": \"LOA2\",\n    \n    6    \"creationDateTime\": \"2022-12-20T14:46:27.2675744\",\n    \n    7    \"evaluationDateTime\": \"2022-12-20T14:55:24.927849\",\n    \n    8    \"nameReferenceEvidenceId\": \"a0416ffd-1ecf-4e0c-910d-b4192e963011\",\n    \n    9    \"portraitReferenceEvidenceId\": \"a0416ffd-1ecf-4e0c-910d-b4192e963011\",\n    \n    10    \"upgradePaths\": {}\n    \n    11  },\n    \n    12  \"consents\": [\n    \n    13    {\n    \n    14      \"consentId\": \"5d2a3c74-c3eb-46c9-ae00-a44eaef58399\",\n    \n    15      \"approved\": true,\n    \n    16      \"type\": \"PORTRAIT\",\n    \n    17      \"validityPeriod\": {\n    \n    18        \"from\": \"2018-01-01\",\n    \n    19        \"to\": \"2021-06-08\"\n    \n    20      }\n    \n    21    }\n    \n    22  ],\n    \n    23  \"attributes\": [\n    \n    24    {\n    \n    25      \"evidenceId\": \"f0fc970b-f584-4a7a-bb12-6a8640cc1bcc\",\n    \n    26      \"submitDateTime\": \"2020-12-08T19:51:36.7790737\",\n    \n    27      \"type\": \"ATTRIBUTES\",\n    \n    28      \"evidenceStatus\": {\n    \n    29        \"evaluationDateTime\": \"2020-12-08T19:56:38.708744\",\n    \n    30        \"status\": \"VERIFIED\",\n    \n    31        \"strength\": \"LEVEL5\",\n    \n    32        \"score\": \"LEVEL2\",\n    \n    33        \"isAdjudicable\": false\n    \n    34      },\n    \n    35      \"attributesData\": {\n    \n    36        \"givenNames\": [\n    \n    37          {\n    \n    38            \"value\": \"CHRISTOPHE\",\n    \n    39            \"verified\": true\n    \n    40          }\n    \n    41        ],\n    \n    42        \"surname\": {\n    \n    43          \"value\": \"ULYSSE\",\n    \n    44          \"verified\": true\n    \n    45        },\n    \n    46        \"fullname\": {\n    \n    47          \"value\": \"CHRISTOPHE ULYSSE\",\n    \n    48          \"verified\": true\n    \n    49        },\n    \n    50        \"dateOfBirth\": {\n    \n    51          \"value\": \"1960-04-10\",\n    \n    52          \"verified\": true\n    \n    53        },\n    \n    54        \"gender\": {\n    \n    55          \"value\": \"M\",\n    \n    56          \"verified\": true\n    \n    57        },\n    \n    58        \"nationality\": {\n    \n    59          \"value\": \"FRA\",\n    \n    60          \"verified\": true\n    \n    61        },\n    \n    62        \"eyeColor\": {\n    \n    63          \"value\": \"GRAY\",\n    \n    64          \"verified\": true\n    \n    65        },\n    \n    66        \"height\": {\n    \n    67          \"value\": \"6' 6\",\n    \n    68          \"verified\": true\n    \n    69        }\n    \n    70      }\n    \n    71    }\n    \n    72  ],\n    \n    73  \"addresses\": [\n    \n    74    {\n    \n    75      \"evidenceId\": \"cfbad0fa-0905-4059-b877-73b98fa53c6e\",\n    \n    76      \"submitDateTime\": \"2020-12-08T19:51:35.3634557\",\n    \n    77      \"type\": \"ADDRESS\",\n    \n    78      \"evidenceStatus\": {\n    \n    79        \"evaluationDateTime\": \"2020-12-08T19:56:38.708744\",\n    \n    80        \"status\": \"VERIFIED\",\n    \n    81        \"strength\": \"LEVEL5\",\n    \n    82        \"score\": \"LEVEL2\",\n    \n    83        \"isAdjudicable\": false\n    \n    84      },\n    \n    85      \"referenceIds\": [\"a0416ffd-1ecf-4e0c-910d-b4192e963011\"],\n    \n    86      \"addressData\": {\n    \n    87        \"streetDetails\": {\n    \n    88          \"streetLines\": [\"12 COTTONWOOD RD\", \"SUITE 1001\"],\n    \n    89          \"verified\": true\n    \n    90        },\n    \n    91        \"postcode\": \"12345\",\n    \n    92        \"city\": \"EMPIRE\",\n    \n    93        \"state\": \"NV\",\n    \n    94        \"country\": \"USA\",\n    \n    95        \"verified\": true\n    \n    96      }\n    \n    97    }\n    \n    98  ],\n    \n    99  \"idDocuments\": [\n    \n    100    {\n    \n    101      \"evidenceId\": \"a0416ffd-1ecf-4e0c-910d-b4192e963011\",\n    \n    102      \"submitDateTime\": \"2020-12-08T19:51:35.3634547\",\n    \n    103      \"type\": \"PASSPORT\",\n    \n    104      \"evidenceStatus\": {\n    \n    105        \"evaluationDateTime\": \"2020-12-08T19:56:38.708744\",\n    \n    106        \"status\": \"VERIFIED\",\n    \n    107        \"strength\": \"LEVEL4\",\n    \n    108        \"score\": \"LEVEL2\",\n    \n    109        \"isAdjudicable\": true,\n    \n    110        \"positiveIndicators\": [\n    \n    111          \"BIOMETRIC_MATCHING_CHECK_OK\",\n    \n    112          \"BIOMETRIC_QUALITY_CHECK_OK\",\n    \n    113          \"MODEL_RECOGNIZED_OK\",\n    \n    114          \"HIGH_TEMPLATE_OK\",\n    \n    115          \"CB2D_FIELDS_SYNTAX_OK\",\n    \n    116          \"DOCUMENT_BARCODE_PARSING_OK\",\n    \n    117          \"LOW_TEMPLATE_OK\",\n    \n    118          \"VISUAL_SECURITY_OK\",\n    \n    119          \"MRZ_CHECKSUMS_OK\",\n    \n    120          \"PHOTOCOPY_DETECTION_OK\",\n    \n    121          \"PERSONAL_NUMBER_CHECKSUMS_OK\",\n    \n    122          \"MODEL_COLOR_MATCHING_OK\",\n    \n    123          \"PORTRAIT_OK\",\n    \n    124          \"LCD_DETECTION_OK\",\n    \n    125          \"ESFX_OK\",\n    \n    126          \"OCRX_OK\",\n    \n    127          \"SIDES_DATA_CONSISTENCY_OK\",\n    \n    128          \"DOC_EXPIRATION_DATE_OK\",\n    \n    129          \"BIRTHDATE_VALID_OK\",\n    \n    130          \"DOC_ISSUING_COUNTRY_OK\",\n    \n    131          \"OCR_DOCNUM_OK\",\n    \n    132          \"MODEL_EXPIRATION_DATE_OK\",\n    \n    133          \"EMISSION_COUNTRY_OK\",\n    \n    134          \"MRZ_PRESENCE_OK\",\n    \n    135          \"MRZ_ALIGNEMENT_OK\",\n    \n    136          \"PHOTO_LOCATION_OK\",\n    \n    137          \"DOCUMENT_CLASSIFIER_OK\",\n    \n    138          \"MRZ_FIELDS_SYNTAX_OK\",\n    \n    139          \"SIDES_MODEL_CONSISTENCY_OK\",\n    \n    140          \"DOC_NATIONALITY_OK\",\n    \n    141          \"MODEL_VALID_OUT_OF_COUNTRY_OK\",\n    \n    142          \"OCR_FIRSTNAMES_OK\",\n    \n    143          \"DOC_SPECIMEN_OK\",\n    \n    144          \"OCR_LASTNAME_OK\",\n    \n    145          \"OCR_BIRTHDATE_OK\",\n    \n    146          \"EMISSION_DATE_OK\",\n    \n    147          \"OCR_ISSUING_DATE_OK\",\n    \n    148          \"BLUR_IMAGE_QUALITY_FRONT_OK\",\n    \n    149          \"EXPIRATION_DATE_CONSISTENCY_OK\",\n    \n    150          \"PAPER_COPY_OK\",\n    \n    151          \"OCR_EXPIRATION_DATE_OK\",\n    \n    152          \"ISSUING_DATE_VALIDITY_OK\",\n    \n    153          \"GLARE_IMAGE_QUALITY_FRONT_OK\",\n    \n    154          \"IMAGE_FRONT_DPI_CHECK_OK\",\n    \n    155          \"OCR_SEX_OK\",\n    \n    156          \"OCR_FULLNAME_OK\"\n    \n    157        ],\n    \n    158        \"warningIndicators\": [\n    \n    159          \"LOW_IMAGE_QUALITY_FRONT_WARNING\",\n    \n    160          \"KEYSTONE_IMAGE_QUALITY_FRONT_WARNING\",\n    \n    161          \"BLUR_IMAGE_QUALITY_BACK_WARNING\",\n    \n    162          \"GLARE_IMAGE_QUALITY_BACK_WARNING\"\n    \n    163        ],\n    \n    164        \"unverifiedIndicators\": [\n    \n    165          \"DOCUMENT_NUMBER_VALIDITY_UNVERIFIED\",\n    \n    166          \"COMPROMISED_DOCUMENT_CHECK_UNVERIFIED\",\n    \n    167          \"TEXTURE_ANALYSIS_UNVERIFIED\",\n    \n    168          \"MRZ_BARCODE_CROSSCHECK_UNVERIFIED\"\n    \n    169        ]\n    \n    170      },\n    \n    171      \"idDocumentData\": {\n    \n    172        \"idDocumentType\": \"PASSPORT\",\n    \n    173        \"idDocumentNumber\": \"08CD50338\",\n    \n    174        \"issuingCountry\": \"FRA\",\n    \n    175        \"issuingState\": \"WA\",\n    \n    176        \"issuingDate\": \"2005-09-01\",\n    \n    177        \"expiryDate\": \"2021-03-18\",\n    \n    178        \"personalAttributes\": {\n    \n    179          \"givenNames\": [\n    \n    180            {\n    \n    181              \"value\": \"CHRISTOPHE\",\n    \n    182              \"verified\": true\n    \n    183            }\n    \n    184          ],\n    \n    185          \"surname\": {\n    \n    186            \"value\": \"ULYSSE\",\n    \n    187            \"verified\": true\n    \n    188          },\n    \n    189          \"fullname\": {\n    \n    190            \"value\": \"CHRISTOPHE ULYSSE\",\n    \n    191            \"verified\": true\n    \n    192          },\n    \n    193          \"dateOfBirth\": {\n    \n    194            \"value\": \"1960-04-10\",\n    \n    195            \"verified\": true\n    \n    196          },\n    \n    197          \"gender\": {\n    \n    198            \"value\": \"M\",\n    \n    199            \"verified\": true\n    \n    200          },\n    \n    201          \"nationality\": {\n    \n    202            \"value\": \"FRA\",\n    \n    203            \"verified\": true\n    \n    204          },\n    \n    205          \"eyeColor\": {\n    \n    206            \"value\": \"GRAY\",\n    \n    207            \"verified\": true\n    \n    208          },\n    \n    209          \"height\": {\n    \n    210            \"value\": \"6' 6\",\n    \n    211            \"verified\": true\n    \n    212          }\n    \n    213        },\n    \n    214        \"address\": {\n    \n    215          \"streetDetails\": {\n    \n    216            \"streetLines\": [\"12 COTTONWOOD RD\", \"SUITE 1001\"],\n    \n    217            \"verified\": true\n    \n    218          },\n    \n    219          \"postcode\": \"12345\",\n    \n    220          \"city\": \"EMPIRE\",\n    \n    221          \"state\": \"NV\",\n    \n    222          \"country\": \"USA\",\n    \n    223          \"verified\": true\n    \n    224        },\n    \n    225        \"mrz\": [\n    \n    226          \"P<FRAULYSSE<<CHRISTOPHE<<<<<<<<<<<<<<<<<<<<<\",\n    \n    227          \"08CD503380FRA6004103M1806058<<<<<<<<<<<<<<06\"\n    \n    228        ]\n    \n    229      }\n    \n    230    }\n    \n    231  ],\n    \n    232  \"portrait\": {\n    \n    233    \"evidenceId\": \"cf4551b5-988e-4ac6-97f6-6c74f1ab908e\",\n    \n    234    \"submitDateTime\": \"2020-12-08T19:54:51.2122999\",\n    \n    235    \"type\": \"PORTRAIT\",\n    \n    236    \"evidenceStatus\": {\n    \n    237      \"evaluationDateTime\": \"2020-12-08T19:56:38.708744\",\n    \n    238      \"status\": \"VERIFIED\",\n    \n    239      \"strength\": \"LEVEL4\",\n    \n    240      \"score\": \"LEVEL2\",\n    \n    241      \"isAdjudicable\": true,\n    \n    242      \"positiveIndicators\": [\n    \n    243        \"BIOMETRIC_MATCHING_CHECK_OK\",\n    \n    244        \"BIOMETRIC_LIVENESS_CHALLENGE_OK\"\n    \n    245      ]\n    \n    246    },\n    \n    247    \"portraitQuality\": true,\n    \n    248    \"portraitData\": {\n    \n    249      \"source\": \"LIVE_CAPTURE_VIDEO\",\n    \n    250      \"channel\": \"nativeSDK\"\n    \n    251    }\n    \n    252  }\n    \n    253}\n\nCheck the `levelOfAssurance` value to see the current score of the identity\ncreated.\n\nThe client application can also check the status of all submitted data:\n\n  * Portrait is summarized in the \u201cportrait\u201d structure.\n\n  * Identity document is summarized in the \u201cidDocuments\u201d structure.\n\nThe rest of the response contains various information like the upgrade path to\nimprove LOA or attributes (personal information extracted from documents or\nsubmitted by the user).\n\n### Ending the process and retrieving the proof file\n\nWith this request, the client application terminates the proofing process and\nretrieves all the information that the service has gathered and generated.\n\nIn response to this request, the client application receives an archive file.\nThe client application can archive this file for audit purposes and use its\ncontent as a reference for the user's identity.\n\nGetting the proof terminates the transaction and the service applies the\ndeletion policy to the personal information gathered during the session.\n\n_The request looks like this:_\n\n    \n    \n    Shell\n    \n    \n    1curl -X GET \\\n    \n    2https://[URL_MAIN_PART]/gips/v1/identities/[IDENTITY_ID]/proof \\\n    \n    3-H 'apikey: [APIKEY_VALUE]' -o proof\n\nVariable\n\n|\n\nDescription  \n  \n---|---  \nURL_MAIN_PART| The service domain.  \nAPIKEY_VALUE| Client application API key as provided by your administrator.  \nIDENTITY_ID| Value obtained after performing step 1. This value should be the\n`id` value from the _Create Identity_ response message.  \n  \n## API feedback\n\nThis section contains error codes and indicators.\n\n### Error codes\n\nError codes in relation to face matching:\n\n**Error Code**\n\n|\n\n **Description**  \n  \n---|---  \n1600| The minimal threshold is not reached when matching the user\u2019s portrait\nto the document.  \n1601| The portrait quality is not good enough for biometric verification.  \n1609| Timeout occurred during live portrait capture.  \n1610| A technical error occurred while capturing live portrait.  \n1611| Failed to capture live portrait.  \n1021| The Biometrics verification service is not available.  \n  \n### Indicators\n\nID&V is configured by default, with the following blocking indicators:\n\n**Indicator name**\n\n|\n\n **Description**  \n  \n---|---  \nBIOMETRIC_MATCHING_CHECK_FAILED| Biometric matching failed  \nBIOMETRIC_QUALITY_CHECK_FAILED| Portrait quality check failed  \nBIOMETRIC_LIVENESS_CHALLENGE_FAILED| The Biometric liveness capture failed.  \n  \n### Scoring\n\nOnce a portrait has been submitted, results of the biometric matching are\ncombined by the Identity Proofing service to increase the score of the\nportrait evidence.\n\nHere is the summary of the portrait image scoring:\n\n**Evidence Type**\n\n|\n\n **Status**\n\n|\n\n **Score**\n\n|\n\n **Description**  \n  \n---|---|---|---  \nPortrait| NOT_VERIFIED| LEVEL0| Portrait submission not verified  \n| INVALID| LEVEL0| Portrait submission is invalid (biometric matching failed)  \n| VERIFIED| Same score as the evidence reference| The score reached is\ndescribed in the example below.  \n  \n**Example:**\n\nEvidence references and their scoring and level indications:\n\n  * PASSPORT, Document Authentication only: Passport status is `VERIFIED` at `LEVEL2` then Portrait status is also `VERIFIED` at `LEVEL2`\n  * Driver's License (US), Document Authentication + Issuing Source Verification: If Driver's License status is `VERIFIED` at `LEVEL3`, then Portrait status is also `VERIFIED` at `LEVEL3`\n  * PASSPORT, Document Authentication only: if Passport status is `VERIFIED` at `LEVEL2`, then Portrait status is also `VERIFIED` at `LEVEL2`\n  * Driver's License (US), Document Authentication + Issuing Source Verification: if Driver's License status is `VERIFIED` at `LEVEL3`, then Portrait status is also `VERIFIED` at `LEVEL3`\n\n## Decision rules and reference portrait election\n\nTo check that the user is the same person as the person on the identity\ndocument, ID&V performs a biometric comparison between the submitted self-\nportrait image and all the submitted evidences that contain a portrait image\n(such as passport, ID card, driver\u2019s license):\n\n  * If the biometric matching score is above the configured tolerance threshold, then the portrait images are considered to match.\n\n  * If not, portrait images are not considered to match.\n\nWhen multiple evidences are submitted, ID&V selects the reference portrait\nimage as follows:\n\n  * select the evidence with the highest verification score.\n\n  * If multiple evidences have the same verification score, then select the one with the highest coding quality score.\n\n  * If the evidences have the same quality score too, then select the one with the highest matching score.\n\n  * Finally, if no single evidence has been elected at this stage, select the most recently received evidence.\n\n**ID &V\u2019s face matching process**\n\n## Face Matching Configuration\n\nID&V is configured with a tolerance threshold for biometric matching that\ndetermines whether a biometric comparison matches or not; and it will incur a\nfalse acceptance rate (FAR) and a false rejection rate (FRR).\n\nDepending on use case constraints, an acceptable balance between FAR and FRR\nis determined using the tolerance threshold. The tolerance threshold can be\nconfigured, but should take into account the following trade-off:\n\n  * Low FAR implies high FRR\n\n  * Low FRR implies high FAR\n\n**FRR and FAR defined:**\n\n**Face Matching trade-off Graphical representation**\n\nOn this page:\n\nOn this page:\n\nBiometric services\n\nBiometric services Liveness portrait video capture using a web browser\nLiveness portrait video capture using a native SDK Requirements Scenario\nLiveness video capture using a web browser Liveness video capture using a\nnative SDK Web Service calls Create an Identity Submit consent Submit a\ndocument capture Check document status Start a live capture video session\nusing a browser Start a live capture video session using a native SDK Check\nthe Status of the Portrait Check the status of the identity Ending the process\nand retrieving the proof file API feedback Error codes Indicators Scoring\nDecision rules and reference portrait election Face Matching Configuration\n\n## Solutions\n\n### Identity Proofing\n\n  * Identity Proofing App\n\n  * Identity Proofing & Verification\n\n  * Capture SDKs\n\n  * Biometric Services\n\n### Mobile ID\n\n  * Online Authentication\n\n  * Verify SDKs\n\n## Support\n\n  * Submit a ticket\n\n  * Contact\n\n* * *\n\n\u00a9 IDEMIA 2023 All rights reserved.\n\nLegal & Privacy\n\nNecessary cookies help make the website usable by enabling basic functions\nlike page navigation and access to secure areas of the website. The website\ncannot function properly without these cookies.\n\nRead more about our terms of use and privacy policy\n\nI understand\n\n"
}