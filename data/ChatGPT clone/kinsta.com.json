{
    "summary": "Skip to content\n\nKinsta\u00ae Navigation\n\n  * Hosting Services \n\n###### Products\n\n    * Managed WordPress Hosting \n\n    * Web Application Hosting \n\n    * Managed Database Hosting \n\n    * Static Site Hosting \n\n###### Platform highlights\n\n    * Cloudflare integration \n\n    * API \n\n    * Expert support \n\n###### WordPress highlights\n\n    * APM tool \n\n    * DevKinsta \n\n    * Free site migrations \n\n    * Edge caching \n\n    * Add-ons \n\n  * Solutions \n\n###### We power your\n\n    * Enterprise \n\n    * Agency \n\n    * WooCommerce store \n\n    * Small business \n\n    * Non-profit organization \n\n    * Single high-resource site \n\n###### Case studies\n\n    * ##  Custom Media boosts client offerings with Kinsta \n\n##  Bookabook Raises Author Royalties by 50% After Kinsta Switch\n\n    * More case studies \n\n  * Pricing \n  * Docs \n  * Help \n\n###### Resources\n\n    * Blog \n\n    * Changelog \n\n    * System status \n\n    * Knowledge Base \n\n    * Compare Kinsta to competitors \n\n    * Development tools \n\n    * All resources \n\n###### Contact us\n\n    * Send us a question \n\n    * Call sales \n\n    * Request a live demo \n\n    * Ask the community \n\nSearch Login  Sign up\n\n  1. Home \n  2. Resource Center \n  3. Blog \n  4. React \n  5. How To Build and Deploy a ChatGPT Clone Application With React and OpenAI API \n\n#  How To Build and Deploy a ChatGPT Clone Application With React and OpenAI\nAPI\n\nJoel Olawanle,  December 21, 2023\n\n### Table of Contents\n\n  1. What\u2019s OpenAI API?\n  2. Why React?\n  3. How To Build a ChatGPT Clone With React and OpenAI API\n  4. How To Deploy Your React Application to Kinsta\n\nDownload article as PDF\n\n###\n\nClose\n\nAs the use of chatbots and virtual assistants continues to grow, many\nbusinesses and developers are looking for ways to create their own AI-powered\nchatbots. ChatGPT is one such chatbot, created by OpenAI, that is capable of\nengaging in human-like conversations and answering a wide range of questions.\n\n## What You\u2019re Going To Build\n\nIn this tutorial, you will learn how to build a ChatGPT clone application\nusing React and the OpenAI API. If you want to try your hand at a fun and\nengaging project over the weekend, this is a great opportunity to dive into\nReact and OpenAI.\n\nYou will also learn how to deploy directly from your GitHub repository to\nKinsta\u2019s Application Hosting platform, which provides a free _.kinsta.app_\ndomain to make your project go live swiftly. And with Kinsta\u2019s free trial and\nHobby Tier, you can easily get started without any cost.\n\nHere\u2019s a live demo of the ChatGPT clone application.\n\nChatGPT clone application.\n\nIf you\u2019d like to inspect this project more closely, you can access its GitHub\nrepository.\n\nAlternatively, using this starter project template, you can select **Use this\ntemplate** > **Create a new repository** \u2014 this will copy the starter code\ninto a new repository. This starter project comes with fundamental elements\nsuch as styles, Font Awesome CDN link, OpenAi package, and basic structure to\nassist you in getting started.\n\n### Info\n\nThe free credit for using OpenAI\u2019s API is limited to $18. If you\u2019re testing\nthis demo app and it stops working, it means the credit may have run out. To\nkeep using the OpenAI API, you\u2019ll need to upgrade your plan.\n\n### Requirements/Prerequisites\n\nThis tutorial is designed to be a \u201cfollow-along\u201d experience. Therefore, it\u2019s\nrecommended that you have the following to code alongside with ease:\n\n  * Fundamental understanding of HTML, CSS, and JavaScript\n  * Some familiarity with React\n  * Node.js and npm (Node Package Manager) or yarn installed on your computer\n\n### Table of Contents\n\n  1. What\u2019s OpenAI API?\n  2. Why React?\n  3. How To Build a ChatGPT Clone With React and OpenAI API\n  4. How To Deploy Your React Application to Kinsta\n\n## What\u2019s OpenAI API?\n\nThe OpenAI API is a cloud-based platform that grants developers access to\nOpenAI\u2019s language models, such as GPT-3, via an API. It allows developers to\nadd natural language processing features like text completion, sentiment\nanalysis, summarization, and translation to their applications without\ndeveloping and training their models.\n\nTo use the OpenAI API, developers must create an account on the OpenAI website\nand obtain an API key. The API key is used to authenticate API requests and\ntrack usage.\n\nOnce the API key is obtained, developers can use the API to submit text to the\nlanguage model and receive responses.\n\n## Why React?\n\nReact is a popular JavaScript library for building user interfaces. According\nto the 2022 Stack Overflow developer survey, it is the second most commonly\nused web technology, with 42.62% of the market share.\n\nReact allows developers to create declarative components representing\ndifferent parts of the user interface. These components are defined using a\nsyntax called JSX, which is a combination of JavaScript and HTML.\n\nThanks to its large ecosystem of component libraries and kits, developers can\neasily work with and integrate APIs such as the OpenAI API, to build complex\nchat interfaces and that\u2019s what makes it an excellent choice for building a\nChatGPT clone application.\n\n### How To Set Up Your React Development Environment\n\nThe best way to install React or create a React project is to install it with\ncreate-react-app. One prerequisite is to have Node.js installed on your\nmachine. To confirm that you have Node installed, run the following command in\nyour terminal.\n\n    \n    \n    node -v\n\nIf it brings up a version, then it exists. To use npx, you\u2019ll need to make\nsure your Node version is not less than v14.0.0, and your NPM version is not\nless than v5.6; else, you could need to update it by running `npm update -g`.\nOnce you\u2019ve figured out npm, you can now set up a React project by running the\ncommand below:\n\n    \n    \n    npx create-react-app chatgpt-clone\n\n**Note:** \u201cchatgpt-clone\u201d is the application name we are creating, but you can\nchange it to any name of your choice.\n\nThe installation process may take a few minutes. Once successful, you can\nnavigate to the directory and install the Node.js OpenAI package, which\nprovides convenient access to the OpenAI API from Node.js using the command\nbelow:\n\n    \n    \n    npm install openai\n\nYou can now run `npm start` to see your application live on\n**localhost:3000**.\n\nWhen a React project is created using the `create-react-app` command, it\nautomatically scaffolds a folder structure. The major folder that concerns you\nis the `src` folder, which is where development takes place. This folder\ncontains many files by default but you should only be concerned with the\n**App.js** , **index.js** and **index.css** files.\n\n  1. **App.js** : The **App.js** file is the main component in a React application. It typically represents the top-level component that renders all other components in the application.\n  2. **index.js** : This file is the entry point of your React application. It is the first file loaded when the app is opened and is responsible for rendering the **App.js** component to the browser.\n  3. **index.css** : This file is responsible for defining the overall styling and layout of your React application.\n\n## How To Build a ChatGPT Clone With React and OpenAI API\n\nThe ChatGPT clone application will consist of two components to make the\napplication easier to understand and maintain. These two components are:\n\n  1. **Form Section** : This component includes a text area field and a button for users to interact with the chatbot.\n  2. **Answer Section** : The questions and corresponding answers will be stored in an array and displayed in this section. You will loop through the array chronologically, showing the latest first.\n\n### Setting Up the ChatGPT Clone Application\n\nIn this tutorial, let us start by first building the application interface and\nthen you can implement functionality so your application interacts with the\nOpenAI API. Start by creating the two components you will use in this\ntutorial. For proper organization, you will create a **components** folder in\nthe **src** folder where all the components will be stored.\n\n#### The Form Section Component\n\nThis is a simple form that consists of a `textarea` and a submit `button`.\n\n    \n    \n    // components/FormSection.jsx\n    \n    const FormSection = () => {\n    \n        return (\n            <div className=\"form-section\">\n                <textarea\n                    rows=\"5\"\n                    className=\"form-control\"\n                    placeholder=\"Ask me anything...\"\n                ></textarea>\n                <button className=\"btn\">\n                    Generate Response \ud83e\udd16\n                </button>\n            </div>\n        )\n    }\n    \n    export default FormSection;\n    \n\nThis is what the form is expected to look like when you import it into your\n**App.js** file:\n\nForm section component.\n\n### Info\n\nThe focus of this tutorial is more on building and deploying your application.\nSo you can copy the styles in the src/index.css file into your own project to\nget the same result/application.\n\n#### The Answer Section Component\n\nThis section is where all questions and answers will be displayed. This is\nwhat this section will look like when you also import it into your **App.js**\nfile.\n\nAnswer section component.\n\nYou will fetch these questions and answers from an array and loop to make your\ncode easier to read and maintain.\n\n    \n    \n    // components/AnswerSection.jsx\n    \n    const AnswerSection = () => {\n        return (\n            <>\n                <hr className=\"hr-line\" />\n                <div className=\"answer-container\">\n                    <div className=\"answer-section\">\n                        <p className=\"question\">Who is the founder of OpenAi?</p>\n                        <p className=\"answer\">OpenAI was founded in December 2015 by Elon Musk, Sam Altman, Greg Brockman, Ilya Sutskever, Wojciech Zaremba, and John Schulman.</p>\n                        <div className=\"copy-icon\">\n                            <i className=\"fa-solid fa-copy\"></i>\n                        </div>\n                    </div>\n                </div>\n            </>\n        )\n    }\n    \n    export default AnswerSection;\n\n#### The Home Page\n\nYou now have both components created, but nothing will appear when you run\nyour application because you need to import them into your **App.js** file.\nFor this application, you will not implement any form of routing, meaning the\n**App.js** file will serve as your application\u2019s home component/page.\n\nYou can add some content, like the title and description of your application,\nbefore importing the components.\n\n    \n    \n    // App.js\n    \n    import FormSection from './components/FormSection';\n    import AnswerSection from './components/AnswerSection';\n    \n    const App = () => {\n        return (\n            <div>\n                <div className=\"header-section\">\n                    <h1>ChatGPT CLONE \ud83e\udd16</h1>\n                    <p>\n                        I am an automated question and answer system, designed to assist you\n                        in finding relevant information. You are welcome to ask me any queries\n                        you may have, and I will do my utmost to offer you a reliable\n                        response. Kindly keep in mind that I am a machine and operate solely\n                        based on programmed algorithms.\n                    </p>\n                </div>\n    \n                <FormSection />\n                <AnswerSection />\n            </div>\n        );\n    };\n    \n    export default App;\n\nIn the code above, the two components are imported and added to the\napplication. When you run your application, this is what your application will\nlook like:\n\nComplete ChatGPT clone application.\n\n### Adding Functionality and Integrating OpenAI API\n\nYou now have the user interface of your application. The next step is to make\nthe application functional so it can interact with the OpenAI API and get\nresponses. First, you need to get the value from your form when submitted\nbecause it will be used to query the OpenAI API.\n\n#### Getting Data From Form\n\nIn React, the best way to store and update data is to use states. In\nfunctional components, the `useState()` hook is used to work with states. You\ncan create a state, assign the value from your form to the state, and update\nit whenever its value changes. Let\u2019s start by importing the `useState()` hook\ninto the **FormSection.jsx** component and then creating a state to store and\nupdate `newQuestions`.\n\n    \n    \n    // components/FormSection.jsx\n    \n    import { useState } from 'react';\n    \n    const FormSection = ({ generateResponse }) => {\n        const [newQuestion, setNewQuestion] = useState('');\n    \n        return (\n            // Form to submit a new question\n        )\n    }\n    \n    export default FormSection;\n\nNext, you can assign the value of the `textarea` field to the state and create\nan `onChange()` event to update the state whenever the input value changes:\n\n    \n    \n    <textarea\n        rows=\"5\"\n        className=\"form-control\"\n        placeholder=\"Ask me anything...\"\n        value={newQuestion}\n        onChange={(e) => setNewQuestion(e.target.value)}\n    ></textarea>\n\nFinally, you can create an `onClick()` event, to load a function whenever the\nsubmit button is clicked. This method will be created in the **App.js** file\nand passed as a props into the **FormSection.jsx** component with the\n`newQuestion` and `setNewQuestion` values as arguments.\n\n    \n    \n    <button className=\"btn\" onClick={() => generateResponse(newQuestion, setNewQuestion)}>\n        Generate Response \ud83e\udd16\n    </button>\n\nYou have now created a state to store and update the form value, added a\nmethod which is passed as a props from the **App.js** file and handled click\nevent. This is what the final code will look like:\n\n    \n    \n    // components/FormSection.jsx\n    \n    import { useState } from 'react';\n    \n    const FormSection = ({ generateResponse }) => {\n        const [newQuestion, setNewQuestion] = useState('');\n    \n        return (\n            <div className=\"form-section\">\n                <textarea\n                    rows=\"5\"\n                    className=\"form-control\"\n                    placeholder=\"Ask me anything...\"\n                    value={newQuestion}\n                    onChange={(e) => setNewQuestion(e.target.value)}\n                ></textarea>\n                <button className=\"btn\" onClick={() => generateResponse(newQuestion, setNewQuestion)}>\n                    Generate Response \ud83e\udd16\n                </button>\n            </div>\n        )\n    }\n    \n    export default FormSection;\n\nThe next step will be to create a method in the **App.js** file to handle the\nentire process of interacting with OpenAI API.\n\n#### Interacting With OpenAI API\n\nTo interact with OpenAI API and obtain API keys in a React application, you\nmust create an OpenAI API account. You can sign up for an account on the\nOpenAI website using your google account or email. To generate an API key,\nclick **Personal** at the top-right corner of the website; some options will\nappear; click **View API keys**.\n\nAccess OpenAI API Keys.\n\nClick the **Create new secret key** button, copy the key somewhere as you\nwould use it in this application to interact with OpenAI. You can now proceed\nto initialize OpenAI by importing the openai package (you already installed)\nalong with the configuration method. Then create a configuration with your\ngenerated key and use it to initialize OpenAI.\n\n    \n    \n    // src/App.js\n    \n    import { Configuration, OpenAIApi } from 'openai';\n    \n    import FormSection from './components/FormSection';\n    import AnswerSection from './components/AnswerSection';\n    \n    const App = () => {\n        const configuration = new Configuration({\n            apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n        });\n    \n        const openai = new OpenAIApi(configuration);\n    \n        return (\n            // Render FormSection and AnswerSection\n        );\n    };\n    \n    export default App;\n\nIn the code above, the OpenAI API key is stored as an environment variable in\nthe **.env** file. You can create a **.env** file in the root folder of your\napplication and store the key to the variable `REACT_APP_OPENAI_API_KEY`.\n\n    \n    \n    // .env\n    REACT_APP_OPENAI_API_KEY = sk-xxxxxxxxxx\u2026\n\nYou can now proceed to create the `generateResponse` method in the **App.js**\nfile, and pass in the two parameters expected from the form you already\ncreated to handle the request and get response from the API.\n\n    \n    \n    // src/App.js\n    \n    import FormSection from './components/FormSection';\n    import AnswerSection from './components/AnswerSection';\n    \n    const App = () => {\n        const generateResponse = (newQuestion, setNewQuestion) => {\n            // Set up OpenAI API and handle response\n        };\n    \n        return (\n            // Render FormSection and AnswerSection\n        );\n    };\n    \n    export default App;\n\nYou can now send a request to the OpenAI API. The OpenAI API can perform many\noperations, such as question and answer (Q&A), Grammar correction, translation\nand lots more. For each of these operations, the options are different. For\nexample, the engine value for Q&A is `text-davinci-00`, while for SQL\ntranslate is `code-davinci-002`. Feel free to check the OpenAI example\ndocumentation for the various examples and their options.\n\nFor this tutorial, we are working only with the Q&A, this is what the option\nlooks like:\n\n    \n    \n    {\n      model: \"text-davinci-003\",\n      prompt: \"Who is Obama?\",\n      temperature: 0,\n      max_tokens: 100,\n      top_p: 1,\n      frequency_penalty: 0.0,\n      presence_penalty: 0.0,\n      stop: [\"\\\"],\n    }\n\n**Note:** I changed the prompt value.\n\nThe prompt is the question that is sent from the form. This means you will\nneed to receive it from the form input you are passing into the\n`generateResponse` method as a parameter. To do this, you will define the\noptions and then use the spread operator to create a complete option that\nincludes the prompt:\n\n    \n    \n    // src/App.js\n    \n    import { Configuration, OpenAIApi } from 'openai';\n    import FormSection from './components/FormSection';\n    import AnswerSection from './components/AnswerSection';\n    \n    const App = () => {\n        const configuration = new Configuration({\n            apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n        });\n    \n        const openai = new OpenAIApi(configuration);\n    \n        const generateResponse = async (newQuestion, setNewQuestion) => {\n            let options = {\n                model: 'text-davinci-003',\n                temperature: 0,\n                max_tokens: 100,\n                top_p: 1,\n                frequency_penalty: 0.0,\n                presence_penalty: 0.0,\n                stop: ['/'],\n            };\n    \n            let completeOptions = {\n                ...options,\n                prompt: newQuestion,\n            };\n    \n        };\n    \n        return (\n             // Render FormSection and AnswerSection\n        );\n    };\n    \n    export default App;\n\nAt this point, what is left is to send a request via the `createCompletion`\nmethod to OpenAI to get a response.\n\n    \n    \n    // src/App.js\n    \n    import { Configuration, OpenAIApi } from 'openai';\n    import FormSection from './components/FormSection';\n    import AnswerSection from './components/AnswerSection';\n    \n    import { useState } from 'react';\n    \n    const App = () => {\n        const configuration = new Configuration({\n            apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n        });\n    \n        const openai = new OpenAIApi(configuration);\n    \n        const [storedValues, setStoredValues] = useState([]);\n    \n        const generateResponse = async (newQuestion, setNewQuestion) => {\n            let options = {\n                model: 'text-davinci-003',\n                temperature: 0,\n                max_tokens: 100,\n                top_p: 1,\n                frequency_penalty: 0.0,\n                presence_penalty: 0.0,\n                stop: ['/'],\n            };\n    \n            let completeOptions = {\n                ...options,\n                prompt: newQuestion,\n            };\n    \n            const response = await openai.createCompletion(completeOptions);\n    \n            console.log(response.data.choices[0].text);\n        };\n    \n        return (\n            // Render FormSection and AnswerSection\n        );\n    };\n    \n    export default App;\n\nIn the code above, the answer\u2019s text will be displayed on your console. Feel\nfree to test your application by asking any question. The final step would be\nto create a state that will hold the array of questions and answers and then\nsend this array as a prop into the **AnswerSection** component. This is what\nthe **App.js** final code will look like:\n\n    \n    \n    // src/App.js\n    import { Configuration, OpenAIApi } from 'openai';\n    \n    import FormSection from './components/FormSection';\n    import AnswerSection from './components/AnswerSection';\n    \n    import { useState } from 'react';\n    \n    const App = () => {\n        const configuration = new Configuration({\n            apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n        });\n    \n        const openai = new OpenAIApi(configuration);\n    \n        const [storedValues, setStoredValues] = useState([]);\n    \n        const generateResponse = async (newQuestion, setNewQuestion) => {\n            let options = {\n                model: 'text-davinci-003',\n                temperature: 0,\n                max_tokens: 100,\n                top_p: 1,\n                frequency_penalty: 0.0,\n                presence_penalty: 0.0,\n                stop: ['/'],\n            };\n    \n            let completeOptions = {\n                ...options,\n                prompt: newQuestion,\n            };\n    \n            const response = await openai.createCompletion(completeOptions);\n    \n            if (response.data.choices) {\n                setStoredValues([\n                    {\n                        question: newQuestion,\n                        answer: response.data.choices[0].text,\n                    },\n                    ...storedValues,\n                ]);\n                setNewQuestion('');\n            }\n        };\n    \n        return (\n            <div>\n                <div className=\"header-section\">\n                    <h1>ChatGPT CLONE \ud83e\udd16</h1>\n                        <p>\n                            I am an automated question and answer system, designed to assist you\n                            in finding relevant information. You are welcome to ask me any\n                            queries you may have, and I will do my utmost to offer you a\n                            reliable response. Kindly keep in mind that I am a machine and\n                            operate solely based on programmed algorithms.\n                        </p>\n                </div>\n    \n                <FormSection generateResponse={generateResponse} />\n    \n                <AnswerSection storedValues={storedValues} />\n            </div>\n        );\n    };\n    \n    export default App;\n\nYou can now edit the **AnswerSection** component, so it receives the props\nvalue from **App.js** and use the JavaScript `Map()` method to look through\nthe `storedValues` array:\n\n    \n    \n    // components/AnswerSection.jsx\n    \n    const AnswerSection = ({ storedValues }) => {\n        return (\n            <>\n                <hr className=\"hr-line\" />\n                <div className=\"answer-container\">\n                    {storedValues.map((value, index) => {\n                        return (\n                            <div className=\"answer-section\" key={index}>\n                                <p className=\"question\">{value.question}</p>\n                                <p className=\"answer\">{value.answer}</p>\n                                <div className=\"copy-icon\">\n                                    <i className=\"fa-solid fa-copy\"></i>\n                                </div>\n                            </div>\n                        );\n                    })}\n                </div>\n            </>\n        )\n    }\n    \n    export default AnswerSection;\n\nWhen you run your application and test it by asking questions, the answer will\ndisplay below. But you will notice the copy button doesn\u2019t work. You will need\nto add an `onClick()` event to the button, so it triggers a method to handle\nthe functionality. You can use the `navigator.clipboard.writeText()` method to\nhandle the functionality. This is what the **AnswerSection** component will\nnow look like:\n\n    \n    \n    // components/AnswerSection.jsx\n    \n    const AnswerSection = ({ storedValues }) => {\n        const copyText = (text) => {\n            navigator.clipboard.writeText(text);\n        };\n    \n        return (\n            <>\n                <hr className=\"hr-line\" />\n                <div className=\"answer-container\">\n                    {storedValues.map((value, index) => {\n                        return (\n                            <div className=\"answer-section\" key={index}>\n                                <p className=\"question\">{value.question}</p>\n                                <p className=\"answer\">{value.answer}</p>\n                                <div\n                                    className=\"copy-icon\"\n                                    onClick={() => copyText(value.answer)}\n                                >\n                                    <i className=\"fa-solid fa-copy\"></i>\n                                </div>\n                            </div>\n                        );\n                    })}\n                </div>\n            </>\n        )\n    }\n    \n    export default AnswerSection;\n\nWhen you run your application, your ChatGPT clone application will work\nperfectly. You can now deploy your application to access it online and share\nit with friends.\n\n## How To Deploy Your React Application to Kinsta\n\nIt\u2019s not enough to build this application and leave it on your local\ncomputers. You\u2019ll want to share it online, so others can access it. Let\u2019s see\nhow to do this using GitHub and Kinsta.\n\n### Push Your Code to GitHub\n\nTo push your code to GitHub, you can use Git commands, which is a reliable and\nefficient way to manage code changes, collaborate on projects, and maintain\nversion history.\n\nThe first step to push your codes will be to create a new repository by\nlogging in to your GitHub account, clicking on the **+** button in the top\nright corner of the screen, and selecting **New repository** from the dropdown\nmenu.\n\nCreate a new repository on GitHub.\n\nGive your repository a name, add a description (optional), and choose whether\nyou want it to be public or private. Click **Create repository** to create it.\n\nOnce your repository is created, ensure you obtain the repository URL from the\nmain page of your repository, which you will need to push your code to GitHub.\n\nAccess your repository\u2019s URL.\n\nOpen your terminal or command prompt and navigate to the directory that\ncontains your project. Run the following commands one by one to push your code\nto your GitHub repository:\n\n    \n    \n    git init\n    git add .\n    git commit -m \"my first commit\"\n    git remote add origin [repository URL]\n    git push -u origin master\n\n`git init` initializes a local Git repository, `git add .` adds all files in\nthe current directory and its subdirectories to the new Git repository. `git\ncommit -m \"my first commit\"` commits the changes to the repository with a\nbrief message. `git remote add origin [repository URL]` sets the repository\nURL as the remote repository and `git push -u origin master` pushes the code\nto the remote repository (origin) in the master branch.\n\n### Info\n\nYou can replace \u201cmy first commit\u201d with a brief message of your own describing\nthe changes you made and \u201c[repository URL]\u201d with your GitHub repository\u2019s URL.\nOnce your code is pushed to GitHub, you can now deploy your repository to\nKinsta.\n\n### Deploy Your ChatGPT Clone React Application to Kinsta\n\nTo deploy your repository to Kinsta, follow these steps:\n\n  1. Log in to or create your Kinsta account on the MyKinsta dashboard.\n  2. Click **Applications** on the left sidebar and then click **Add service**.\n  3. Select **Application** from the dropdown menu to deploy a React application to Kinsta.\n  4. Select the repository you wish to deploy from the modal that appears. If you have multiple branches, you can choose the one you want to deploy and assign a name to the application. Select a data center location among the 25 available, and Kinsta will automatically detect a start command.\n  5. Finally, it\u2019s not safe to push out API keys to public hosts like GitHub, it was added as an environment variable locally. When hosting, you can also add it as an environment variable using the same variable name and the key as its value.\n\nDeploying ChatGPT clone to Kinsta.\n\nYour application will start deploying, and within a few minutes, a link will\nbe provided to access the deployed version of your application. In this case,\nthis is **https://chatgpt-clone-g9q10.kinsta.app/**\n\n**Note:** You can enable automatic deployment, so Kinsta will re-deploy your\napplication whenever you change your codebase and push it to GitHub.\n\n### Info\n\nIn this article, you learned how to deploy your site with Kinsta\u2019s Application\nHosting. Alternatively, if you are building a basic application/website that\ndoesn\u2019t require dynamic rendering and isn\u2019t subjected to traffic spikes, you\ncan opt to host your site with Kinsta\u2019s Static Site Hosting.\n\n  \n\n## Summary\n\nThe OpenAI API can be used to build a wide range of potential applications,\nfrom customer support and personal assistants to language translation and\ncontent creation.\n\nIn this tutorial, you have learned how to build a ChatGPT clone application\nwith React and OpenAI. You can integrate this application/feature into other\napplications to provide human-like conversational experiences to users.\n\nThere is more to what can be done with OpenAI API and how to improve this\nclone application. For example, you can implement local storage so that\nprevious questions and answers do not disappear even after you refresh your\nbrowser.\n\nWith Kinsta\u2019s free trial and Hobby Tier, you can easily get started without\nany cost on our Application Hosting. So why not give it a try and see what you\ncan create?\n\nShare your project and experiences in the comment below.\n\n* * *\n\nGet all your applications, databases, and WordPress sites online and under one\nroof. Our feature-packed, high-performance cloud platform includes:\n\n  * Easy setup and management in the MyKinsta dashboard\n  * 24/7 expert support\n  * The best Google Cloud Platform hardware and network, powered by Kubernetes for maximum scalability\n  * An enterprise-level Cloudflare integration for speed and security\n  * Global audience reach with up to 35 data centers and 260 PoPs worldwide\n\nGet started with a free trial of our Application Hosting or Database Hosting.\nExplore our plans or talk to sales to find your best fit.\n\n### Joel Olawanle\n\nKinsta\n\nJoel is a Frontend developer working at Kinsta as a Technical Editor. He is a\npassionate teacher with love for open source and has written over 200\ntechnical articles majorly around JavaScript and it's frameworks.\n\n  * Website\n  * LinkedIn\n  * Twitter\n  * YouTube\n\n### Is your web app slow?\n\nUncover your app's performance bottlenecks to deliver a better user\nexperience.\n\nFree Audit\n\n##  Related Articles and Topics\n\n##  Next.js vs React? It\u2019s a Partnership, Not a Competition\n\nWondering how Next.js vs React fit into the JavaScript landscape? We're taking\na look at these tools for creating high-performance websites.\n\nReading time\n\n    10 min read\nPublish date\n\n    February 6, 2023\nPost type\n\n    Blog\nTopic\n\n    JavaScript Frameworks\nTopic\n\n    React\n\n##  15+ Best React Tutorials and Resources for Developers\n\nReact is one of the most popular JavaScript libraries today. Haven't picked it\nup yet? This article will show you exactly how to get started.\n\nReading time\n\n    35 min read\nPublish date\n\n    January 23, 2023\nPost type\n\n    Blog\nTopic\n\n    JavaScript Tutorials\nTopic\n\n    React\n\nSEO  Browsers  Hosting  Website Security  Application Development  WordPress\n\n###  Comments\n\nLeave A Comment\n\n  1. Bobate Olusegun  March 14, 2023 at 11:02 pm \n\nReply\n\nLove this, Joel to be honest this is a great article. I love its simplicity.\n\n#### Leave a Reply Cancel reply\n\n**Comment policy:** We love comments and appreciate the time that readers\nspend to share ideas and give feedback. However, all comments are manually\nmoderated and those deemed to be spam or solely promotional will be deleted.\n\nComment\n\nName\n\nEmail\n\nBy submitting this form: You agree to the processing of the submitted personal\ndata in accordance with Kinsta's Privacy Policy, including the transfer of\ndata to the United States.\n\nYou also agree to receive information from Kinsta related to our services,\nevents, and promotions. You may unsubscribe at any time by following the\ninstructions in the communications received.\n\n  * ### Products\n\n    * Managed WordPress Hosting\n    * Web Application Hosting\n    * Managed Database Hosting\n    * Static Site Hosting\n    * Pricing\n  * ### Feature highlights\n\n    * Cloudflare integration\n    * Kinsta API\n    * Expert support\n    * Free WordPress migrations\n    * APM tool\n    * DevKinsta\n    * Edge Caching\n    * WordPress plan add-ons\n  * ### Use cases\n\n    * Enterprise\n    * Agency\n    * WooCommerce store\n    * Small business\n    * Non-profit organization\n    * Single high-resource site\n    * Case studies\n  * ### Resources\n\n    * Documentation\n    * Changelog\n    * Blog\n    * Newsletter\n    * Knowledge Base\n    * Development tools\n    * Kinsta vs competitors\n    * Agency directory\n    * System Status\n    * All resources\n  * ### Company\n\n    * About us\n    * Why choose Kinsta\n    * Careers\n    * Partners\n    * Research program\n    * Affiliate program\n    * Press\n    * Security and trust\n    * Contact Us\n\n  * Kinsta on GitHub\n  * Kinsta on Twitter\n  * Kinsta on YouTube\n  * Kinsta on Facebook\n  * Kinsta on LinkedIn\n\nSwitch\nlanguageDanskDeutschEnglishEspa\u00f1olFran\u00e7aisItalianoNederlands\u65e5\u672c\u8a9ePortugu\u00easSvenska\n\n\u00a9 2024 Kinsta Inc. All rights reserved. Kinsta\u00ae and WordPress\u00ae are registered\ntrademarks. Legal information.\n\n",
    "links": "[{\"link\": \"https://kinsta.com/blog/chatgpt-clone/#respond\", \"text\": \"Cancel reply\"}, {\"link\": \"https://kinsta.com/kinsta-alternatives/\", \"text\": \"Kinsta vs competitors\"}]",
    "priceAndPlans": "Skip to content\n\nKinsta\u00ae Navigation\n\n  * Hosting Services \n\n###### Products\n\n    * Managed WordPress Hosting \n\n    * Web Application Hosting \n\n    * Managed Database Hosting \n\n    * Static Site Hosting \n\n###### Platform highlights\n\n    * Cloudflare integration \n\n    * API \n\n    * Expert support \n\n###### WordPress highlights\n\n    * APM tool \n\n    * DevKinsta \n\n    * Free site migrations \n\n    * Edge caching \n\n    * Add-ons \n\n  * Solutions \n\n###### We power your\n\n    * Enterprise \n\n    * Agency \n\n    * WooCommerce store \n\n    * Small business \n\n    * Non-profit organization \n\n    * Single high-resource site \n\n###### Case studies\n\n    * ##  Custom Media boosts client offerings with Kinsta \n\n##  Bookabook Raises Author Royalties by 50% After Kinsta Switch\n\n    * More case studies \n\n  * Pricing \n  * Docs \n  * Help \n\n###### Resources\n\n    * Blog \n\n    * Changelog \n\n    * System status \n\n    * Knowledge Base \n\n    * Compare Kinsta to competitors \n\n    * Development tools \n\n    * All resources \n\n###### Contact us\n\n    * Send us a question \n\n    * Call sales \n\n    * Request a live demo \n\n    * Ask the community \n\nSearch Login  Sign up\n\n# Pricing\n\nSimple, transparent pricing for all your web projects.  \nNo per-seat pricing, all features included.\n\nSave $70+ by paying annually!\n\n###  WordPress Sites\n\nStarter plan\n\n$35\n\nUSD  month\n\n$350\n\nUSD  year\n\nLearn more\n\nMonthly Visits\n\n    25,000 visits\n\nStorage Space\n\n    10GB Storage\n\nMigrations\n\n    Free Migrations\n\n30-day money back guarantee\n\n###  Web Applications\n\nScale as you go from\n\n$0.0000026600\n\nUSD  second\n\n$0.00958\n\nUSD  hour\n\n$7\n\nUSD  month\n\nLearn more\n\nCPU Count\n\n    0.3 CPU\n\nRAM\n\n    0.3GB RAM\n\nBandwidth\n\n    +$0.14 USD / GB Bandwidth\n\nFree trial is available\n\n###  Databases\n\nScale as you go from\n\n$0.0000068493\n\nUSD  second\n\n$0.02470\n\nUSD  hour\n\n$18\n\nUSD  month\n\nLearn more\n\nStorage Space\n\n    1GB Storage\n\nCPU Count\n\n    0.25 CPU\n\nRAM\n\n    0.25GB RAM\n\nFree trial is available\n\n###  Static Sites\n\n260+ global edge locations\n\nFree\n\nFree\n\nFree\n\nLearn more\n\nSites\n\n    100 sites\n\nStorage Space\n\n    1GB size limit/site\n\nBandwidth\n\n    100GB bandwidth/month\n\nFair use policy limits\n\n### Trusted by 25,000+ growing businesses\n\n## One Platform, Dozens of Premium Hosting Features\n\nHost all your web projects in the intuitive MyKinsta dashboard. Enterprise-\nlevel features come free in every plan.\n\n  * Google Cloud Platform\n  * C2 machines\n  * Premium tier network\n  * 24/7 expert support\n  * Uptime monitoring\n  * User activity logs\n  * 25+ data centers\n  * Kinsta HTTP/3-enabled CDN\n  * Cloudflare DDoS protection\n  * Two enterprise firewalls\n  * Private network\n  * 99.9% uptime SLA\n  * Unlimited users\n\n## Billing FAQ\n\nCan\u2019t find what you\u2019re looking for?\n\nChat with us\n\nHow does billing work?\n\nWith Application Hosting or Database Hosting, pay only for the server\nresources you used at the end of each monthly billing cycle. These services\nare prorated to the second and postpaid.\n\nManaged WordPress Hosting plans are pre-paid, meaning you\u2019ll be billed at the\nbeginning of your monthly billing cycle.\n\nHow often will I be billed?\n\nApplication Hosting and Database Hosting are billed monthly. WordPress Hosting\ncan be billed monthly or annually. In fact, you can choose our annual\nWordPress billing to receive 2 months of free hosting.\n\nHow are resources calculated in Application Hosting?\n\nEach application pod has a predefined amount of CPU cycles, RAM, and build\ntime. You\u2019re billed for the use of these resources.\n\nHow are resources calculated in Database Hosting?\n\nThe database tier you select has a predefined amount of CPU, RAM, and storage.\nYou\u2019re billed for the use of these resources.\n\nCan I try Kinsta for free?\n\nYou can sign up for a free trial of our Application Hosting or Database\nHosting. The trial is limited to $20 in server credits and is applicable only\nto your first billing month.\n\nYou can also try our Managed WordPress Hosting services risk-free thanks to\nour free migrations and 30-day money-back guarantee.\n\nWhich payment methods do you accept?\n\nWe accept Visa, Mastercard, Maestro, American Express, and Discover. We also\naccept wire transfers and ACH for annual WordPress Hosting subscriptions. We\ndo not accept PayPal or checks.\n\nWill taxes be included in my monthly invoice?\n\nYes, if it is required in your region. We comply with local tax regulations\nfor USA sales tax, EU and UK VAT, and GST in India. Learn more about your\nregion below:\n\n  * Sales Tax (USA)\n  * Value-Added Tax (EU and UK)\n  * Goods and Services Tax (India)\n\nWhat currency will I be charged in?\n\nYou will be charged in US Dollars (USD). Your credit or debit card may convert\nthe charge to your local currency in your account.\n\nAm I charged when I enter my credit card?\n\nWith Application Hosting or Database Hosting, you won\u2019t be charged until the\nend of your first billing cycle. With Managed WordPress Hosting, you\u2019ll be\ncharged at the beginning of your monthly billing cycle.\n\nWill I be charged if I upgrade or downgrade my service temporarily?\n\nYes. You\u2019ll be charged for the resources used with the upgrade or downgrade.\n\n## Test It Out For Yourself\n\nTry out your app on a full-featured live server. Start your free trial of  \nApplication Hosting or Database Hosting today.\n\nDeploy an App Create WordPress Site\n\n  * ### Products\n\n    * Managed WordPress Hosting\n    * Web Application Hosting\n    * Managed Database Hosting\n    * Static Site Hosting\n    * Pricing\n  * ### Feature highlights\n\n    * Cloudflare integration\n    * Kinsta API\n    * Expert support\n    * Free WordPress migrations\n    * APM tool\n    * DevKinsta\n    * Edge Caching\n    * WordPress plan add-ons\n  * ### Use cases\n\n    * Enterprise\n    * Agency\n    * WooCommerce store\n    * Small business\n    * Non-profit organization\n    * Single high-resource site\n    * Case studies\n  * ### Resources\n\n    * Documentation\n    * Changelog\n    * Blog\n    * Newsletter\n    * Knowledge Base\n    * Development tools\n    * Kinsta vs competitors\n    * Agency directory\n    * System Status\n    * All resources\n  * ### Company\n\n    * About us\n    * Why choose Kinsta\n    * Careers\n    * Partners\n    * Research program\n    * Affiliate program\n    * Press\n    * Security and trust\n    * Contact Us\n\n  * Kinsta on GitHub\n  * Kinsta on Twitter\n  * Kinsta on YouTube\n  * Kinsta on Facebook\n  * Kinsta on LinkedIn\n\nSwitch\nlanguageDanskDeutschEnglishEspa\u00f1olFran\u00e7aisItalianoNederlands\u65e5\u672c\u8a9ePortugu\u00easSvenska\n\n\u00a9 2024 Kinsta Inc. All rights reserved. Kinsta\u00ae and WordPress\u00ae are registered\ntrademarks. Legal information.\n\n"
}