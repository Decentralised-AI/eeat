{
    "summary": "____\n\nToggle navigation __\n\n  * Blog\n  * Events\n  * Contact\n  * About\n\n  *  __\n  *   *  __\n\n# How to deploy on Evmos: The first EVM chain on Cosmos\n\n## Deploying and onboarding users to Evmos\n\nWe've covered several Layer 2 sidechains before:\n\n  * Polygon\n  * xDAI\n  * Binance Smart Chain\n  * Aurora Chain (NEAR)\n  * Optimism\n\n  \n\nBut this time we will do into the exciting new world of Cosmos. Many of the\nmost interesting projects are currently building in the ecosystem and you can\nexpect a lot to happen here in the near future. One of those is Evmos which is\nmore than just a layer 2.  \n\n## What is the Evmos?\n\nEvmos is a Proof-of-Stake blockchain which will be fully compatible and\ninteroperable with Ethereum. At its core, it's an open-source library called\nEthermint and maintained by Tharsis which anyone can use to enable EVM\ncompatibility within a Cosmos chain. Evmos will be it's own Cosmos chain meant\nas the first of many EVM-compatible chains running in the Cosmos ecosystem.\n\n  \n\nYou can send regular Ethereum transactions to the Evmos Chain. It has\nimplemented a fully functioning EVM on top of the Cosmos SDK.\n\nThe Cosmos-SDK is an open-source framework for building public Proof-of-Stake\nas well as permissioned Proof-Of-Authority blockchains. With the Cosmos SDK\none can easily create custom blockchains from scratch that can natively\ninteroperate with each other. In fact many projects like we at Injective\nProtocol are utilizing the power of this SDK already.\n\nThe SDK is envisioned as an npm-like framework to build secure blockchain\napplications on top of Tendermint which is the Cosmos POS consensus algorithm\nwith instant finality fast throughput. SDK-based blockchains are built out of\ncomposable modules, most of which are open source and readily available for\nany developers to use. Anyone can create a module for the Cosmos-SDK, and\nintegrating already-built modules is as simple as importing them into your\nblockchain application.\n\nThis is exactly what Ethermint is enabling. A module which anyone can\nintegrate in their Cosmos chain to enable EVM compatibility. All code for\nEvmos can be found here and Ethermint here. The testnet for Evmos went live\njust recently.  \n\n## Why choose Evmos?\n\n  * High throughput via Tendermint Core\n\n  * Instant finality  \n\n  * Decentralization through DAO governance  \n\n  * Fully EVM compatible  \n\n  * Scalability and connectivity for the Inter Blockchain Communication Protocol (IBC), this means your Dapp will be able to communicate with any Cosmos chain with enabled IBC!\n\n  * Fairer to users with transactions being included on a first in first out (FIFO) fashion\n\n  * Evmos supports all Ethereum Signers up to the latest go-ethereum version (London, Berlin, EIP155, Homestead and Frontier).  \n\n## How Ethermint enabled the EVM\n\nThe addresses are encoded in a different format than in Ethereum using Bech32.\nYou can convert them using the evmosd command line tool. Read below for the\ndetails. The transaction itself is run on a fork from geth and since Cosmos\nSDK has its own concept of gas, the result of gas used from geth after\nexecution is used to overwrite the value from the Cosmos SDK.\n\nFor paying the gas costs, as well as staking and governance a native token\ncalled Photon will be used. And of course Evmos is compatible with any\nexisting token standards from Ethereum. But keep in mind due to the different\nconsensus mechanism, Evmos has no pending state.\n\nEvmos also supports native multisig accounts thanks to Cosmos SDK.\n\nThe whole Cosmos world is exciting, but we are not on cosmosdeveloper.com, so\nlet's get to the Ethereum part.\n\n## How to deploy to Evmos\n\nDeploying to the Evmos Chain is straight-forward. If you're using Truffle,\nsimply add the Evmos Chain network configuration like this:\n\n    \n    \n    evmos-testnet: {\n          provider: () => new HDWalletProvider(mnemonic, 'http://arsiamons.rpc.evmos.org:8545'),\n          network_id: 9000,\n    }\n\nYou'll also need funds in the chain of course. For the testnet you can use the\nfaucet here. At the time of this writing this faucet is not working and only\nthe faucet in the Evmos Discord channel is working.\n\nTo get your correctly formatted Ethereum address for the faucet, install\n`evmosd`: (requires Go 1.17+)\n\n    \n    \n    $ git clone https://github.com/tharsis/evmos.git\n    $ cd evmos\n    $ make install\n\nNow you can run evmosd and pass your Ethereum address to it:\n\n    \n    \n    evmosd debug addr 0x14574A6DFF2DDF9E07828B4345D3040919AF5652\n      Address: [20 87 74 109 255 45 223 158 7 130 139 67 69 211 4 9 25 175 86 82]\n      Address (hex): 14574A6DFF2DDF9E07828B4345D3040919AF5652\n      Bech32 Acc: evmos1z3t55m0l9h0eupuz3dp5t5cypyv674jj7mz2jw\n      Bech32 Val: evmosvaloper1z3t55m0l9h0eupuz3dp5t5cypyv674jjn4d6nn\n\nThe 'Bech32 Acc' result will be what you need for the faucet.\n\n## How to onboard users to your Evmos Dapp\n\n### 1\\. Choice of wallet\n\nThese days you have much more than just MetaMask as possible wallets to\nsupport available. Take a look at Yearn Finance for example. They are\nsupporting 11 different wallets alone at the time of this writing.\n\n  * MetaMask\n  * WalletConnect\n  * Trezor\n  * Ledger\n  * Lattice\n  * Coinbase Wallet\n  * Portis\n  * Fortmatic\n  * Torus\n  * Authereum\n  * Opera\n\n### 2\\. MetaMask example live in action\n\nWe'll focus on MetaMask as the biggest wallet with the most features. With\nMetaMask you can nowadays actually request to connect directly to a custom\nnetwork.\n\nIf you want to see this live, check out Pancake Swap as example. Unless you\nalready have Evmos Chain added, it will request to add this network.\n\n### 3\\. How to add Evmos automatically for users\n\nYou can see on the right how to add the Evmos Chain automatically to the\nwallet for the user. This will show the popup you see above. If the user\nconfirms, the network is added and automatically switched to.\n\nThis is all thanks to EIP-3085 with the new RPC method\n`wallet_addEthereumChain` . See also the MetaMask docs here.\n\n    \n    \n    const params = [{\n        \"chainId\": \"9000\",\n        \"chainName\": \"Evmos Testnet\",\n        \"rpcUrls\": [\n            \"http://arsiamons.rpc.evmos.org:8545\"\n        ],\n        \"nativeCurrency\": {\n            \"name\": \"Photon\",\n            \"symbol\": \"PHOTON\",\n            \"decimals\": 18\n        },\n        \"blockExplorerUrls\": [\n            \"https://evm.evmos.org\"\n        ]\n    }]\n    \n    try {\n        await ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params,\n        })\n    } catch (error) {\n        // something failed, e.g., user denied request\n    }\n\n## How to transfer tokens from other chains to Evmos?\n\nThis is currently not yet possible for the testnet, but will be enabled later\nthrough two separate mechanisms:\n\nThe Gravity bridge is a project enabling ERC-20 transfers from Ethereum to\nCosmos and vice-versa.\n\nIBC is an interoperability protocol for communicating arbitrary data between\narbitrary state machines like Cosmos SDK blockchains.\n\n **So is this a layer 2 solution for Ethereum?** Well as you can see that\ndepends on your perspective. Eventually we will get a place where many chains\nare connected with each other, sometimes even with shared security through\nInterchain security or parachains, and calling a chain layer 1, 2 or 3 won't\nbe as clear anymore. On top you have Ethermint which can be used inside any\nCosmos based chain.\n\nSo yes in a way it's a layer 2 for Ethereum, as well as for the Cosmos chain\nitself. In another way, it's simply another separate chain on its own.\n\n* * *\n\n **Markus Waas**\n\nSolidity Developer\n\n  * Ethereum\n  * Layer-2\n  * Cosmos\n  * Evmos\n\n# More great blog posts from Markus Waas\n\n __ __ __ __\n\n\u00a9 2024 Solidity Dev Studio. All rights reserved.\n\nThis website is powered by Scrivito, the next generation React CMS.\n\n",
    "links": "[{\"link\": \"https://soliditydeveloper.com/\", \"text\": \"\"}, {\"link\": \"https://soliditydeveloper.com/blog\", \"text\": \"Blog\"}, {\"link\": \"https://soliditydeveloper.com/events\", \"text\": \"Events\"}, {\"link\": \"https://soliditydeveloper.com/contact\", \"text\": \"Contact\"}, {\"link\": \"https://soliditydeveloper.com/about\", \"text\": \"About\"}, {\"link\": \"https://soliditydeveloper.com/smock2\", \"text\": \"\"}, {\"link\": \"https://soliditydeveloper.com/eip-2535\", \"text\": \"\"}, {\"link\": \"https://soliditydeveloper.com/deploy-to-matic\", \"text\": \"Polygon\"}, {\"link\": \"https://soliditydeveloper.com/xdai\", \"text\": \"xDAI\"}, {\"link\": \"https://soliditydeveloper.com/deploy-to-binance-smart-chain\", \"text\": \"Binance Smart Chain\"}, {\"link\": \"https://soliditydeveloper.com/aurora-near-protocol\", \"text\": \"Aurora Chain (NEAR)\"}, {\"link\": \"https://soliditydeveloper.com/optimism\", \"text\": \"Optimism\"}, {\"link\": \"https://soliditydeveloper.com/markuswaas\", \"text\": \"\"}, {\"link\": \"https://soliditydeveloper.com/markuswaas\", \"text\": \"Markus Waas\"}]"
}