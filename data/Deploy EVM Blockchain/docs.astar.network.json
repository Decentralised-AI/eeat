{
    "summary": "Skip to main content\n\n **Astar Docs**DocsStart BuildingzkEVMMediumYoutube\n\nEnglish\n\n  * English\n  * \u65e5\u672c\u8a9e\n\nGitHub\n\nSearch\n\n  * Getting Started\n  * Learn\n\n  * Use\n\n  * Build\n\n    * Introduction\n\n    * Build Environment\n\n    * Wasm Smart Contracts\n\n    * EVM Smart contracts\n\n    * dApp Staking\n    * Integrations\n\n    * Run A Node\n\n    * Astar zkEVM\n\n    * Builder Guides\n\n      * How to leverage other Parachains\n\n      * Integration and Toolings\n\n      * XVM and Wasm\n\n      * Use Astar Features\n\n        * How to run a local Astar blockchain for contract testing\n        * How to get started with AstarBase\n        * How to use Truffle to deploy on Shibuya\n        * How to use Hardhat to deploy on Shibuya\n        * How to use Remix IDE to deploy an on-chain storage contract on Astar EVM\n      * Astar Hacker Guide\n\n    * Astar Beta Labs\n\n  * Tutorials\n\n  *   * Build\n  * Builder Guides\n  * Use Astar Features\n  * How to use Remix IDE to deploy an on-chain storage contract on Astar EVM\n\nOn this page\n\n# How to use Remix IDE to deploy an on-chain storage contract on Astar EVM\n\n## TL;DR\u200b\n\nRemix is a powerful open-source toolset for developing, deploying, debugging,\nand testing EVM-compatible smart contracts. Remix IDE is part of the Remix\nProject, which includes the Remix Plugin Engine and Remix Libraries: low-level\ntools for wider use.\n\nSince Astar Network is a multi-VM smart contract hub, we support both WASM and\nEVM, which means you can use Ethereum dev tools, including Remix, to interact\nwith Astar EVM\u2019s API directly and deploy Solidity-based smart contracts on\nAstar EVM.\n\nIn this cookbook, we will guide you on creating a Solidity-based on-chain\nstorage smart contract with Remix Online IDE, compiling and deploying the\ncontract to the Shibuya testnet, and how interacting with the contract to\nwrite the value on our blockchain and retrieve the value.\n\n* * *\n\n## What is Astar EVM?\u200b\n\nAs a multi-VM smart contract hub, Astar Network supports both WASM and EVM,\nwhich means Solidity smart contracts and WASM-based smart contracts can be\ndeployed on Astar Network.\n\nAnd Solidity developers can directly use Ethereum dev tools, including\nHardhat, Remix, MetaMask, to directly interact with Astar EVM\u2019s API and deploy\nSolidity smart contracts on Astar EVM.\n\n## What is Remix?\u200b\n\nRemix is a powerful open-source toolset for developing, deploying, debugging,\nand testing EVM-compatible smart contracts. Remix IDE is part of the Remix\nProject, which includes the Remix Plugin Engine and Remix Libraries: low-level\ntools for wider use.\n\n* * *\n\n## Create a Solidity contract with Remix IDE\u200b\n\n  * Visit https://remix.ethereum.org/ for online Remix IDE\n    * or install the Remix IDE Desktop from https://github.com/ethereum/remix- **desktop** /releases.\n  * Create a new workspace by clicking the \u201c+\u201d beside \u201cWorkspace\u201d and use the \u201cBlank\u201d template.\n\n  * Add a new file named \u201cstorage.sol\u201d with the following contract code provided. This is a simple example contract with two methods to `store()` and `retrieve()` value in a variable deployed on-chain.\n    \n        // SPDX-License-Identifier: GPL-3.0  \n      \n    pragma solidity >=0.7.0 <0.9.0;  \n      \n    /**  \n     * @title Storage  \n     * @dev Store & retrieve value in a variable  \n     * @custom:dev-run-script ./scripts/deploy_with_ethers.ts  \n     */  \n    contract Storage {  \n      \n        uint256 number;  \n      \n        /**  \n         * @dev Store value in variable  \n         * @param num value to store  \n         */  \n        function store(uint256 num) public {  \n            number = num;  \n        }  \n      \n        /**  \n         * @dev Return value   \n         * @return value of 'number'  \n         */  \n        function retrieve() public view returns (uint256){  \n            return number;  \n        }  \n    }  \n    \n\n* * *\n\n## Compile the Solidity contract for deployment\u200b\n\nBefore smart contracts can be deployed, the Solidity code must be compiled to\nbytecode for the EVM (Ethereum Virtual Machine), which will eventually be\ndeployed on the blockchain. The compilation also generates an ABI (Application\nBinary Interface), an interface between operating systems and user programs.\n\n  * Clicking the Solidity icon in the icon panel brings you to the Solidity Compiler.\n\n  * Compile our Solidity storage contract by clicking \u201cCompile storage.sol\u201d.\n\n  * After the compilation, you will be able to check the contract ABI and bytecode in the \u201cABI\u201d and \u201cBytecode\u201d sections under the \u201cCompilation Details\u201d. You will also find the \u201cStorage.json\u201d file in your workspace, which may be useful for your contract verification on block explorers.\n\n* * *\n\n## Deploy the Solidity contract to Shibuya testnet\u200b\n\n  * Before the deployment on the Shibuya testnet, which is the testnet of Astar Network and Shiden Network:\n    * Please ensure that you have added Shibuya Network to your MetaMask wallet with the following configuration https://docs.astar.network/docs/environment/endpoints/.\n      * Network name: Shibuya Network\n      * New RPC URL: https://evm.shibuya.astar.network\n      * Chain ID: 81\n    * Please claim SBY testnet tokens from the Shibuya faucet following the guide here https://docs.astar.network/docs/environment/faucet/\n  * Click the EVM icon on the left sidebar (the fourth icon) and visit the \u201cDEPLOY & RUN TRANSACTIONS\u201d page.\n  * Switch the \u201cENVIRONMENT\u201d to \u201cInjected Provider - MetaMask\u201d and ensure you have the right wallet address connected in MetaMask.\n\n  * Click \u201cDeploy\u201d and confirm the transaction in your MetaMask.\n\n  * Now, your first Solidity contract on the Shibuya testnet is deployed! Please feel free to copy the deployed contract address from \u201cDeployed Contracts\u201d and view it in the block explorer. BlockScout for Shibuya: https://blockscout.com/shibuya\n\n* * *\n\n## Interact with the deployed Solidity contract via Remix\u200b\n\nYou will also be able to interact with the contract that you just deployed on\nShibuya via Remix IDE.\n\n  * Scroll down the contract details under the \u201cDeployed Contracts\u201d section on the \u201cDEPLOY & RUN TRANSACTIONS\u201d page.\n\n  * You will be able to call the methods in the deployed contract.\n    * `store()`: to store a value in a variable deployed on-chain.\n    * `retrieve()`: read-only, to retrieve a value in a variable deployed on-chain.\n\n* * *\n\n## FAQ\u200b\n\nPlease feel free to join our Discord here for technical support.\n\n## Reference\u200b\n\nhttps://remix-ide.readthedocs.io/en/latest/index.html\n\nhttps://docs.astar.network/\n\nEdit this page\n\nPrevious\n\nHow to use Hardhat to deploy on Shibuya\n\nNext\n\nAstar Hacker Guide\n\n  * TL;DR\n  * What is Astar EVM?\n  * What is Remix?\n  * Create a Solidity contract with Remix IDE\n  * Compile the Solidity contract for deployment\n  * Deploy the Solidity contract to Shibuya testnet\n  * Interact with the deployed Solidity contract via Remix\n  * FAQ\n  * Reference\n\nDocs\n\n  * Get Started\n\nCommunity\n\n  * Discord\n  * Twitter\n\nMore\n\n  * Blog\n  * GitHub\n\nCopyright \u00a9 2024 Astar Developers Hub.\n\n",
    "links": "[{\"link\": \"https://docs.astar.network/\", \"text\": \"\"}, {\"link\": \"https://docs.astar.network/docs/getting-started\", \"text\": \"Docs\"}, {\"link\": \"https://docs.astar.network/docs/build/\", \"text\": \"Start Building\"}, {\"link\": \"https://docs.astar.network/docs/build/zkEVM/quickstart\", \"text\": \"zkEVM\"}, {\"link\": \"https://docs.astar.network/docs/build/builder-guides/astar_features/use_remix\", \"text\": \"English\"}, {\"link\": \"https://docs.astar.network/ja/docs/build/builder-guides/astar_features/use_remix\", \"text\": \"\u65e5\u672c\u8a9e\"}, {\"link\": \"https://docs.astar.network/docs/getting-started\", \"text\": \"Getting Started\"}, {\"link\": \"https://docs.astar.network/docs/learn/\", \"text\": \"Learn\"}, {\"link\": \"https://docs.astar.network/docs/use/\", \"text\": \"Use\"}, {\"link\": \"https://docs.astar.network/docs/build/\", \"text\": \"Build\"}, {\"link\": \"https://docs.astar.network/docs/build/Introduction/\", \"text\": \"Introduction\"}, {\"link\": \"https://docs.astar.network/docs/build/environment/\", \"text\": \"Build Environment\"}, {\"link\": \"https://docs.astar.network/docs/build/wasm/\", \"text\": \"Wasm Smart Contracts\"}, {\"link\": \"https://docs.astar.network/docs/build/EVM/\", \"text\": \"EVM Smart contracts\"}, {\"link\": \"https://docs.astar.network/docs/build/dapp-staking\", \"text\": \"dApp Staking\"}, {\"link\": \"https://docs.astar.network/docs/build/integrations/\", \"text\": \"Integrations\"}, {\"link\": \"https://docs.astar.network/docs/build/nodes/\", \"text\": \"Run A Node\"}, {\"link\": \"https://docs.astar.network/docs/build/zkEVM/\", \"text\": \"Astar zkEVM\"}, {\"link\": \"https://docs.astar.network/docs/build/builder-guides/\", \"text\": \"Builder Guides\"}, {\"link\": \"https://docs.astar.network/docs/build/builder-guides/leverage_parachains/interact_with_xc20\", \"text\": \"How to leverage other Parachains\"}, {\"link\": \"https://docs.astar.network/docs/build/builder-guides/integration_toolings/cookbook_1\", \"text\": \"Integration and Toolings\"}, {\"link\": \"https://docs.astar.network/docs/build/builder-guides/xvm_wasm/manage_psp22_asset\", \"text\": \"XVM and Wasm\"}, {\"link\": \"https://docs.astar.network/docs/build/builder-guides/astar_features/run_local_network\", \"text\": \"Use Astar Features\"}, {\"link\": \"https://docs.astar.network/docs/build/builder-guides/astar_features/run_local_network\", \"text\": \"How to run a local Astar blockchain for contract testing\"}, {\"link\": \"https://docs.astar.network/docs/build/builder-guides/astar_features/astarBase\", \"text\": \"How to get started with AstarBase\"}, {\"link\": \"https://docs.astar.network/docs/build/builder-guides/astar_features/truffle\", \"text\": \"How to use Truffle to deploy on Shibuya\"}, {\"link\": \"https://docs.astar.network/docs/build/builder-guides/astar_features/use_hardhat\", \"text\": \"How to use Hardhat to deploy on Shibuya\"}, {\"link\": \"https://docs.astar.network/docs/build/builder-guides/astar_features/use_remix\", \"text\": \"How to use Remix IDE to deploy an on-chain storage contract on Astar EVM\"}, {\"link\": \"https://docs.astar.network/docs/build/builder-guides/hacking/\", \"text\": \"Astar Hacker Guide\"}, {\"link\": \"https://docs.astar.network/docs/build/astar-beta-labs/\", \"text\": \"Astar Beta Labs\"}, {\"link\": \"https://docs.astar.network/docs/tutorials/\", \"text\": \"Tutorials\"}, {\"link\": \"https://docs.astar.network/\", \"text\": \"\"}, {\"link\": \"https://docs.astar.network/docs/build/\", \"text\": \"Build\"}, {\"link\": \"https://docs.astar.network/docs/build/builder-guides/\", \"text\": \"Builder Guides\"}, {\"link\": \"https://docs.astar.network/docs/build/builder-guides/astar_features/use_hardhat\", \"text\": \"\"}, {\"link\": \"https://docs.astar.network/docs/build/builder-guides/hacking/\", \"text\": \"\"}, {\"link\": \"https://docs.astar.network/docs/getting-started\", \"text\": \"Get Started\"}]"
}