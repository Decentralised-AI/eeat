{
    "summary": "Skip to main content\n\nSearch```K`\n\nSign inCreate account\n\nGuidesAPI DocumentationChangelog\n\nVideo Tutorials\n\n  * Welcome\n  * Solana Development\n\n  * Ethereum Development\n\n    * Getting Started\n\n    * Wallets\n\n    * Transactions\n\n    * NFTs\n\n    * Smart Contracts\n\n      * Create a \"Hello World\" Smart Contract\n      * Overview of smart contracts on Ethereum\n      * Create and Deploy a Smart Contract With Hardhat\n      * Create and Deploy an ERC20 Token\n      * What is an ABI?\n      * The Web3 Developer Stack\n      * Call Another Smart Contract From Your Solidity Code\n      * Overview of Reentrancy Attacks\n      * Intro to Upgradeable Smart Contracts\n      * Common Solidity Vulnerabilities on Ethereum\n      * Different Ways to Verify Your Smart Contract Code\n      * Create a Dutch Auction Smart Contract\n      * Create a Smart Contract Factory in Solidity using Hardhat\n      * Create A Soulbound Token\n      * Create and Deploy an Upgradeable ERC-20\n      * Create and Deploy an Upgradeable Smart Contract\n      * Create Your Own DAO With Aragon\n      * Create Your Own Oracle\n      * Fork Ethereum Blockchain with Ganache\n      * Fork Ethereum Blockchain with Hardhat\n      * Retrieve ERC-20 Token Balance\n      * Setup Local Development Environment for Solidity\n      * Use Chainlink VRF in Your Smart Contract\n      * Use CREATE2 To Predict Contract Addresses\n      * Use ERC-4626 with Your Smart Contract\n      * Use Keccak256 Hash Function with Solidity\n      * Create a Secure Smart Contract using Vyper\n      * Write an Ethereum Smart Contract Using Solidity\n      * Write an Ethereum Smart Contract Using Vyper\n      * Integrate Your Svelte App with a Smart Contract\n      * Intro to Foundry\n      * Introduction to Scaffold-ETH\n      * Solidity vs Vyper\n      * EIP-2535 Explained - Part 1\n      * EIP-2535 Explained - Part 2\n      * What is Ethereum Attestation Service (EAS)\n      * \ud83c\udfa5 What is Hardhat?\n      * What is Yul?\n    * dApps\n\n    * Staking\n\n    * MEV\n\n    * Ethereum Upgrades\n\n  * Other Chains\n\n  * QuickNode Products\n\n  * DeFi\n\n  * Infrastructure\n\n  * Cross-Chain\n\n  * Web3 Fundamentals & Security\n\n  * Podcasts & Other Media\n\n# An overview of how smart contracts work on Ethereum\n\nUpdated on\n\nAug 18, 2023\n\nEthereum\n\nRemix.IDE\n\nMetaMask\n\nSolidity\n\nVideo\n\n  *   * Ethereum Development\n  * Smart Contracts\n  * Overview of smart contracts on Ethereum\n\nOn this page\n\n _7 min read_\n\n> Prefer a video walkthrough? Follow along with Radek and learn how smart\n> contracts work on Ethereum in under 11 minutes.\n\nSubscribe to our YouTube channel for more videos!Subscribe\n\n## Overview\u200b\n\nSmart contracts are the first-class citizens in the Ethereum blockchain; they\nare a critical part of Ethereum development. In this guide, we\u2019ll see an\noverview of how smart contracts work on the Ethereum blockchain. This will\ninclude how to set up an Ethereum IDE and then the process of writing and\ndeploying a smart contract.\n\n## What is a smart contract?\u200b\n\nSmart contracts are just like the contracts in the real world. The only\ndifference is that they are digital. In fact, a smart contract is a computer\nprogram stored on a blockchain. Smart contracts are self-executing pieces of\ncode that execute when the preset conditions by the involved parties are met;\nfor example, a smart contract that issues a token when someone deposits fiat.\n\nSmart contracts allow secure and trusted transactions to transpire between\nanonymous parties without consulting a central authority. Smart contracts on\nethereum are written mainly in Solidity and Vyper. Solidity is a high-level\nobject-oriented language influenced by C++, JavaScript, and Python, and is\ndesigned to integrate with the Ethereum Virtual Machine (EVM). Vyper is an\nexperimental contract-based language inspired by Python.\n\nVirtual machines create an abstraction layer between executing code and the\nexecuting machine. At any given block, there can only be a single state of\nblockchain present. The Ethereum blockchain maintains its state with the help\nof  EVM (Ethereum Virtual Machine). The EVM does this by defining the rules\nfor computing a new valid state from block to block.\n\nTo represent this in a mathematical model, we can take **Y** as a state\ntransition function. The function can be written as **Y(S, T) = S'** where:\n\n**S** is the old valid state,\n\n **T** is the set of new valid transitions to be added to the next block, and\n\n **S'** is the new valid state.\n\nThis function takes the old valid state, and a set of new valid transactions\nto produce a new valid state as an output. You can read more on EVM and how\nEthereum state works in this comprehensive blog on EVM.\n\nAbove were the technicalities of EVM; now, let\u2019s understand how it works\npractically. EVM creates a sandboxed environment that executes smart\ncontracts\u2019 bytecode. This means the machine code is completely isolated from\nthe network, filesystem, or process on the host machine. For every instruction\nimplemented on the EVM, a system keeps track of the execution cost. This cost\nassociated with the instruction execution is measured in a gas unit. The user\nwilling to execute this instruction has to reserve some ether to pay as a gas\nfee. Learn more about gas and gas fees here.\n\nThe EVM is also Turing complete. It achieves this by enabling a system that\ncharges per software instruction executed rather than charging per financial\ntransaction executed like in Bitcoin.  Ethereum network being Turing complete\nmeans that it can be considered a peer-to-peer worldwide distributed computer.\n\n## How does a smart contract work?\u200b\n\nWhenever someone wants to sell a house, they consult a broker. The broker\ntakes some percentage of the total amount to process the transaction and\nintermediate with the buyer and seller. Let\u2019s say we eliminate the broker and\ncreate a smart contract instead.\n\nThis is programmed so that whenever an amount greater than a particular number\nis offered for the property, it will sell the house to the buyer, transfer the\nrights, and transfer the money to the seller. This eliminates the middleman\nfrom the process. Since the transaction takes place directly between two\nparties, the whole process is cheaper and more secure.\n\nSmart contracts are stored on the blockchain, which means they inherit certain\nproperties. Out of the properties, two are of note\u2014immutability and global\ndistributability. Being immutable means once the smart contract is deployed,\nno one can tamper with it. And global distributability means everyone on the\nblockchain network validates the contract\u2019s output. If someone tries to alter\nthe contract, others on the network will mark it invalid, which makes\ntampering almost impossible.\n\n## How are smart contracts deployed?\u200b\n\nSmart contracts are first compiled and converted into bytecode when the\ncontract is deployed. This bytecode is then stored on the blockchain, and an\naddress is assigned to it. The contract address is determined based on the\nperson's address creating the contract (sender) and the number of transactions\nthe creator has sent (nonce). The sender address and nonce are RLP encoded and\nhashed with the keccak-256 algorithm.\n\nSmart contracts, which are overwhelmingly written in Solidity, are often\ndeployed and tested using Ethereum Remix IDE. Remix IDE is an open-source\nbrowser-based IDE for Ethereum smart contracts.\n\nLet\u2019s try to deploy a contract using Remix IDE. We\u2019ll deploy our contract on\nthe Sepolia Testnet. For that, we\u2019ll need some test ETH. You will need the\nMetaMask browser extension to create an ETH wallet, and some test ETH to get\nstarted.\n\nYou can get test ETH by going to the QuickNode Faucet. Connect your wallet and\nselect the Sepolia Test Network on your MetaMask wallet. Your wallet address\nshould be automatically filled in the \"Wallet Address\" field. Nex, click\n\u201cContinue\u201d and in the next step you can double your test ETH if you share it\non Twitter. You should have your test ETH in your wallet in a couple of\nminutes (longer if the network is busy).\n\nHead over to the Ethereum Remix IDE and make a new Solidity file - for\nexample, `TestContract.sol`.\n\nPaste the following code into your new Solidity script:\n\n    \n    \n    // SPDX-License-Identifier: MIT  \n    pragma solidity 0.8.20;  \n      \n    contract TestContract {  \n          \n        uint256 private count = 0;  \n      \n        function increment() public {  \n            count += 1;  \n        }  \n          \n        function getCount() public view returns (uint256) {  \n            return count;  \n        }  \n      \n    }  \n    \n\nExplanation of the code above:\n\nLine 1: Specifying SPDX license type, which is an addition after Solidity\n^0.6.8.\n\n> Whenever the source code of a smart contract is made available to the\n> public, these licenses can help  resolve/avoid copyright issues. If you do\n> not wish to specify any license type, you can use a special license\n> UNLICENSE or simply skip the whole comment (it won\u2019t result in an error,\n> just a warning).\n\nLine 2: Declaring the Solidity version.\n\nLine 4: Starting our contract named **TestContract**.\n\nLine 6: Declaring a private variable **count** of unsigned type integer and\nassigning it zero value.\n\nLine 8-10: Declaring a function **increment()** of type public which means it\ncan be accessed outside the function and by other contracts, incrementing the\nvalue of count by 1.\n\nLine 12-14: Declaring a function **getCount()** of type public and view as\nit\u2019s immutability value,  which means that it can only read blockchain status,\nand not write anything. Using the returns keyword to specify that the function\nreturns a value, in the form of an unsigned integer here. Returning the value\nof **count** to the function.\n\nCompile the smart contract by first clicking on the Solidity icon in the left\nmenu, and then clicking on \u201cCompile TestContract.sol\u201d. You can also use the\nshortcut Ctrl+S / Cmd+S to compile the contract.\n\nMake sure that the version of Solidity compiler in the left sidebar is set to\nthe same version as you have in your contract. If the versions don't match,\nyou will get an error.\n\nA green tick will be added to the compiler tab on the left menu on a\nsuccessful compilation of the contract. Make sure to select Sepolia testnet in\nMetaMask before deploying the contract.\n\nNow to deploy the contract, click on the Ethereum icon in the left menu and\nselect _Injected Provider - MetaMask_ from the dropdown under \u201cEnvironment,\u201d\nand then click on \u201cDeploy\u201d. Approve the transaction from MetaMask.\n\nNow that your contract is deployed, you can find it in the \"Deployed\nContracts\" section.\n\nSmart contracts can also be deployed using Hardhat, Foundry, or other Ethereum\nlibraries.\n\n## How to use smart contracts?\u200b\n\nWe can interact with the smart contracts from Remix IDE itself. For that,\nexpand the contract in the \"Deployed Contracts\" section and click on\n`getCount`. You will see the initial value of count as zero.\n\nNow, click on `increment` to increase the value of the count by one. As this\nis a write operation (we'll be writing to a blockchain, not just reading from\nit), we\u2019ll need to pay the gas fee for this. Confirm the transaction in\nMetaMask.\n\nOnce the transaction is completed, click on `getCount` again, and you will see\nthe value of the count increased by 1. We are modifying the value of the\n`count` on the chain and then querying the updated value.\n\nYou can also interact with the contracts using various Ethereum libraries;\nhere\u2019s an example in Ruby. For that purpose you'll need the ABI(Application\nBinary Interface) and the smart contract address. The ABI defines the\nfunctions and types used in the contract. Learn more in our comprehensive\nguide on ABI.\n\n## Conclusion\u200b\n\nKudos for making it all the way! You now know how the EVM (Ethereum Virtual\nMachine) works. You know how to set up the Ethereum Remix IDE for smart\ncontract testing and development. You wrote a smart contract, learned how to\nget test ETH, and deployed your contract on a Testnet. You also saw how to\ninteract with a smart contract through Remix IDE and how to write to\nblockchain.\n\nLearn more about Solidity and Vyper from QuickNode guides.\n\nSubscribe to our newsletter for more articles and guides on Ethereum. If you\nhave any feedback, feel free to reach out to us via Twitter. You can always\nchat with us on our Discord community server, featuring some of the coolest\ndevelopers you'll ever meet :)\n\n###### Written by\n\n### Sahil Sen\n\nLast updated on **Aug 18, 2023**\n\n###### Share this guide\n\n  *   *   *   * \n\nPrevious\n\nCreate a \"Hello World\" Smart Contract\n\nNext\n\nCreate and Deploy a Smart Contract With Hardhat\n\n  * Overview\n  * What is a smart contract?\n  * How does a smart contract work?\n  * How are smart contracts deployed?\n  * How to use smart contracts?\n  * Conclusion\n\n  * Chat with our community\n  * Check out our product changelog\n  * Check on the status of our services\n  * Read our blog for the latest announcements\n\n###### Want the latest news in Web3?\n\nWe send out the #Web3Vibes newsletter with the coolest stuff in Blockchain\nevery month. Sign up below!\n\n\ud55c\uad6d\uc5b4\n\nPowered by Localize\n\nEnglish\n\n",
    "links": "[{\"link\": \"https://www.quicknode.com/guides/welcome\", \"text\": \"Welcome\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/how-to-create-a-hello-world-smart-contract-with-solidity\", \"text\": \"Create a \\\"Hello World\\\" Smart Contract\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/an-overview-of-how-smart-contracts-work-on-ethereum\", \"text\": \"Overview of smart contracts on Ethereum\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/how-to-create-and-deploy-a-smart-contract-with-hardhat\", \"text\": \"Create and Deploy a Smart Contract With Hardhat\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/how-to-create-and-deploy-an-erc20-token\", \"text\": \"Create and Deploy an ERC20 Token\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/what-is-an-abi\", \"text\": \"What is an ABI?\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/the-web3-developer-stack\", \"text\": \"The Web3 Developer Stack\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/how-to-call-another-smart-contract-from-your-solidity-code\", \"text\": \"Call Another Smart Contract From Your Solidity Code\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/a-broad-overview-of-reentrancy-attacks-in-solidity-contracts\", \"text\": \"Overview of Reentrancy Attacks\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/an-introduction-to-upgradeable-smart-contracts\", \"text\": \"Intro to Upgradeable Smart Contracts\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/common-solidity-vulnerabilities-on-ethereum\", \"text\": \"Common Solidity Vulnerabilities on Ethereum\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/different-ways-to-verify-smart-contract-code\", \"text\": \"Different Ways to Verify Your Smart Contract Code\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/how-to-create-a-dutch-auction-smart-contract\", \"text\": \"Create a Dutch Auction Smart Contract\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/how-to-create-a-smart-contract-factory-in-solidity-using-hardhat\", \"text\": \"Create a Smart Contract Factory in Solidity using Hardhat\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/how-to-create-a-soulbound-token\", \"text\": \"Create A Soulbound Token\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/how-to-create-and-deploy-an-upgradeable-erc20-token\", \"text\": \"Create and Deploy an Upgradeable ERC-20\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/how-to-create-and-deploy-an-upgradeable-smart-contract-using-openzeppelin-and-hardhat\", \"text\": \"Create and Deploy an Upgradeable Smart Contract\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/how-to-create-your-own-dao-with-aragon\", \"text\": \"Create Your Own DAO With Aragon\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/how-to-create-your-own-oracle-with-an-ethereum-smart-contract\", \"text\": \"Create Your Own Oracle\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/how-to-fork-ethereum-blockchain-with-ganache\", \"text\": \"Fork Ethereum Blockchain with Ganache\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/how-to-fork-ethereum-mainnet-with-hardhat\", \"text\": \"Fork Ethereum Blockchain with Hardhat\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/how-to-get-the-balance-of-an-erc-20-token\", \"text\": \"Retrieve ERC-20 Token Balance\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/how-to-setup-local-development-environment-for-solidity/how-to-setup-local-development-environment-for-solidity\", \"text\": \"Setup Local Development Environment for Solidity\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/how-to-use-chainlink-vrf-in-your-smart-contract\", \"text\": \"Use Chainlink VRF in Your Smart Contract\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/how-to-use-create2-to-predetermine-contract-addresses\", \"text\": \"Use CREATE2 To Predict Contract Addresses\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/how-to-use-erc-4626-with-your-smart-contract\", \"text\": \"Use ERC-4626 with Your Smart Contract\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/how-to-use-keccak256-with-solidity\", \"text\": \"Use Keccak256 Hash Function with Solidity\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/how-to-write-a-secure-smart-contract-in-vyper\", \"text\": \"Create a Secure Smart Contract using Vyper\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/how-to-write-an-ethereum-smart-contract-using-solidity\", \"text\": \"Write an Ethereum Smart Contract Using Solidity\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/how-to-write-an-ethereum-smart-contract-using-vyper\", \"text\": \"Write an Ethereum Smart Contract Using Vyper\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/integrate-your-svelte-app-with-a-smart-contract\", \"text\": \"Integrate Your Svelte App with a Smart Contract\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/intro-to-foundry\", \"text\": \"Intro to Foundry\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/introduction-to-scaffold-eth\", \"text\": \"Introduction to Scaffold-ETH\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/solidity-vs-vyper\", \"text\": \"Solidity vs Vyper\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/the-diamond-standard-eip-2535-explained-part-1\", \"text\": \"EIP-2535 Explained - Part 1\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/the-diamond-standard-eip-2535-explained-part-2\", \"text\": \"EIP-2535 Explained - Part 2\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/what-is-ethereum-attestation-service-and-how-to-use-it\", \"text\": \"What is Ethereum Attestation Service (EAS)\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/what-is-hardhat\", \"text\": \"\ud83c\udfa5  What is Hardhat?\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/what-is-yul\", \"text\": \"What is Yul?\"}, {\"link\": \"https://www.quicknode.com/guides/tags/ethereum/\", \"text\": \"Ethereum\"}, {\"link\": \"https://www.quicknode.com/guides/tags/remix-ide/\", \"text\": \"Remix.IDE\"}, {\"link\": \"https://www.quicknode.com/guides/tags/meta-mask/\", \"text\": \"MetaMask\"}, {\"link\": \"https://www.quicknode.com/guides/tags/solidity/\", \"text\": \"Solidity\"}, {\"link\": \"https://www.quicknode.com/guides/tags/video/\", \"text\": \"Video\"}, {\"link\": \"https://www.quicknode.com/guides/\", \"text\": \"\"}, {\"link\": \"https://twitter.com/intent/tweet?url=https://www.quicknode.com/guides/ethereum-development/smart-contracts/an-overview-of-how-smart-contracts-work-on-ethereum\", \"text\": \"\"}, {\"link\": \"https://www.facebook.com/sharer/sharer.php?u=https://www.quicknode.com/guides/ethereum-development/smart-contracts/an-overview-of-how-smart-contracts-work-on-ethereum\", \"text\": \"\"}, {\"link\": \"mailto:?subject=Check out this guide on QuickNode: An overview of how smart contracts work on Ethereum&body=https://www.quicknode.com/guides/ethereum-development/smart-contracts/an-overview-of-how-smart-contracts-work-on-ethereum\", \"text\": \"\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/how-to-create-a-hello-world-smart-contract-with-solidity\", \"text\": \"\"}, {\"link\": \"https://www.quicknode.com/guides/ethereum-development/smart-contracts/how-to-create-and-deploy-a-smart-contract-with-hardhat\", \"text\": \"\"}]"
}