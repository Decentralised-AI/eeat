{
    "summary": "###### NEW YEAR NEW SKILLS\n\n##### Flat 25% OFF on any certification program, use code BCHAIN101\n\nGet Certified\n\n__\n\n  * Pricing\n  * Dashboard\n  * Join For Free\n\n__\n\n  * Training Library __ __\n    *  __Certifications __ __\n      * Certified Web3 Professional (CW3P)\u2122 POPULAR\n      * Certified Enterprise Blockchain Professional (CEBP)\u2122 POPULAR\n      * Certified Enterprise Blockchain Architect (CEBA)\u2122 TOP RATED\n      * Certified NFT Professional (CNFTP)\u2122 TOP RATED\n      * Certified Metaverse Professional (CMP)\u2122 TOP RATED\n      * Certified Blockchain Security Expert (CBSE)\u2122 TOP RATED\n      * Certified Web3 Blockchain Developer (CW3BD)\u2122 NEW\n      * Certified Prompt Engineering Expert (CPEE)\u2122 NEW\n      * Certified Web3 Hacker (CW3H)\u2122 NEW\n      * Certified Fintech Expert (CFTE)\u2122 NEW\n      * Certified IoT Professional (CIOTP)\u2122 NEW\n    *  __Courses __ __\n      * NFT Fundamentals MOST POPULAR\n      * Web3 Application Development MOST POPULAR\n      * Decentralized Finance (DeFi) MOST POPULAR\n      * Tokenization Fundamentals MOST POPULAR\n      * Ethereum Technology TOP RATED\n      * Smart Contracts Development TOP RATED\n      * How to Build Your Career in Blockchain TOP RATED\n      * Metaverse Technology TOP RATED\n      * NFT Development NEW\n      * Google Bard AI NEW\n      * Smart Contracts Security NEW\n      * Polygon Web3 Development NEW\n      * ChatGPT Fundamentals\n      * Ethics of Artificial Intelligence\n      * FinTech Fundamentals\n      * Blockchains & Supply Chain Management\n      * Browse All Courses\n    *  __Masterclasses __ __\n      * Central Bank Digital Currency Masterclass MOST POPULAR\n      * Stablecoin Fundamentals Masterclass MOST POPULAR\n      * Blockchain Like a Boss Masterclass TOP RATED\n      * AI and Fintech Masterclass NEW\n      * Blockchain in Healthcare Masterclass\n      * Blockchain For Real Estate Masterclass\n      * Blockchain and Data Privacy Masterclass\n      * Blockchain in Finance Masterclass\n      * Zero Knowledge Proofs (ZKP) Masterclass\n      * Browse All Masterclasses\n    *  __Skill Paths __ __\n      * Decentralized Finance (DeFi)\n      * Ethereum\n      * Non-Fungible Token (NFT)\n      * Cryptocurrency\n      * Fintech\n      * Generative AI\n      * Tokenization\n      * Smart Contracts\n      * Metaverse\n      * Browse All\n    *  __Career Paths __ __\n      * Web 3 Expert\n      * Blockchain Engineer\n      * Blockchain Developer\n      * Prompt Engineer\n      * Web3 Security Expert\n      * Browse All\n    * Pricing Plans\n  * Platform __ __\n    * Find Your Dream Job\n    * Career Paths\n    * Skill Paths\n    * Certifications\n    * Council\n    * Pricing Plans\n  * Resources __ __\n    * Webinars\n    * Conferences\n    * Free Blockchain Course\n    * Free Resources\n    * Flash Cards\n    * Presentations\n    * eBooks\n    * Blog\n  * For Businesses\n  * Pricing\n  * Dashboard\n  * Join For Free\n\n __Close\n\n__\n\n  * Pricing\n  * Dashboard\n  * Join For Free\n\n  * __Guides\n  * Georgia Weston\n  * __on December 15, 2023\n\n#  How to Deploy a Smart Contract in 5 Minutes?\n\nSmart contracts are one of the crucial elements in the domain of blockchain\ntechnology. Without smart contracts, the world of blockchain might have\nrevolved solely around cryptocurrencies. However, smart contracts have\nprovided the benefit of programmability for blockchain networks. Do you want\nto learn how to deploy smart contracts within 5 minutes? Interestingly, you\nare not the only one with such questions.\n\nSmart contracts provide the foundation for creating dApps on the blockchain of\nyour choice. The best thing about smart contracts is that they are pieces of\ncode stored on a blockchain network. Smart contracts are similar to Ethereum\naccounts, albeit with significant differences against external accounts. For\nexample, external accounts could connect to multiple Ethereum networks, such\nas Goerli Testnet. On the other hand, smart contracts are specific to the\nparticular network on which they are deployed.\n\nWhen you deploy smart contract, it will help you create a contract account or\ninstance on the network. Developers could generate multiple instances of a\nsmart contract on one or multiple blockchain networks. You can deploy smart\ncontracts by sending transactions to the network in the form of bytecode.\nDevelopers can choose different approaches for deploying smart contracts on\nEthereum. Let us learn more about the recommended methods for deploying smart\ncontracts in 5 minutes.\n\n> Curious to understand the complete smart contract development lifecycle?\n> Enroll now in the Smart Contracts Development Course\n\n## **Overview of Smart Contracts**\n\nMany of you might have doubts regarding the technical requirements for\ndeploying smart contracts. However, you can overcome your apprehensions to\ndeploy smart contract Ethereum with an overview of the fundamental concepts of\nsmart contracts. Smart contracts are self-executing programs that can execute\nagreements and transactions without the involvement of intermediaries. Smart\ncontracts have the following distinctive features,\n\n  * Turing completeness.\n  * Execution of contractual agreement between parties.\n  * Autonomous execution of transactions or agreements.\n  * Flexibility for execution in virtual machines such as EVM.\n  * Deployment on blockchain network. \n\nYou can create smart contracts by leveraging programming languages such as\nSolidity. Subsequently, you can use different tools, such as Hardhat and\nTruffle, for deploying smart contracts on the desired blockchain network.\n\n### **Deploying Smart Contracts Using Hardhat**\n\nHardhat is one of the popular tools used for deploying smart contracts. You\ndon\u2019t have to follow any important technical prerequisites for using Hardhat\nto facilitate smart contract deployment on the blockchain. Here are the\nimportant steps for deploying smart contracts by using Hardhat.\n\n  * #### **Setting up the Environment**\n\nBefore you create an instance on smart contract, you would have to set up the\nenvironment for deploying smart contracts. You can run the following code in\nthe terminal of your system.\n\n    \n    \n    mkdir my-project-folder\n    \n    cd my-project-folder\n    \n    npm init -y\n    \n    npm install --save-dev hardhatCopy\n\nThe project starts by developing a project folder, followed by using \u2018npm init\n\u2013y\u2019 to generate an NPM project. The \u2018-y\u2019 would imply the need for affirmation\nfor every prompt. Subsequently, you can follow \u2018deploy smart contract example\u2019\nby installing the \u2018hardhat\u2019 library.\n\nHardhat serves as a comprehensive Ethereum development environment, which\nhelps in testing, compiling, deploying, and debugging smart contracts. It is\nalso important to ensure installation of all project-centric dependencies. For\nexample, you should add \u2018npm install @openzeppelin/contracts\u2019 for NFT smart\ncontracts.\n\n> Excited to learn about the critical vulnerabilities and security risks in\n> smart contract development, Enroll now in the Smart Contracts Security\n> Course!\n\n  * #### **Initiating Hardhat Project**\n\nThe next step in deploying smart contracts using Hardhat involves initiating a\nHardhat project. Within the project folder, you have to use the \u2018npx hardhat\u2019\ncommand to create a basic Hardhat project. You have to select the default\noption for supporting all prompt questions.\n\nThe guides on how to deploy smart contracts using Hardhat also require\nidentification of folders with a sample smart contract within the contract\nfolder. You have to delete the files such as \u2018contracts/Greeter.sol\u2019,\n\u2018test/sample-test.js,\u2019 and \u2018script/sample-script.js.\u2019 Subsequently, you would\nhave to save the smart contract within the \u2018\\contracts\u2019 folder.\n\n  * #### **Configuration of Network and Private Key  **\n\nYou can use a Testnet such as the Mumbai Testnet by Polygon. In the case of\nthis example, you have to open the \u2018hardhat.config.js\u2019 and use the following\ncode in place of the existing code.\n\n    \n    \n    require('@nomiclabs/hardhat-waffle');\n    \n    \n    module.exports = {\n    \n      solidity: '0.8.3',\n    \n      networks: {\n    \n        mumbai: {\n    \n          url: '<mumbai-rpc>',\n    \n          accounts: ['<your-private-key>'],\n    \n        },\n    \n      },\n    \n    };Copy\n\nAs you deploy smart contract using Hardhat, it is important to follow certain\nprecautions in this step. You would have to select the correct Solidity\nversion and add the Mumbai RPC alongside your private key. You can also find a\nlist of RPCs within the official document. It is also important to ensure that\nthe file containing your private key should be restricted to the local\nmachine. In addition, you can also configure the other networks within the\nnetworks section of the code. You could choose the network you want to use in\nthe final deployment phase.\n\n  * #### **Creating the Code for Deploying Smart Contracts  **\n\nOnce you have set up the configuration file and development environment, you\nhave to work on the code for smart contract deployment. You have to create the\n\u2018deploy.js\u2019 file within the \u2018\\scripts\u2019 folder and use the following code.\n\n    \n    \n    const main = async () => {\n    \n        const ContractFactory = await hre.ethers.getContractFactory('your-contract-name') // the file name under 'contracts' folder, without '.sol'\n    \n        const Contract = await ContractFactory.deploy(param1, param2, ...) // the constructor params\n    \n        await Contract.deployed()\n    \n        console.log(\"Contract deployed to:\", Contract.address)\n    \n    \n        // // You can test the function.\n    \n        // let txn = await nftContract.functionName()\n    \n        // // Wait for it to be mined.\n    \n        // await txn.wait()\n    \n        // console.log(\"function invoked!\")\n    \n    }\n    \n    \n    const runMain = async () => {\n    \n        try {\n    \n            await main()\n    \n            process.exit(0) // emit the exit event that ends all tasks immediately, even if there are still asynchronous operations that have not been done. The shell that executed node should see the exit code as 0.\n    \n        } catch (error) {\n    \n            console.log(error)\n    \n            process.exit(1)\n    \n        }\n    \n    }Copy\n\nrunMain()\n\nThe code provides a clear explanation for the different elements with clarity.\nYou can utilize \u2018hre.ethers\u2019 for obtaining the contract and deploying it.\nHowever, it is important to follow certain precautions, such as,\n\nRefraining from using \u2018.sol\u2019 in the \u2018your-contract-name\u2019 section in line 2.\nYou can only use \u2018myContract\u2019 in this case.\n\nIn the next line, you have to provide all the parameters needed for the\n\u2018constructor\u2019 in your smart contract.\n\nThe lines from 7 to 11 can help you interact with smart contracts by invoking\nthe desired functions.\n\n  * #### **Deploying the Contract**\n\nThe final stage to deploy smart contract Ethereum is practically the easiest\none in the guide for deploying smart contracts. You can use the following\ncommand for deploying the smart contract.\n\n\u2018npx hardhat run scripts/deploy.js \u2013network mumbai\u2019  \n\nYou can find the output in the terminal with a message indicating successful\nSolidity compilation. It is important to remember the address of your smart\ncontract, which is essential for creating the front end.\n\n> Want to understand the importance of smart contracts audits? Check out Smart\n> Contract Audit Presentation now!\n\n### **Deploying Smart Contracts by Using Truffle     **\n\nDevelopers could find multiple setup options for deployment, migration, and\naccessibility of smart contracts. In addition, they could choose different\noptions according to the level of visibility they want in the Ethereum Virtual\nMachine. The two options involve using Geth for running a full Ethereum mining\nnode and using an online IDE such as Remix. On the other hand, you can create\ninstance on smart contract and deploy it with better effectiveness by using\nTruffle. It is a popular smart contract development tool for compilation and\ndeployment of smart contracts while offering enhanced control and visibility.\n\nBefore you start using Truffle for deploying smart contracts, it is important\nto follow some essential precautions. First of all, you must save your\nMetamask wallet mnemonic.  In addition, you would have to obtain some test\nEther. Another important requirement for deploying smart contracts involves\nobtaining a Ropsten API key through Infura. Here are the important steps\nrequired for deploying a smart contract by using Truffle.\n\n  * #### **Setting up Truffle  **\n\nThe first step in a guide on how to deploy smart contracts using Truffle\ninvolves setting up Truffle. You can use the following command for setting up\nTruffle,\n\n    \n    \n    npm install \u2013g truffleCopy\n\nNow, you have to create an empty repository and \u2018cd\u2019 in it, followed by using\nthe following command,\n\n    \n    \n    truffle init  Copy\n\nThen, you have to install the HDWalletProvider.\n\n    \n    \n    npm install --save truffle-hdwallet-provider Copy\n\n  * #### **Creation of Contract**\n\nYou have to create the new contract \u2018HelloWorld.sol\u2019 in the \u2018./contracts\u2019\nsection by using the following code.\n\n    \n    \n    pragma solidity ^0.4.23;\n    \n    contract HelloWorld {\n    \n        function sayHello() public pure returns(string){\n    \n            return(\u201chello world\u201d);\n    \n        }\n    \n    }Copy\n\n  * #### **Deploying the Contract  **\n\nThe actual step for deploying the contract involves creation of a deployment\nscript. You have to create the \u20182_deploy_contracts.js\u2019 deployment script in\nthe \u2018./migrations\u2019 folder by using the following code:\n\n    \n    \n    var HelloWorld = artifacts.require(\u201cHelloWorld\u201d);\n    \n    module.exports = function(deployer) {\n    \n        deployer.deploy(HelloWorld, \u201chello\u201d);\n    \n        // Additional contracts can be deployed here\n    \n    };Copy\n\n  * #### **Configuration of Ropsten Network and Provider**\n\nDevelopers can configure the Ropsten network and provider by adding the\nfollowing snippet in the \u2018module.exports\u2019 section in \u2018truffle.js.\u2019\n\n    \n    \n    var HDWalletProvider = require(\"truffle-hdwallet-provider\");\n    \n    const MNEMONIC = 'YOUR WALLET KEY';\n    \n    \n    module.exports = {\n    \n      networks: {\n    \n        development: {\n    \n          host: \"127.0.0.1\",\n    \n          port: 7545,\n    \n          network_id: \"*\"\n    \n        },\n    \n        ropsten: {\n    \n          provider: function() {\n    \n            return new HDWalletProvider(MNEMONIC, \"https://ropsten.infura.io/YOUR_API_KEY\")\n    \n          },\n    \n          network_id: 3,\n    \n          gas: 4000000      //make sure this gas allocation isn't over 4M, which is the max\n    \n        }\n    \n      }\n    \n    };Copy\n\nIt is important to use your own \u2018API_KEY\u2019 and \u2018mnemonic\u2019 in the code. At the\nsame time, you should also add \u2018.gitignore\u2019 to the file that contains your\nwallet mnemonic. Now, you can deploy the smart contract to Ropsten by using\nthe following command.\n\n    \n    \n    truffle deploy --network ropstenCopy\n\nTruffle would deploy to the local developer network only by default. The\ndeployment would lead to a console log like the following,\n\n    \n    \n    Running migration: 1_initial_migration.js\n    Deploying Migrations\u2026\n    \u2026 0xd01dd7...\n    Migrations: 0xf741...\n    Saving successful migration to network\u2026\n    \u2026 0x78ed...\n    Saving artifacts\u2026\n    Running migration: 2_deploy_contracts.js\n    Deploying HelloWorld\u2026\n    \u2026 0x0aa9...\n    HelloWorld: [SAVE THIS ADDRESS!!]\n    Saving successful migration to network\u2026\n    \u2026 0xee95...\n    Saving artifacts\u2026Copy\n\nIn this stage, you should pay attention to saving your contract address. You\ncan examine the wallet address transactions by using an explorer-like\nEtherscan.\n\n  * #### **Access the Deployed Network**\n\nAnother crucial addition to the steps in deploy smart contract example using\nTruffle framework involves setting up the Truffle console to the Ropsten\nnetwork.\n\n    \n    \n    truffle console --network ropstenCopy\n\nYou can access the deployed instance of your smart contract by using the\nfollowing command,\n\n    \n    \n    HelloWorld.deployed().then(function(instance){return instance });Copy\n\nYou could also retrieve the instance by using the public address through the\nfollowing command,\n\n    \n    \n    web3.eth.contract(HelloWorld.abi, contractAddress)Copy\n\nIn this case, the \u2018HelloWorld.abi\u2019 is the locally compiled ABI. The\n\u2018contractAddress\u2019 is the contract instance deployed publicly.\n\n> Build your identity as a certified blockchain expert with 101 Blockchains\u2019\n> Blockchain Certifications designed to provide enhanced career prospects.\n\n### **How Can You Deploy Smart Contracts to a Local Network?**\n\nAnother important highlight in a guide to deploy smart contract Ethereum would\npoint at deploying smart contracts to a local network. You can use an emulator\nfor deploying smart contracts on a local network, such as Ganache-cli. The\nemulator manages all the aspects of deploying the contract, and you don\u2019t have\nto worry about the amount of gas and security required for transactions.\nHowever, you have to pass the Ganache provider in the form of an argument to\nthe web3 instance.\n\n### **How Can You Deploy Smart Contracts to Ethereum Network?**\n\nPrior to deployment of smart contracts to Ethereum blockchain, it is important\nto ensure that the account has the required Ether balance. The process of\ndeploying a contract is similar to sending a transaction that would require\ngas fees for processing. However, the process to deploy smart contract\ndirectly to Ethereum would require some time to complete.\n\nWeb3.js can help you interact with the network in the same way as local\ndeployment, albeit with customizing the provider that would be passed to the\nweb3 instance. Rather than creating your own nodes for connecting to the\nEthereum network, you can utilize a developer platform with RPC endpoints such\nas Alchemy or Infura.\n\n> Start learning Smart Contracts and its development tools with World\u2019s first\n> Smart Contracts Skill Path with quality resources tailored by industry\n> experts Now!\n\n### **Conclusion**\n\nThe guide on how to deploy smart contracts by using tools like Hardhat and\nTruffle provides a clear roadmap for deploying smart contracts within 5\nminutes. You should also notice the best practices for deploying smart\ncontracts to local network and directly to Ethereum network. However, it is\nalso important to learn about the important dependencies and requirements for\ndeploying smart contracts. Learn more about smart contract development and\nexplore the essential best practices for creating and deploying smart\ncontracts right now.\n\n_*Disclaimer: The article should not be taken as, and is not intended to\nprovide any investment advice. Claims made in this article do not constitute\ninvestment advice and should not be taken as such. 101 Blockchains shall not\nbe responsible for any loss sustained by any person who relies on this\narticle. Do your own research!_\n\n### About Author\n\nGeorgia Weston\n\n  * Website\n  * LinkedIn\n\nGeorgia Weston is one of the most prolific thinkers in the blockchain space.\nIn the past years, she came up with many clever ideas that brought\nscalability, anonymity and more features to the open blockchains. She has a\nkeen interest in topics like Blockchain, NFTs, Defis, etc., and is currently\nworking with 101 Blockchains as a content writer and customer relationship\nspecialist.\n\n__\n\n* * ### Categories\n\n  * AI & ChatGPT (72) \n  * Analyst Corner (30) \n  * Blockchain (58) \n  * Blockchain Surveys (8) \n  * Career Guide (44) \n  * Community Spotlights (10) \n  * Comparisons (68) \n  * Featured (5) \n  * FinTech (21) \n  * Guides (585) \n  * Interview Preparation (28) \n  * IoT (31) \n  * Metaverse (59) \n  * Newbies (33) \n  * News & Updates (114) \n  * NFT (41) \n  * Opinions (72) \n  * Profiles (9) \n  * Reviews (184) \n  * Startups (3) \n  * Uncategorized (10) \n  * Web3 (91) \n\n* ### Featured Posts\n\n  * Announcement: 101 Blockchains is a CPD Accredited Certification Provider\n\n  * How to become Certified Web3 Professional?\n\n  * How to become Certified Metaverse Professional?\n\n  * How to become a Certified NFT Professional?\n\n  * How to Become Certified Expert in Blockchain?\n\n* ### Recent Posts\n\n  * An Introduction to Artificial Neural Networks (ANNs)\n  * Top Metaverse Professional Tools You Need to Know\n  * The Future of Prompt Engineering: Trends and Innovation\n  * Top Solana dApps and Use Cases\n  * Role of Consensus Algorithms in Blockchain Security\n\n### Related Post\n\nGuides\n\n## Top Solana dApps and Use Cases\n\n##### James Howell\n\nFebruary 02\n\nGuides\n\n## How to Swap Tokens on Uniswap with Ethers.js?\n\n##### Georgia Weston\n\nFebruary 02\n\nGuides\n\n## Solidity Yul Assembly \u2013 A Beginners Guide\n\n##### James Howell\n\nFebruary 01\n\nComments are closed.\n\n### Master the world's most in-demand Blockchain, Web3 and AI skills\n\n#####\n\nFree Course  Contact us\n\n##### For Individuals\n\n*   * Certifications\n  * Courses\n  * Masterclasses\n  * Pricing Plans\n  * Skill Paths\n  * Career Paths\n\n##### Resources\n\n*   * Free Blockchain Course\n  * Blockchain Webinars\n  * Blockchain Conferences\n  * Blockchain Glossary\n  * Blockchain Infographics\n  * Blockchain Flash Cards\n  * Blockchain Presentations \n\n##### Work With Us\n\n*   * For Businesses\n  * Become a Partner\n  * Become an Instructor\n  * Become an Affiliate\n  * Blockchain Keynote Speaker\n  * Ambassadors Program\n\n##### Company\n\n*   * About Us\n  * Media Kit\n  * Reviews\n  * Blog\n  * Newsletter\n\n* 101 Blockchains \u00a9 2024. All rights reserved.\n\n  * Privacy Policy\n  * Disclaimer\n  * Refund Policy\n  * Terms of use\n\n",
    "links": "[{\"link\": \"https://101blockchains.com/deploy-smart-contract/\", \"text\": \"\"}, {\"link\": \"https://101blockchains.com/deploy-smart-contract/\", \"text\": \"\"}]"
}