{
    "summary": "Skip to content\n\n  * Developers Menu Toggle\n    * Developer Home\n    * Betanet Sphinx\n    * Dapps Ecosystem\n    * Docs\n    * Explorer\n  * Community Menu Toggle\n    * Find Your Tribe\n    * Events\n    * Shardeum Updates\n    * Community Rewards\n    * Proof of Community Menu Toggle\n      * Overview\n      * Program\n      * Backpacking India\n      * Backpacking Updates\n  * Resources Menu Toggle\n    * Whitepaper\n    * Ultimate Web3 Quiz\n    * SHM Tokenomics\n    * FAQ\n    * Blog\n  * Mainnet Roadmap\n  * Claim Testnet SHM\n\n  * Blockchain Basics\n  * Announcements\n  * Shardeum Innovations\n  * Tutorials\n  * Ecosystem\n  * Shardeum Dapps\n  * Shardeum News\n  * OCC\n\n  * Developers Menu Toggle\n    * Developer Home\n    * Betanet Sphinx\n    * Dapps Ecosystem\n    * Docs\n    * Explorer\n  * Community Menu Toggle\n    * Find Your Tribe\n    * Events\n    * Shardeum Updates\n    * Community Rewards\n    * Proof of Community Menu Toggle\n      * Overview\n      * Program\n      * Backpacking India\n      * Backpacking Updates\n  * Resources Menu Toggle\n    * Whitepaper\n    * SHM Tokenomics\n    * Blog\n    * FAQ\n    * Blockchain Quiz\n  * Mainnet Roadmap\n  * Claim Testnet SHM\n  * Categories Menu Toggle\n    * Blockchain Basics\n    * Announcements\n    * Shardeum Innovations\n    * Tutorials\n    * Ecosystem\n    * Shardeum Dapps\n    * Shardeum News\n    * OCC\n\nMain Menu\n\n  * Developers Menu Toggle\n    * Developer Home\n    * Betanet Sphinx\n    * Dapps Ecosystem\n    * Docs\n    * Explorer\n  * Community Menu Toggle\n    * Find Your Tribe\n    * Events\n    * Shardeum Updates\n    * Community Rewards\n    * Proof of Community Menu Toggle\n      * Overview\n      * Program\n      * Backpacking India\n      * Backpacking Updates\n  * Resources Menu Toggle\n    * Whitepaper\n    * SHM Tokenomics\n    * Blog\n    * FAQ\n    * Blockchain Quiz\n  * Mainnet Roadmap\n  * Claim Testnet SHM\n  * Categories Menu Toggle\n    * Blockchain Basics\n    * Announcements\n    * Shardeum Innovations\n    * Tutorials\n    * Ecosystem\n    * Shardeum Dapps\n    * Shardeum News\n    * OCC\n\nBlog \u00bb Shardeum Tutorials \u00bb How to Deploy Smart Contracts on Shardeum Testnet\nUsing Hardhat?\n\n# How to Deploy Smart Contracts on Shardeum Testnet Using Hardhat?\n\nTutorials / By  Shardeum Community  /  May 22, 2022\n\nTable of Contents\n\nToggle\n\n  * What are Smart Contracts?\n  * EVM or Ethereum Virtual Machine\n  * What does EVM Based Mean in Shardeum?\n  * Deploy your Smart Contract on Sphinx Dapp Testnet Using Hardhat\n    * Step 1 : Initialize Our Project\n    * Step 2 : Download Hardhat\n    * Step 3 : Create Hardhat Project\n    * Step 4 : Project Folders\n    * Step 5 : Write Our Contract\n    * Step 6 : Add Shardeum Network to Metamask/Claim Token\n    * Step 7 : Connect Metamask to Your Project\n    * Step 8 : Install Ethers.js\n    * Step 9: Update hardhat.config.js\n    * Step 10 : Compile Our Contract\n    * Step 11 : Write Our Deploy Script\n    * Step 12 : Deploy Our Contract\n    * Popular Searches\n\n## What are Smart Contracts?\n\nSmart contracts are like regular contracts with rules except that these are\nprograms deployed across computers on a network. And, instead of being\nenforced by a legal entity, it is auto-enforced by software codes.\n\nSmart contracts are stored on a blockchain that run when predetermined\nconditions are met. They are typically used to automate the execution of an\nagreement so that all participants can be immediately certain of the outcome,\nwithout any intermediary\u2019s involvement or loss of time.\n\n## EVM or Ethereum Virtual Machine\n\nThe Ethereum Virtual Machine or EVM is a system that tracks changes on a\nblockchain in a decentralized manner. It keeps track of the \u2018state\u2019/the latest\nversion of the blockchain. Users can run the Ethereum Virtual Machine on a\ncomputer and use it to create their own programs (smart contracts) and make\nthem part of the Ethereum ecosystem.\n\nThe EVM works the same way as a normal CPU/computer. It executes written code\naccording to instructions written using programming languages (in this case,\nSolidity, mostly). The code (bytes) executed by the EVM are Ethereum smart\ncontracts. EVM is a virtual CPU/computer aka software. It doesn\u2019t exist in a\nphysical form and rather in a virtual form virtualizing and deploying client\nservers in remote devices across the world. Blockchain helps to record\ntransactions made on the environment immutably minus any intermediary.\n\n## What does EVM Based Mean in Shardeum?\n\nShardeum is an EVM-compatible or EVM-based smart contract platform. It\nbasically means Ethereum developers, who are tired of gas fees and low\nthroughput on Ethereum or any other EVM network, can migrate their smart\ncontracts to Shardeum without having to write the code from scratch again.\nThis is considering Shardeum will have **low gas fees and high throughput\nforever**. And this is important because when you build you dApps\n(decentralized applications) on a network, the last thing you want is your\ncustomers or clients complaining about high transaction fees or\nlatency/slowness in the network for using your service.\n\nBitcoin and Ethereum networks are run on open source blockchains which means\nanyone can propose changes and implement them with consensus. Ethereum\nnetwork\u2019s value essentially comes from its EVM architecture which are used by\na ton of dependent and independent networks who make use of the open source\ncode and customize it to fit their needs. This in turn means such networks\ndoesn\u2019t have to reinvent the wheel to host and enable various Web 3 products\nand services themselves.\n\nSince first and second generation blockchain networks like Bitcoin and\nEthereum rely on an arduous consensus mechanism along with their self imposed\ndata limits to secure the network (which was the need of the hour since 2008\nfinancial crisis), the transactions are processed at a very low speed. Today a\nnetwork like Visa processes up to 10,000 transactions per second while\nEthereum barely crosses 45 TPS. Shardeum, through its innovative technology,\nwill be capable to process over 1 million TPS while keeping high security and\ndecentralization features intact. Shardeum launched its testnet in April 2022\nwith the mainnet expected in Q4 of 2022. This blog will show you how to deploy\nyour first smart contract on Shardeum\u2019s Sphinx Dapp testnet using Hardhat\nwhich is a testing/development environment used by Ethereum developers.\n\n## Deploy your Smart Contract on Sphinx Dapp Testnet Using Hardhat\n\nSIGN UP FOR OUR NEWSLETTER\n\nStay updated about Shardeum\n\nSUBSCRIBE\n\n### Step 1 : Initialize Our Project\n\nFirst, we\u2019ll need to create a folder for our project. Navigate to your command\nline and type following commands\n\n    \n    \n    mkdir sphinx-hardhat-app\n    cd sphinx-hardhat-app\n\nNow that we\u2019re inside our project folder, we\u2019ll use \u2018npm init\u2019 to initialize\nthe project. If you haven\u2019t installed npm already, download from here Node\n\n    \n    \n    npm init\n\nThis command will create `package.json` file. It doesn\u2019t really matter how you\nanswer the installation questions, here is how we did it for reference.\n\n    \n    \n    package name: (sphinx-hardhat-app)\n    version: (1.0.0)\n    description:\n    entry point: (index.js)\n    test command:\n    git repository:\n    keywords:\n    author:\n    license: (ISC)\n    About to write to G:\\sphinx-hardhat-app\\package.json:\n    \n    {\n      \"name\": \"sphinx-hardhat-app\",\n      \"version\": \"1.0.0\",\n      \"description\": \"\",\n      \"main\": \"index.js\",\n      \"scripts\": {\n        \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n      },\n      \"author\": \"\",\n      \"license\": \"ISC\"\n    }\n    \n    \n    Is this OK? (yes) yes\n\nAs mentioned, Hardhat is a development environment to compile, deploy, test,\nand debug your Ethereum based software. It helps developers when building\nsmart contracts and dApps locally before deploying to a live chain.\n\n### Step 2 : Download Hardhat\n\nInside `sphinx-hardhat-app` project run:\n\n    \n    \n    npm install --save-dev hardhat\n\n### Step 3 : Create Hardhat Project\n\nInside `sphinx-hardhat-app` project run:\n\n    \n    \n    npx hardhat\n\nYou should then see a welcome message and an option to select what you want to\ndo. Select \u201ccreate an empty hardhat.config.js\u201d.\n\n    \n    \n    G:\\sphinx-hardhat-app>npx hardhat\n    888    888                      888 888               888\n    888    888                      888 888               888\n    888    888                      888 888               888\n    8888888888  8888b.  888d888 .d88888 88888b.   8888b.  888888\n    888    888     \"88b 888P\"  d88\" 888 888 \"88b     \"88b 888\n    888    888 .d888888 888    888  888 888  888 .d888888 888\n    888    888 888  888 888    Y88b 888 888  888 888  888 Y88b.\n    888    888 \"Y888888 888     \"Y88888 888  888 \"Y888888  \"Y888\n    \n    Welcome to Hardhat v2.9.5\n    \n    ? What do you want to do? ...\n    > Create a basic sample project\n      Create an advanced sample project\n      Create an advanced sample project that uses TypeScript\n      Create an empty hardhat.config.js\n      Quit\n\nThis will generate a` hardhat.config.js` file for us, which is where we will\nspecify all about the set up for our project.\n\n### Step 4 : Project Folders\n\nTo keep our project organized, Hardhat creates two new folders. Navigate to\nthe root directory of your `sphinx-hardhat-app`\n\n  * `contracts/` is where we\u2019ll keep our hello world smart contract code file\n  * `scripts/` is where we\u2019ll keep scripts to deploy and interact with our contract\n\n### Step 5 : Write Our Contract\n\nOpen up the `sphinx-hardhat-app` project in your favorite editor. Smart\ncontracts are largely written in a language called Solidity which is what we\nwill use to write our `Disperse.sol` smart contract.\n\n1\\. Navigate to the \u201ccontracts\u201d folder and create a new file called\n`Disperse.sol`\n\n2\\. Below is a sample `Disperse` smart contract from the disperse.shardeum.us\nthat we will be using for this tutorial. Copy and paste in the contents below\ninto your `Disperse.sol` file.\n\n    \n    \n    //SPDX-License-Identifier: Unlicense\n    pragma solidity ^0.8.0;\n    \n    import \"hardhat/console.sol\";\n    \n    contract Disperse {\n        function disperseShardeum(address[] memory recipients, uint256[] memory values)\n            external\n            payable\n        {\n            for (uint256 i = 0; i < recipients.length; i++)\n                payable(recipients[i]).transfer(values[i]);\n            uint256 balance = address(this).balance;\n            // Refund remaining amount to msg.sender\n            if (balance > 0) payable(msg.sender).transfer(balance);\n        }\n    }\n\nThis is a super simple smart contract that disperses Shardeum tokens to array\nof addresses with values by calling `disperseShardeum`\n\nNow that we have created smart contract, we need to deploy this smart contract\nto Shardeum Sphinx Dapp testnet.\n\n### Step 6 : Add Shardeum Network to Metamask/Claim Token\n\nMetaMask allows users to store and manage account keys, broadcast\ntransactions, send and receive Ethereum-based cryptocurrencies and tokens, and\nsecurely connect to decentralized applications through a compatible web\nbrowser or the mobile app\u2019s built-in browser. Click here to install the\nMetaMask extension on your browser.\n\nAnd follow this instruction to add Shardeum to MetaMask wallet and claim test\n100 $SHM tokens from Sphinx Dapp testnet faucet.\n\n### Step 7 : Connect Metamask to Your Project\n\nWe\u2019ve created a Metamask wallet and written our smart contract, now it\u2019s time\nto connect these two.\n\nEvery transaction sent from your virtual wallet requires a signature using\nyour unique private key. To enable our program with this permission, we can\nsafely store our private key in an environment file.\n\nFirst, install the dotenv package in your project directory :\n\n    \n    \n    npm install dotenv --save\n    \n    \n    .env\n    \n    - Your environment file must be named .env or it won\u2019t be recognized as an environment file. Do not name it process.env or .env-custom or anything else.\n\nYour `.env` should look like this:\n\n    \n    \n    SHARDEUM_RPC=https://dapps.shardeum.org/\n    PRIVATE_KEY= Your_Metamask_Private_Key\n\nIn order to connect them to our code, we\u2019ll reference these variables in our\n`hardhat.config.js` file\n\n### Step 8 : Install Ethers.js\n\nEthers.js is a library that makes it easier to interact and make requests to\nEthereum by wrapping standard JSON-RPC methods with more user friendly\nmethods.\n\nHardhat makes it super easy to integrate Plugins for additional tooling and\nextended functionality. We\u2019ll be taking advantage of the Ethers plugin for\ncontract deployment (Ethers.js has some super clean contract deployment\nmethods).\n\nIn your project directory type:\n\n    \n    \n    npm install --save-dev @nomiclabs/hardhat-ethers \"ethers@^5.0.0\"\n\nWe\u2019ll also require ethers in our `hardhat.config.js` in the next step.\n\n### Step 9: Update hardhat.config.js\n\nNow that we have added few dependencies and plugins so far, we need to update\n_hardhat.config.js_ so that our project knows about all of them.\n\nUpdate your `hardhat.config.js` to look like this:\n\n    \n    \n    require(\"@nomiclabs/hardhat-ethers\");\n    require(\"dotenv\").config();\n    const SHARDEUM_RPC = process.env.SHARDEUM_RPC;\n    const privateKey = process.env.PRIVATE_KEY;\n    \n    /**\n     * @type import('hardhat/config').HardhatUserConfig\n     */\n    \n    module.exports = {\n      defaultNetwork: \"hardhat\",\n      solidity: {\n        version: \"0.8.4\",\n        settings: {\n          optimizer: {\n            enabled: true,\n            runs: 200,\n          },\n        },\n      },\n      networks: {\n        shardeum: {\n          url: SHARDEUM_RPC,\n          accounts: [privateKey],\n          chainId: 8080,\n        }\n      },\n    };\n\n### Step 10 : Compile Our Contract\n\nTo make sure everything is working so far, let\u2019s compile our contract. The\ncompile task is one of the built-in hardhat tasks.\n\nFrom the command line run:\n\n    \n    \n    npx hardhat compile\n\nIf there are no errors, it will compile successfully\n\n    \n    \n    Compiled 3 Solidity files successfully\n\n### Step 11 : Write Our Deploy Script\n\nNow that our contract is written and our configuration file is good to go,\nit\u2019s time to write our contract deploy script.\n\nNavigate to the `/scripts` folder and create a new file called `deploy.js`,\nadding the following contents to it:\n\n    \n    \n    const hre = require(\"hardhat\");\n    \n    async function main() {\n      const Disperse = await hre.ethers.getContractFactory(\"Disperse\");\n    \n      const disperse = await Disperse.deploy();\n    \n      await disperse.deployed();\n      console.log(`Disperse contract address: ${disperse.address}`);\n    }\n    \n    // We recommend this pattern to be able to use async/await everywhere\n    // and properly handle errors.\n    main()\n      .then(() => process.exit(0))\n      .catch((error) => {\n        console.error(error);\n        process.exit(1);\n      });\n\nHardhat has done an amazing job of explaining what each line of the code does\nin their Contracts tutorial. We\u2019ve adopted their explanations here.\n\n    \n    \n    const Disperse = await hre.ethers.getContractFactory(\"Disperse\");\n\nA `ContractFactory` in ethers.js is an abstraction used to deploy new smart\ncontracts, so  `Disperse `here is a factory for instances of our `Disperse\n`contract. When using the `hardhat-ethers` plugin `ContractFactory` and\n`Contract`, instances are connected to the first signer (owner) by default.\n\n    \n    \n    const disperse = await Disperse.deploy();\n\nCalling `deploy()` on a `ContractFactory` will start the deployment, and\nreturn a Promise that resolves to a Contract object. This is the object that\nhas a method for each of our smart contract functions.\n\n### Step 12 : Deploy Our Contract\n\nWe\u2019re finally ready to deploy our smart contract! Navigate to the command line\nand run:\n\n    \n    \n    npx hardhat run scripts/deploy.js --network shardeum\n\nYou should then see something like this:\n\n    \n    \n    Disperse contract address: 0x64B1f5069D2965f5e0B4b1d8494f21bD560e69cB\n\nIf we go to the Shardeum explorer and search for our contract address we\nshould able to see that it has been deployed successfully. The transaction\nwill look something like this in the image below with the URL:\nhttps://explorer-\ndapps.shardeum.org/account/0x64B1f5069D2965f5e0B4b1d8494f21bD560e69cB\n\nClick on Transaction hash to see the full details of contract creation, it\nwill look something like this in the image below with the URL:\nhttps://explorer.liberty10.shardeum.org/transaction/0xc84a25c6d91d7a83d2451de846253cb160e51efbdc393fe7f5f6f5cfcd5f250c\n\nCongrats! You just deployed a smart contract to the Shardeum Sphinx Dapp\ntestnet!!\n\nTo learn more about shardeum : Visit https://docs.shardeum.org/\n\n### **Popular Searches**\n\nWhy to Invest in DeFi Coins and Token  |  Mobile App Technology Stack  |  How\nto Buy Real Estate in the Metaverse  |  Blockchain Scalability Solutions  |\nPublic Blockchain Examples  |  Top Altcoins  |  What is Proof of Work in\nBlockchain  |  Crypto Cloud Mining  |  Best Place to Mint NFT  |  What is\nStake in Crypto  |  What is a Governance Token  |  Benefits of Blockchain  |\nWhat is Blockchain Security  |  Can Blockchain be Hacked  |  What is Crypto\nMetaverse  |  How to Keep Crypto Safe  |  Bitcoin VS Ethereum  |  What is a\nCrypto Whale  |  What is Staking in Crypto  |  Ethereum that are Compatible\nwith the EVM\n\n* * *\n\n_Opinions expressed in this publication are those of the author(s). They do\nnot necessarily purport to reflect the opinions or views of Shardeum\nFoundation_.\n\n_**About the Author** : **Naresh Golla** is a front end Web 3.0 developer with\nexperience in Vue, React, web3.js, Ethers.js, Hardhat and Alchemy. He is one\nof the first developers to deploy a smart contract and a NFT project on\nShardeum. You can follow him on LinkedIn._\n\nLast Updated on September 21, 2023\n\n__\n\n##  Related Posts\n\n###  Shardeum Blockchain Testnet is Live! Here\u2019s How to Claim 100 $SHM Tokens!\n\nShardeum launched its testnet in April 2022 and is on\u2026\n\nRead More \u00bb\n\n###  How to Mint Your Cryptocurrency on Shardeum Testnet using Remix \u2013 Part 1\n\nShardeum alpha-testnet was launched recently and this is the right\u2026\n\nRead More \u00bb\n\n### Leave a Comment Cancel Reply\n\nYour email address will not be published. Required fields are marked *\n\nType here..\n\nName*\n\nEmail*\n\nWebsite\n\nSave my name, email, and website in this browser for the next time I comment.\n\nSearch\n\nSearch\n\n## Recent Posts\n\n  * Committer of the Month \u2013 Sonali Thakur, Software Engineer\n  * Shardeum SHM Airdrop: Phase 1 Update\n  * Committer of the Month \u2013 Subbu, Content Marketing Manager\n  * Shardeum Highlights from India Blockchain Week 2023\n  * Ecosystem Update: Spheron x Shardeum\n\n## Related posts:\n\n  * How to Deploy NFT Smart Contract on Shardeum Testnet\n  * How to Mint Your Cryptocurrency on Shardeum Testnet using Remix \u2013 Part 1\n  * How to Mint Your Own Crypto on Shardeum Testnet \u2013 Part 2\n  * How to Deploy ERC-20 Smart Contracts on Shardeum Using Truffle\n  * What are Soulbound Tokens? An Interesting Topic in NFT and Web3\n\n## Top Searches\n\nLayer 1 Blockchain  \nLayer 1 Crypto Project 2023 Blockchain Trilemma  \nShardeum Tokenomics  \nRun Your Own Node On Blockchain Advantages & Disadvantages of Decentralization  \nTypes of Sharding in Blockchain  \nLinear Scalability - Holy Grail of Web3  \nFinality in Blockchain  \nDecentralized Storage Networks  \n\nDiscord\n\nTwitter\n\nTelegram\n\nYouTube\n\nReddit\n\nNewsletter\n\nGitHub\n\nGitLab\n\nGeneral\n\nMain Menu\n\n  * Home\n  * Community\n  * Newsletter\n  * Careers\n  * OCC\n  * Privacy Policy\n  * Terms\n\nResources\n\nMain Menu\n\n  * Whitepaper\n  * Mainnet Roadmap\n  * Blog\n  * FAQ\n  * Public drive link\n  * Claim Testnet SHM\n  * Brand Assets\n\n## Contact\n\nMain Menu\n\n  * General Enquiries\n  * Partnership Enquiries\n\nCopyright \u00a9 Shardeum 2023\n\nScroll to Top\n\n",
    "links": "[{\"link\": \"https://shardeum.org/\", \"text\": \"\"}, {\"link\": \"https://shardeum.org/\", \"text\": \"\"}, {\"link\": \"https://shardeum.org/\", \"text\": \"\"}, {\"link\": \"https://shardeum.org/\", \"text\": \"\"}, {\"link\": \"https://shardeum.org/\", \"text\": \"\"}, {\"link\": \"https://shardeum.org/\", \"text\": \"\"}, {\"link\": \"https://shardeum.org/blog/how-to-deploy-smart-contract-on-shardeum-testnet-hardhat#respond\", \"text\": \"Cancel Reply\"}]"
}