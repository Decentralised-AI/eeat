{
    "summary": "Open in app\n\nSign up\n\nSign in\n\nWrite\n\nSign up\n\nSign in\n\n# Deploy EVM-Based dApp on Algorand With Milkomeda A1\n\n## Using (mostly) Python\n\nDavid Duarte\n\n\u00b7\n\nFollow\n\nPublished in\n\nBetter Programming\n\n\u00b7\n\n7 min read\n\n\u00b7\n\nOct 23, 2022\n\n10\n\nListen\n\nShare\n\nIn this article, I will show how simple it is to deploy an EVM-based dApp on\nAlgorand-Milkomeda A1, using mostly Python.\n\nMilkomeda is a new protocol that brings EVM capabilities to non-EVM\nblockchains. At the time of writing, there are L2 solutions for Algorand,\nthrough the EVM-based Rollup Algorand-Milkomeda A1, and Cardano, through the\nEVM-based sidechain Cardano-Milkomeda C1.\n\nThe A1 Rollup uses wrapped ALGOs (milkALGOs) as its base currency, which can\nbe easily bridged using the Milkomeda permission-less bridge. Users can wrap\ntheir ALGOs and other Algorand native assets (ASAs) onto the A1 Rollup with a\nfew simple steps. This enables them to use their milkALGOs to interact with\nthe EVM-based dApps deployed on the A1 Rollup.\n\nI will assume the user has never even used Algorand and will show all the\nsteps starting from scratch:\n\n    \n    \n    Table of ContentsSetup an Algorand Wallet  \n    Get Some Testnet ALGO  \n    Add the Milkomeda Algorand Testnet to Metamask  \n    Create a Dummy EVM Account To Test  \n    Bridge Testnet ALGO to Milkomeda A1  \n    Compile and Deploy to Milkomeda A1 a SimpleStorage Contract Written in Solidity Using Brownie  \n    BONUS: Compile the Same Contract Using Vyper and Deploy Using web3py\n\n# STEP 1 \u2014 Setup an Algorand Wallet\n\nThere are several wallets one can use in Algorand. For an almost complete\nlist, I point readers to the discover > wallets section on the Algorand\nDeveloper portal, but in this example, I will use MyAlgo wallet.\n\nMyAlgo is an Algorand web wallet with a non-custodial and secure mechanism. It\nhelps users interact directly with the Algorand blockchain while handling\ntheir own private keys by either storing them securely and encrypted in their\nlocal browser or by using a Ledger hardware wallet.\n\nTo set up a wallet, (i) visit https://wallet.myalgo.com/new-account, (ii)\nchoose a password to protect your wallet, and (iii) click Add a New Account\nand follow the steps to save your Mnemonic Phrase securely.\n\nYou should now have an Algorand address like the following image:\n\nScreenshot of MyAlgo wallet\n\n# STEP 2 \u2014 Get Some Testnet ALGO\n\nNow on the top right of your MyAlgo wallet, change from MAINNET to TESTNET,\nand then visit the Algorand Testnet Dispenser\n(https://testnet.algoexplorer.io/dispenser) and paste your newly created\naccount to get some testnet ALGOs.\n\nYou should now be able to see ten testnet ALGOs in your MyAlgo wallet.\n\n# STEP 3 \u2014 Add the Milkomeda Algorand Testnet to Metamask\n\nIn Metamask, go to Settings > Networks > Add Networks and fill in the\nfollowing information:\n\nNetwork Name: Milkomeda Algorand Testnet  \nNew RPC URL: https://rpc-devnet-algorand-rollup.a1.milkomeda.com  \nChain ID: 200202  \nCurrency Symbol (Optional): milkTALGO  \nBlock Explorer URL (Optional): https://testnet-algorand-\nrollup.a1.milkomeda.com\n\n# STEP 4 \u2014 Create a Dummy EVM Account To Test\n\nTo test the bridging of wrapped ALGOs to Milkomeda, let\u2019s create a dummy EVM\naccount with a simple Python snippet.\n\nThis will generate a private key which you can now use to import the account\ninto Metamask.\n\nIMPORTANT: Please do not use an account generated like this for real funds.\nThe randomness of the proposed process is insufficient to ensure the security\nof your funds.\n\n# STEP 5 \u2014 Bridge Testnet ALGO to Milkomeda A1\n\nGo to the Milkomeda A1 bridge page https://algorand-bridge-dev.milkomeda.com/\nand follow these steps:\n\n  1. Select \u201cDevnet\u201d in top right select box\n  2. On Network Origin, select \u201cAlgorand to Milkomeda\u201d\n  3. On Token, select \u201cALGO\u201d\n  4. Click \u201cConnect Wallet\u201d Algorand, select MyAlgo Wallet, enter your password, and then select your Algorand account\n  5. Click \u201cConnect Wallet\u201d Metamask to connect to your EVM address on A1\n  6. Click \u201cNext,\u201d then \u201cSign and Send\u201d\n\nIf all went well, you will see the following screen and should now see your\nbridged ALGOs in Metamask. Following the link will show the transaction on the\nA1 Bridge Explorer.\n\n# STEP 6 \u2014 Compile and Deploy to Milkomeda A1 a SimpleStorage Contract Written\nin Solidity Using Brownie\n\nAssuming one doesn\u2019t have Brownie installed, create a virtual environment and\ninstall Brownie by:\n\n    \n    \n    python -m venv venv  \n    source venv/bin/activate  \n    pip install eth-brownie\n\nInitialize a brownie project in a new working directory:\n\n    \n    \n    brownie init milkomeda && cd milkomeda\n\nNow let\u2019s create a very simple Solidity contract. In the contracts folder,\ncreate a file called `Storage.sol`, and add the following solidity code:\n\nRun the following command from the root of the created working directory to\ncompile the contract:\n\n    \n    \n    brownie compile\n\nTo check the available networks that are configured in your brownie\ninstallation, run:\n\n    \n    \n    brownie networks list\n\nMilkomeda A1 will not be available by default, so we need to add it. To do\nthat, either edit the file `~/.brownie/network-config.yaml` and add the\nfollowing lines:\n\n    \n    \n    - name: Milkomeda  \n        networks:  \n         - name: Algorand Testnet  \n           id: milkomeda-algorand-testnet  \n           host: https://rpc-devnet-algorand-rollup.a1.milkomeda.com  \n           chainid: 200202  \n           explorer: https://testnet-algorand-rollup.a1.milkomeda.com\n\nOR use the brownie CLI:\n\n    \n    \n    brownie networks add Milkomeda milkomeda-algorand-testnet chainid=200202 explorer=https://testnet-algorand-rollup.a1.milkomeda.com host=https://rpc-devnet-algorand-rollup.a1.milkomeda.com name=\"Milkomeda Testnet\"\n\nIf successful, one should now see it in the list, which can be queried with\ncomplete details by:\n\n    \n    \n    brownie networks list true\n\nWe will add the private key to use the created (EVM) account. Create a file\ncalled `brownie-config.yml` in the root directory and add the private key\ndirectly.\n\nOr save the private key in a .env file and point to it in the brownie config.\n\nNow, we have everything ready to deploy our Storage smart contract on\nMilkomeda A1. In the `scripts` folder, create a file named `deploy.py`, and\nadd the following code:\n\nFrom brownie, we are importing `Storage` to be able to use the compiled\ncontract, `accounts` so we can add the account by private key and `config` to\nbe able to access the key/value pairs stored in the `brownie-config.yml` file.\n\nThen, we can create the signer account and deploy the contract in the main\nfunction.\n\nWe can now deploy the contract on Milkomeda A1 by running the script from the\nterminal and indicating the A1 network:\n\n    \n    \n    brownie run scripts/deploy.py --network milkomeda-algorand-testnet\n\nThe output should be:\n\nThe contract has been deployed, and you can check the transaction on the A1\nMilkomeda Devnet explorer:\n\n## Transaction\n0x881eaedcdbe6b965d77bf84383d5e4235bb46aeeaaedffddc385ed4ed1b59909 \u2014 A1\nExplorer\n\n### View transaction\n0x881eaedcdbe6b965d77bf84383d5e4235bb46aeeaaedffddc385ed4ed1b59909 on A1\n\nexplorer-devnet-algorand-rollup.a1.milkomeda.com\n\nTo interact with the smart contract, let\u2019s create a separate file called\n`call.py` in the scripts directory and add the following code:\n\nThe only new import here is the `Contract` class to create the contract object\nby calling the `.from_abi` method, which takes name, abi, and contract address\nas inputs. The contract address was copied from the deployment output and hard\ncoded here.\n\nWe then call the retrieve method on our contract to read the stored value in\nthe \u201cnumber\u201d variable. Then we store a new value and read it again. To call\nthis script from the terminal, run the following:\n\n    \n    \n    brownie run scripts/call.py --network milkomeda-algorand-testnet\n\nThe output should be something like this:\n\nAnd we are done! We have deployed and interacted with a contract on Milkomeda\nA1, so in a way, we have used an EVM-based smart contract on Algorand.\n\nI admit this tutorial could be easily adapted to any EVM-compatible chain, so\nit\u2019s not really Algorand-specific, but it just goes to show how seamless it\ncan be to port an existing EVM dApp to Algorand.\n\n# BONUS: Compile the Same Contract Using Vyper and Deploy Using web3py\n\nWe can now look at an example of deploying the same smart contract but written\nin Vyper, using only web3py.\n\nFirst, we will need the abi and bytecode of the contract:\n\nNow let\u2019s connect to the Milkomeda A1 through the RPC URL.\n\nSet up the account from the generated private key (assuming it\u2019s in the .env\nfile)\n\nCreate the contract object from the abi and bytecode and call the constructor\nfunction.\n\nUntil this point, the code would produce the following output:\n\nand we can look up the transaction or the deployed contract on the A1 devnet\nexplorer:\n\n## Contract 0x39013492b1bC84D9dF64d79e67D99f71F71BDA8B \u2014 A1 Explorer\n\n### View the account balance, transactions, and other data for\n0x39013492b1bC84D9dF64d79e67D99f71F71BDA8B on the Milkomeda\n\nexplorer-devnet-algorand-rollup.a1.milkomeda.com\n\nNow to interact with the contract, we can call the retrieve function to get\nthe stored value, change the value with the \u201cstore\u201d function and then retrieve\nthe value again.\n\nand the output\u2026\n\nThanks for reading!\n\nStay tuned for more.\n\n## Sign up to discover human stories that deepen your understanding of the\nworld.\n\n## Free\n\nDistraction-free reading. No ads.\n\nOrganize your knowledge with lists and highlights.\n\nTell your story. Find your audience.\n\nSign up for free\n\n## Membership\n\nAccess the best member-only stories.\n\nSupport independent authors.\n\nListen to audio narrations.\n\nRead offline.\n\nJoin the Partner Program and earn for your writing.\n\nTry for $5/month\n\nAlgorand\n\nMilkomeda\n\nPython\n\n10\n\n10\n\nFollow\n\n## Written by David Duarte\n\n60 Followers\n\n\u00b7Writer for\n\nBetter Programming\n\nFollow\n\nHelp\n\nStatus\n\nAbout\n\nCareers\n\nBlog\n\nPrivacy\n\nTerms\n\nText to speech\n\nTeams\n\n",
    "links": "[]"
}