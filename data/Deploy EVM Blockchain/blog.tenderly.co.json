{
    "summary": "Tenderly\u2019s EVM Landscape Report is out! \ud83d\ude80 Explore the multichain ecosystem &\ncross-chain tooling.\n\n// blog  __\n\n  * Product\n  * Changelog\n  * Case Studies\n  * Docs\n\n____\n\nSearch Go to Dashboard\n\nTutorials\n\n# How to Deploy Your First Smart Contract on Ethereum With Hardhat and\nTenderly DevNets\n\nReady to deploy your first Ethereum smart contract? Follow a step-by-step\nguide to smart contract deployment with Hardhat and Tenderly DevNets and learn\nwhat actually happens in the process.\n\nBranislav Milojkovic\n\nJul 12, 2023 \u00b7 11 min read\n\nIn this post\n\n  1. 1\\. Set up a Tenderly account to use Tenderly DevNets\n  2. 2\\. Get some test ETH on a DevNet\n  3. 3\\. Compile and deploy a smart contract using Hardhat\n    1. 3.1. Install Hardhat\n    2. 3.2 Prepare the Ethereum smart contract code\n    3. 3.3. Complete the Hardhat config\n    4. 3.4. Compile the code\n    5. 3.5. Deploy the smart contract\n  4. 4\\. Use Tenderly DevNets to get in-depth transaction insights\n    1. 4.1. Re-simulate already executed transactions\n    2. 4.2. Check the simulation output\n  5. 5\\. Edit the contract source\n  6. 6\\. Deploy your smart contract to start experimenting\n\nIn this tutorial, you\u2019ll learn how to create and deploy a smart contract to a\nprivate development and testing network.\n\nFirst, you\u2019ll set up **HardHat** , a smart contract development environment,\nand write a smart contract in **Solidity**. Next, you\u2019ll set up a Tenderly\nDevNet, a zero-setup environment for smart contract development and testing.\n\nWith a DevNet, you can easily acquire some test ETH from an **unlimited**\n**faucet**. You\u2019ll use this private environment to deploy and try out a smart\ncontract against real-time Ethereum Mainnet data. Finally, you\u2019ll execute a\ncontract function with updated parameters using **Tenderly** to see detailed\nexecution information in a human-readable format.\n\nAs a full-stack infrastructure provider, Tenderly is an essential component of\nthe web3 tech stack. It enables you to develop, test, debug, optimize, and\ndeploy your smart contracts on Ethereum and other EVM-compatible networks.\n\nPlus, Tenderly DevNets are complementary to HardHat, so you have all the\npowerful tools you need to build and deploy reliable, foolproof smart\ncontracts.\n\nSo, let\u2019s get started!\n\n## 1\\. Set up a Tenderly account to use Tenderly DevNets\n\nFirst, go to Tenderly and follow a few simple steps to set up your account.\nYou can either use your email or sign up with Google or GitHub. Tenderly will\nsend you a verification email. Once your email is verified, you\u2019re good to go.\n\nFor this tutorial, we\u2019ll use Tenderly DevNets to execute transactions in a\nlocal environment. Once you log in, you\u2019ll land on the DevNets page. Here,\nclick the **Experience DevNets** button to create your first DevNet.\n\nOnce you spawn your first DevNet, the **Run Overview** page will open,\ndisplaying the run details and the RPC URL of your DevNet. Here, you can copy\nthe **DevNet RPC** and use it in the later steps.\n\n _ _Finding the DevNet RPC__\n\n## 2\\. Get some test ETH on a DevNet\n\n **Before you proceed** :\n\n  * Smart contract creation and testing aren't typically done on the Ethereum Mainnet, but rather on one of the Ethereum testnets.\n  * However, with Tenderly DevNets, you get a zero-setup, private network with up-to-date production data and fresh Mainnet states, where you can execute transactions instantly.\n  * A DevNet also allows you to get an unlimited supply of test ETH within seconds instead of struggling to get tokens from a public faucet.\n  * Spinning up a DevNet also allows you to address potential bugs right away and ensure that your code executes as expected before you deploy it to the Ethereum Mainnet.\n\n **Feel free to proceed** :\n\n  * Each Tendely DevNet comes prefilled with 100 test tokens you can use for your development and testing purposes.\n  * However, you can use different custom RPC methods on DevNets to manipulate the state of your private network, including adjusting the balance of your account.\n  * So, to give yourself a lot of ETH, simply use `tenderly_setBalance`.\n\n## 3\\. Compile and deploy a smart contract using Hardhat\n\nWith the basic setup now complete, you can dive into creating a blockchain\nsmart contract.\n\n### 3.1. Install Hardhat\n\nTo set up Hardhat, you need to install the following two packages on your\nsystem:\n\n  * node.js (we used v18.9.0)\n  * npm (we used v8.19.1)\n\nFire up a terminal and complete the following steps:\n\n  1. Create a directory for your project  \n`mkdir tenderly_deploy_tutorial && cd tenderly_deploy_tutorial`\n\n  2. Initialize the project (this will create the package.json file)  \n`npm init -y`\n\n  3. Install Hardhat  \n`npm install hardhat`\n\n  4. Create a Hardhat project  \nnpx hardhat\n\n  5. `Select the \u201cempty hardhat.config.js\u201d option:`\n\n _ _Setting up a Hardhat project__\n\n6\\. Add libraries to your project. We\u2019ll use `ethers` to interact with the\nblockchain and `dotenv` to hide our secrets. \ud83e\udd2b  \n`npm install @nomiclabs/hardhat-ethers ethers dotenv`\n\n7\\. Let\u2019s also add the Tenderly plugin for Hardhat that automatically verifies\nyour smart contract and uploads it to Tenderly. It\u2019s important to verify your\nsmart contract to enable all the functionalities of Tenderly features.\n\n`npm install @tenderly/hardhat-tenderly`\n\n### 3.2 Prepare the Ethereum smart contract code\n\nCreate a directory for smart contracts and create a contract file:\n\n`mkdir contracts && touch contracts/Greeter.sol`\n\nInstead of writing a smart contract from scratch, use a ready-made smart\ncontract example for this tutorial. Paste the following code in your newly\ncreated Greeter.sol file:\n\n    \n    \n    //SPDX-License-Identifier: Unlicense\n    pragma solidity ^0.8.0;\n    \n    contract Greeter {\n      string private greeting;\n    \n      constructor(string memory _greeting) {\n        greeting = _greeting;\n      }\n    \n      function greet() public view returns (string memory) {\n        return greeting;\n      }\n    \n      function setGreeting(string memory _greeting) public {\n        greeting = _greeting;\n      }\n    }\n    \n    \n\n### 3.3. Complete the Hardhat config\n\nCreate a .env file that will contain secret information such as your private\nkey and the Tenderly DevNet RPC URL.\n\n`touch .env`\n\nOpen up the .env file in your text editor of choice and add your private key\nand the Tenderly URL to it like so:\n\n`PRIVATE_KEY = # remove this comment and add your wallet\u2019s private key here  \nTENDERLY_URL = # remove this comment and add the Tenderly DevNet RPC URL you\ngot from step 1 of this tutorial`\n\n\u2139\ufe0f\n\nA DevNet RPC URL is short-lived, lasting only 90 minutes, just enough time for\ndeployment and test scripts to complete. You can follow a few simple steps to\nautomate this process and avoid copy-pasting the URL.\n\nThis file should be added to your `.gitignore` list if you\u2019re versioning this\nproject. It\u2019s very important that both your private key doesn't become public.\nThis way, you can share your project configuration, without worrying about\nothers knowing your secrets.\n\nNext, let's modify the `hardhat.config.js file.` It should import the ethers\nlibrary, set up the network we\u2019re going to use, and prepare our private key\nfor later.\n\nWe\u2019ll also call `setup` to initialize the Tenderly plugin for automatic smart\ncontract verification. We need to configure the `hardhat-tenderly` plugin to\nperform verification automatically and add the verified contract directly to\nyour project.\n\n\u2139\ufe0f\n\nAside from configuring the plugin, you also need to authenticate with\nTenderly. To do this, either use Tenderly CLI or generate an API key in the\nDashboard and place it in ~/.tenderly/config.yaml  under access_key.\n\n    \n    \n    require(\"@nomiclabs/hardhat-ethers\");\n    require(\"dotenv\").config();\n    \n    // Initialize hardhat-tenderly plugin for automatic contract verification\n    var tdly = require(\"@tenderly/hardhat-tenderly\");\n    tdly.setup({ automaticVerifications: true });\n    \n    // Your private key and tenderly devnet URL (which contains our secret id)\n    // We read both from the .env file so we can push this config to git and/or share publicly\n    const privateKey = process.env.PRIVATE_KEY;\n    const tenderlyUrl = process.env.TENDERLY_URL;\n    \n    module.exports = {\n      solidity: \"0.8.17\",\n      networks: {\n        devnet: {\n          url: tenderlyUrl,\n          // This will allow us to use our private key for signing later\n          accounts: [`0x${privateKey}`],\n          // This is the mainnet chain ID\n          chainId: 1,\n        },\n      },\n      tenderly: {\n        // Replace with project slug in Tenderly\n        project: \"project\",\n        // Replace with your Tenderly username\n        username: \"my-username\",\n        // Perform contract verification in private mode\n        privateVerification: true,\n      },\n    };\n    \n\n### 3.4. Compile the code\n\nTo compile your smart contract, run the following command:\n\n`npx hardhat compile`\n\nHardHat will look for smart contracts in your **contracts** directory, use the\ncompiler version we specified in the `hardhat.config.js` file, and store the\ncompilation result in a newly created \u201cartifacts\u201d directory. Again, if you\u2019re\nversioning your project, you might want to add the `artifacts` directory to\nyour `.gitignore` list.\n\nYou may have already been through this process before, but what really happens\nwhen you compile a smart contract?\n\nFirst, the Solidity compiler identifies all functions, events, and errors in\nyour smart contract and makes an ABI (Application Binary Interface) based on\nthem. Anyone (on- or off-chain) can use the ABI to interact with the smart\ncontract once it\u2019s deployed. You can think of the smart contract ABI as the\ninterface of the contract directed at the outside world. You can see the ABI\nfor your smart contract in `artifacts/contracts/Greeter.sol/Greeter.json`.\n\n    \n    \n    {\n      \"abi\": [\n      {\n        \"inputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"_greeting\",\n          \"type\": \"string\"\n        }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"constructor\"\n      },\n      {\n        \"inputs\": [],\n        \"name\": \"greet\",\n        \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      },\n      {\n        \"inputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"_greeting\",\n          \"type\": \"string\"\n        }\n        ],\n        \"name\": \"setGreeting\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n      }\n      ]\n    }\n    \n    \n\nAnother thing you will find in this file is the bytecode of your contract. In\nfact, the main purpose of compilation is translating the Solidity source code\ninto EVM bytecode that can be stored on an Ethereum-based blockchain. Each\ninstruction in EVM bytecode can be represented numerically. This is why the\ngenerated bytecode is represented as a long string of numbers in base 16.\n\nCompiling a smart contract is essentially translating it from human-readable\nSolidity source code into this bytecode which is optimized for EVM execution.\nFunctionally, both types of code describe identical behavior for the contract.\nNow that we have our bytecode prepared, it\u2019s time to put it on the blockchain\nfor everyone to see and use.\n\n### 3.5. Deploy the smart contract\n\nFor Ethereum smart contract deployment, we need to make a simple JS script\nthat will use a Tenderly DevNet to access the blockchain and publish our\ncompiled bytecode. First, create the deployment script:\n\n`mkdir scripts && touch scripts/deploy.js`\n\nThis script contains the procedure for deploying the smart contract. It\nreferences our configuration to get the private key of the deployer. The\nscript also targets the Tenderly DevNet to get access to the node as if it was\nrunning on the Mainnet. The deployment process consists of signing and sending\na transaction that contains the contract bytecode without specifying the\nrecipient.\n\nDuring the deployment procedure, the address for the contract is determined\nbased on the sender\u2019s address and current nonce, so it\u2019s always unique. Once\nthe smart contract deployment is completed, we\u2019ll print out the address at\nwhich it\u2019s stored so we can inspect and interact with it.\n\nNext, edit the deployment script `scripts/deploy.js` with your editor of\nchoice:\n\n    \n    \n    const { ethers } = require(\"hardhat\");\n    require(\"dotenv\").config();\n    \n    async function main() {\n      // Prepare the deployer wallet - this will be based on the private key we set up in config\n      const [deployer] = await ethers.getSigners();\n    \n      // Prepare the provider - this will give us access to the blockchain via Tenderly DevNet\n      provider = new ethers.providers.JsonRpcProvider(process.env.TENDERLY_URL);\n    \n      // Greeter will be an ethers internal representation of the compiled contract\n      const Greeter = await ethers.getContractFactory(\"Greeter\", deployer);\n      console.log(\"Deploying Greeter...\");\n    \n      // greeter will be the instance of our contract that we are about to deploy\n      const greeter = await Greeter.deploy(\"Hello from Tenderly!\");\n    \n      // We wait for the deployment to be completed and confirmed\n      await greeter.deployed();\n      await greeter.setGreeting(\"hello\");\n    \n      // This will tell us the address at which the contract was deployed\n      console.log(\"Greeter deployed to:\", greeter.address);\n    }\n    \n    // Do the thing!\n    main()\n      .then(() => process.exit(0))\n      .catch((error) => {\n        console.error(error);\n        process.exit(1);\n      });\n    \n    \n\nFinally, run the script:\n\n`npx hardhat run \u2013network devnet scripts/deploy.js`\n\nThe script will output the address of your newly deployed contract. The smart\ncontract address in this example is\n`0x8E69bC733367D80D758080fD12DFc8e6dBAE5185`.\n\nHowever, since we used automatic contract verification, you don\u2019t need to\nremember the address. Instead, your contract is automatically added to\nTenderly and ready to go.\n\n _ _Running the script for smart contract deployment__\n\nCongrats! \ud83c\udf89 Your smart contract is up and running, and you successfully\nuploaded it to Tenderly. You can find it in the list of contracts in your\nTenderly DevNet.\n\n _ _Finding the deployed contract within the Tenderly DevNet__\n\nYou can now use numerous Tenderly features to optimize your smart contract,\nreduce gas fees, and debug potential errors. So, let\u2019s get playful!\n\n## 4\\. Use Tenderly DevNets to get in-depth transaction insights\n\nWith Tenderly DevNets, you get insight into how your smart contract\ntransactions would execute on a real network, without ever having to actually\nuse one. And if you ever want to change smart contract code or adjust some\ninput parameters, you can re-simulate transactions within your DevNet\nenvironments.\n\nSo, by using Tenderly DevNets, you can:\n\n  *  **Avoid waiting and try out your smart contract swiftly** during development, without actually using a test network.\n  *  **Replay a failed transaction** to gain a deeper understanding of its execution and what went wrong i.e. catch a bug.\n  *  **Inspect the bug in detail using Tenderly Debugger** to go over each line of code and identify the exact cause of the issue.\n  *  **Play around with, test, and validate your bug fixes** to make sure your updated contract runs as expected in production.\n  *  **Simulate a transaction with updated contract source and/or parameters** , including the block number, transaction indexes, address, gas, and value.\n\nCool, right? \ud83d\ude0e Why not give it a try?\n\n### 4.1. Re-simulate already executed transactions\n\nTo run a simulation, select **Transaction** that executes the `setGreeting`\nfunction.\n\n _ _Simulating transaction execution within a DevNet__\n\nNext, open the Transaction tab within your DevNet environment. Then, click the\n**Re-Simulate** button in the top right corner of the screen.\n\n _ _Transaction overview within a DevNet environment__\n\nThis opens the simulation window. Here, the `setGreeting` function is already\nselected in the dropdown menu with all the transaction parameters already pre-\npopulated.\n\n _ _Pre-filled simulation parameters__\n\nNow, you can run the simulation by clicking **Simulate Transaction**.\n\n### 4.2. Check the simulation output\n\nNext, you can see whether your transaction simulation executed successfully or\nnot. You can also find any related information, such as how much gas your\ntransaction used, transaction index, nonce, and other details. By clicking\n**View input data** , you can check out the transaction input.\n\n\u2139\ufe0f\n\nRunning simulations on top of DevNets doesn\u2019t change the state of your\nenvironment. They just provide an insight into the behavior of the smart\ncontract.\n\nHere's the output of the simulated transaction:\n\n__Reviewing the transaction simulation output__\n\n## 5\\. Edit the contract source\n\nBefore re-simulating the transaction, you can change the contract source code\nby clicking **Edit Contract Source**.\n\n _ _Running a new simulation with updated contract source code__\n\nThis opens the **Editing Source** view where you can see and edit the source.\n\nNext, change the `greet()` function and replace the return value with a\nstring. Once done, click the **Apply Changes** button in the bottom left\ncorner and then **Simulate Transaction**.\n\n _ _Editing the smart contract source code__\n\nAgain, you can find the details about your successful transaction in the next\nview. In the output data section, you\u2019ll find the string you added to the\nsource code.\n\n _ _Reviewing the new output of the simulated transaction__\n\n## 6\\. Deploy your smart contract to start experimenting\n\nIn just a few steps, you can learn how to create and deploy a smart contract,\nas well as what\u2019s going on under the hood. With Tenderly\u2019s full-stack\ninfrastructure, you have all the needed tools for developing smart contracts.\nPlus, Tenderly DevNets are complementary to HardHat, so you can easily\nintroduce them into your development flow.\n\nReady to level up? Try to build a real multisignature wallet **** to send and\nsecure your ETH. Start by using Tenderly\u2019s full-stack infrastructure to build,\ntest, optimize, and monitor your smart contracts in one place. So, start using\nDevNets and discover the easy way of developing and deploying smart contracts.\n\nSubscribe to our newsletter\n\n### Explore Tenderly\n\n  * __Tenderly Node\n  * __Transaction Simulations\n  * __DevNets\n  * __Tenderly SDK\n  * __Alerts\n  * __Web3 Actions\n\n## Continue reading\n\nNetworks\n\n###  Welcome Linea: Tenderly Now Supports ZK-Powered Chains\n\nMilica Lukic\n\nJan 30, 2024 \u00b7 7 min read\n\nNetworks\n\n###  How to Use Tenderly to Build High-Volume Dapps on Mantle Network\n\nMilica Lukic\n\nJan 16, 2024 \u00b7 6 min read\n\nSmart Contracts\n\n###  Going Beyond Solidity: How Arbitrum Stylus Speaks Your Language\n\nBogdan Habic\n\nJan 11, 2024 \u00b7 3 min read\n\nNetworks\n\n###  2023 EVM Network Landscape Report\n\nTenderly\n\nDec 20, 2023 \u00b7 13 min read\n\nWorldwide Locations\n\nNorth America HQ\n\n16 Maiden Lane, San Francisco CA 94108, USA\n\nEMEA HQ\n\nMilutina Milankovi\u0107a 7\u0111, Belgrade 11070, Serbia\n\nProduct\n\nMonitoring\n\nAlerting\n\nTenderly Node\n\nWeb3 Actions\n\nSimulator\n\nDevNets\n\nAnalytics\n\nTransaction Preview\n\nWar Rooms\n\nPricing\n\nResources\n\nDocumentation\n\nStatus\n\nPrivacy Policy\n\nTerms of Service\n\nCookies Policy\n\nCompany\n\nTeam\n\nCareers\n\nNewsroom\n\nChangelog\n\nBlog\n\nContact\n\nSupport\n\nBusiness\n\nGet the latest Tenderly updates in your inbox\n\nFollow us\n\n__ __ __ __ __\n\nTenderly \u00a9 Copyright 2024. All rights reserved.\n\n__\n\n",
    "links": "[{\"link\": \"https://blog.tenderly.co/tag/tutorials/\", \"text\": \"\"}, {\"link\": \"https://blog.tenderly.co/author/branislav-milojkovic/\", \"text\": \"\"}, {\"link\": \"https://blog.tenderly.co/author/branislav-milojkovic/\", \"text\": \"\\n                                Branislav Milojkovic\\n                            \"}, {\"link\": \"https://blog.tenderly.co/how-tenderly-integrates-linea-and-supports-zk-chains/\", \"text\": \"\"}, {\"link\": \"https://blog.tenderly.co/tag/network/\", \"text\": \"\"}, {\"link\": \"https://blog.tenderly.co/how-tenderly-integrates-linea-and-supports-zk-chains/\", \"text\": \"\\n                    Welcome Linea: Tenderly Now Supports ZK-Powered Chains\\n                \"}, {\"link\": \"https://blog.tenderly.co/author/milica/\", \"text\": \"\"}, {\"link\": \"https://blog.tenderly.co/author/milica/\", \"text\": \"\"}, {\"link\": \"https://blog.tenderly.co/building-dapps-on-mantle-with-tenderly/\", \"text\": \"\"}, {\"link\": \"https://blog.tenderly.co/tag/network/\", \"text\": \"\"}, {\"link\": \"https://blog.tenderly.co/building-dapps-on-mantle-with-tenderly/\", \"text\": \"\\n                    How to Use Tenderly to Build High-Volume Dapps on Mantle Network\\n                \"}, {\"link\": \"https://blog.tenderly.co/author/milica/\", \"text\": \"\"}, {\"link\": \"https://blog.tenderly.co/author/milica/\", \"text\": \"\"}, {\"link\": \"https://blog.tenderly.co/how-arbitrum-stylus-enables-web2-languages/\", \"text\": \"\"}, {\"link\": \"https://blog.tenderly.co/tag/smart-contracts/\", \"text\": \"\"}, {\"link\": \"https://blog.tenderly.co/how-arbitrum-stylus-enables-web2-languages/\", \"text\": \"\\n                    Going Beyond Solidity: How Arbitrum Stylus Speaks Your Language\\n                \"}, {\"link\": \"https://blog.tenderly.co/author/bogdan-habic/\", \"text\": \"\"}, {\"link\": \"https://blog.tenderly.co/author/bogdan-habic/\", \"text\": \"\"}, {\"link\": \"https://blog.tenderly.co/2023-evm-network-landscape-report/\", \"text\": \"\"}, {\"link\": \"https://blog.tenderly.co/tag/network/\", \"text\": \"\"}, {\"link\": \"https://blog.tenderly.co/2023-evm-network-landscape-report/\", \"text\": \"\\n                    2023 EVM Network Landscape Report\\n                \"}, {\"link\": \"https://blog.tenderly.co/author/tenderly/\", \"text\": \"\"}, {\"link\": \"https://blog.tenderly.co/author/tenderly/\", \"text\": \"\"}]"
}