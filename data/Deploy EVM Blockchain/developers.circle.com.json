{
    "summary": "Jump to Content\n\nStablecoinsWeb3 ServicesCircle MintCircle Research\n\n __Guides __API Reference __Changelog __Discuss in the Forum __Need support?\n\n* * *\n\nStablecoinsWeb3 ServicesCircle MintCircle ResearchOpen An Account\n\n __Guides\n\nOpen An Account\n\n __Guides __API Reference __Changelog Discuss in the ForumNeed support?\n\nSearch\n\nCTRL-K\n\nDeploy a Smart Contract\n\n## Getting Started\n\n  * Overview\n  *  __Programmable Wallets\n    * Infrastructure Models\n    * Account Types\n  * Smart Contract Platform\n  * Gas Station\n  * Circle Access Network (Beta)\n  * Primitives\n  * Web3 Services SDKs\n\n## User-Controlled WALLETS\n\n  *  __Quickstarts\n    * Create Your First User-Controlled Wallet\n    * Receive an Inbound Transfer\n    * Send an Outbound Transfer\n    * Reset Account Pin Code\n    * Recover an Account\n    * Interactive Quickstart __\n  *  __Web, iOS, and Android SDKs\n    * Overview\n    * Web\n    * Web SDK UI Customizations\n    * iOS\n    * iOS SDK UI Customization API\n    * Android\n    * Android SDK UI Customization API\n  * Web, iOS, and Android Sample Applications\n\n## Developer-controlled Wallets\n\n  *  __Quickstarts\n    * Create Your First Developer-Controlled Wallet\n    * Receive an Inbound Transfer\n    * Transfer Tokens from Wallet to Wallet\n    * Interactive Quickstart __\n  * Entity Secret Management\n  * Onboard Users to Developer-Controlled Wallets\n\n## smart Contract Platform\n\n  *  __Quickstarts\n    * Deploy a Smart Contract\n    * Deploy a Smart Contract From a Template\n    * Interact With a Smart Contract\n    * Interactive Quickstart __\n  * Smart Contract Template Overview\n  * Smart Contract Template Glossary\n\n## Gas Station\n\n  *  __Quickstarts\n    * Send a Gasless Transaction\n  * Policy Management\n  * Billing for Sponsored Gas Fees\n  * Paymaster\n\n## REFERENCES\n\n  * Migrate from Goerli to Sepolia\n  *  __Developer Console\n    * Circle Developer Account\n    * Developer Account Logs\n    * Manage Team Members\n  *  __API Authentication\n    * API Keys & Authentication\n    * Testnet (Sandbox) vs. Mainnet (Production)\n    * Testing API References\n  *  __Webhook Notifications\n    * Notifications Quickstart\n    * Notification Flows\n    * Notification Logs\n  * Postman API Suite\n  * Gas Fees\n  * Supported Blockchains and Currencies\n  * Blockchain Confirmations\n  * Idempotent Requests\n  * Monitored Tokens\n  * Wallet Security\n  * Compliance Requirements\n  *  __API States and Errors\n    * HTTP Errors\n    * Transaction States and Errors\n\n# Deploy a Smart Contract\n\nThe following guide deploys an ERC-721 contract on the Polygon Mumbai Testnet\n\n __Suggest Edits\n\nSmart Contract Platform provides an API for deploying, exploring, and\ninteracting with smart contracts. The platform offers a powerful toolset for\ndevelopers to build decentralized applications and for businesses to\ntransition to web3.\n\nThis guide can also be followed to deploy smart contracts on the Ethereum\nnetwork by changing the blockchain parameter in your request. Additionally,\nyou can deploy to Mainnet by swapping out the Testnet API key for a Mainnet\nAPI key. See the Testnet vs Mainnet guide for more details.\n\n> ## \ud83d\udcd8\n>\n> OpenZeppelin\n>\n> This tutorial will use OpenZeppelin\u2019s Contract Wizard to generate an ERC-721\n> smart contract. OpenZeppelin offers a secure smart contract development\n> library - built on top of a foundation of community-vetted code.\n>\n> The Contract Wizard includes:\n>\n>   1. Implementations of standards like ERC20 and ERC721.\n>   2. Flexible role-based permissions scheme.\n>   3. Reusable Solidity components to build custom contracts and complex\n> decentralized systems.\n>\n\n##\n\nPart One: Fund Your Wallet with Gas\n\nIf you already have a Circle developer-controlled wallet on Polygon Mumbai\nwith Testnet MATIC, proceed to part two. If you haven't created a developer-\ncontrolled wallet, head to our quickstart Create Your First Developer-\nControlled Wallet guide. Once completed, jump into steps one and two below to\nacquire gas for deploying your first contract.\n\n###\n\n1\\. Acquire Tokens for Gas Fees\n\nIn Web3, gas fees refers to transaction fees that are always paid in the\nnative currency of the blockchain network. For example, to deploy a contract\non a contract on the Ethereum network, you must pay the transaction fee in\nEther (ETH). Similarly, on the Polygon network, the fee would be in MATIC. To\nensure smooth transactions, it is important to have a sufficient amount of the\nnative token in your wallet.\n\nTo gather tokens for gas, we recommend using the Polygon Faucet. When you\nvisit the faucet's website, you will be prompted to provide your wallet's\naddress. To acquire it, make a request to `GET /wallets` as shown below noting\ndown Wallet One's address `wallets[0].address`.\n\nNode.jscURL\n\n    \n    \n    // Import and configure the developer-controlled wallet SDK\n    const { initiateDeveloperControlledWalletsClient } = require('@circle-fin/developer-controlled-wallets');\n    const circleDeveloperSdk = initiateDeveloperControlledWalletsClient({\n      apiKey: '<API_KEY>',\n      entitySecret: '<ENTITY_SECRET>'\n    });\n    \n    // Import and configure the smart contract SDK\n    const { initiateSmartContractPlatformClient } = require('@circle-fin/smart-contract-platform');\n    const circleContractSdk = initiateSmartContractPlatformClient({\n      apiKey: '<API_KEY>',\n      entitySecret: '<ENTITY_SECRET>'\n    });\n    \n    const response = await circleDeveloperSdk.listWallets({});\n    \n    \n    \n    curl --request GET \\\n         --url 'https://api.circle.com/v1/w3s/wallets' \\\n         --header 'accept: application/json' \\\n         --header 'authorization: Bearer <API_KEY>'\n    \n\nResponse Body\n\n    \n    \n    {\n      \"data\": {\n        \"wallets\": [\n          {\n            \"id\": \"17c411ba-7aef-4c5d-a4f8-951a60ce7fb1\",\n            \"state\": \"LIVE\",\n            \"walletSetId\": \"018b42d3-8934-7ad5-8ec7-a34179a7e6e5\",\n            \"custodyType\": \"DEVELOPER\",\n            \"address\": \"0x09e768def76316d8f127efb73047a046598fef7b\",\n            \"blockchain\": \"MATIC-MUMBAI\",\n            \"accountType\": \"EOA\",\n            \"updateDate\": \"2023-10-18T12:48:45Z\",\n            \"createDate\": \"2023-10-18T12:48:45Z\"\n          },\n          {\n            \"id\": \"8172d817-32b5-4f52-b071-4a8d789e08fc\",\n            \"state\": \"LIVE\",\n            \"walletSetId\": \"018b42d3-8934-7ad5-8ec7-a34179a7e6e5\",\n            \"custodyType\": \"DEVELOPER\",\n            \"address\": \"0x48f2d63f13f62ff1e3ab9dbda56f3e5c531557b2\",\n            \"blockchain\": \"MATIC-MUMBAI\",\n            \"accountType\": \"EOA\",\n            \"updateDate\": \"2023-10-18T12:48:45Z\",\n            \"createDate\": \"2023-10-18T12:48:45Z\"\n          }\n        ]\n      }\n    }\n    \n\n###\n\n2\\. Check the Wallet's Balance\n\nBefore deploying the contract, double-check the MATIC tokens were received.\nThis can be done by making a request to `GET /wallets/{id}/balances` providing\nthe ID of Wallet One from the previous step.\n\nNode.jscURL\n\n    \n    \n    const response = await circleDeveloperSdk.getWalletTokenBalance({\n      id: '17c411ba-7aef-4c5d-a4f8-951a60ce7fb1'\n    });\n    \n    \n    \n    curl --request GET \\\n         --url 'https://api.circle.com/v1/w3s/wallets/{id}/balances' \\\n         --header 'accept: application/json' \\\n         --header 'authorization: Bearer <API_KEY>'\n    \n\nResponse Body\n\n    \n    \n    {\n      \"data\": {\n        \"tokenBalances\": [\n          {\n            \"token\": {\n              \"id\": \"e4f549f9-a910-59b1-b5cd-8f972871f5db\",\n              \"blockchain\": \"MATIC-MUMBAI\",\n              \"name\": \"Polygon-Mumbai\",\n              \"symbol\": \"MATIC-MUMBAI\",\n              \"decimals\": 18,\n              \"isNative\": true,\n              \"updateDate\": \"2023-06-29T02:37:14Z\",\n              \"createDate\": \"2023-06-29T02:37:14Z\"\n            },\n            \"amount\": \"0.2\",\n            \"updateDate\": \"2023-08-03T22:22:07Z\"\n          }\n        ]\n      }\n    }\n    \n\n##\n\nPart Two: Write and Deploy Smart Contract\n\n###\n\n3\\. Writing the Smart Contract\n\nIn the OpenZeppelin Contract Wizard\n\n  1. Select the ERC721 template and the additional features you want to add to your contract.\n  2. Select **Mintable**. By default, this selects the **Ownable** access control, restricting the Mintable function to the wallet owner.\n\n  3. Select **Open in Remix** button to create a new workspace in Remix and compile the contract.\n  4. Select **Compile contract** to compile the Solidity code into bytecode for the Ethereum Virtual Machine (EVM). We recommend using the default compiler settings which are appropriate for most use cases. \n    1. In Remix, you don\u2019t need to update the code at all. \n    2. If you don't see compile contract, ensure you are in the **Solidity Compiler** section. If not, select it in the left-hand navigation bar.\n\n  5. Once the compilation is complete, note down the ABI and bytecode. These values will be used in the next step. \n    1. The compiler output is available under **Compilation Details**. For more information on the Solidity compiler\u2019s outputs, see using the compiler.\n    2. The Application Binary Interface (ABI) is the standard way to interact with contracts on an EVM from outside the blockchain and for contract-to-contract interaction.\n\n###\n\n4\\. Deploy the Smart Contract\n\nTo deploy a smart contract, we will use the `[POST\n/contracts/deploy](ref:deploycontract)` API. In the request body, you will\nprovide the following values gathered from the prior steps:\n\n  1. **`entitySecretCiphertext`** uniquely generated Entity Secret Ciphertext. To learn more about generating the ciphertext for this request, see the guide How to Re-Encrypt the Entity Secret.\n  2. **`walletId`** acquired from step 1. \n  3. **`abiJSON`** acquired from the Solidity Compiler in step 3.\n  4. **`bytecode`** acquired from the Solidity Compiler in step 3.\n  5. **`constructorSignature`** the signature of the constructor function. For this contract, it is `constructor(address initialOwner)`. \n  6. **`constructorParameters`** the address to set as the initial owner of the contract. For this guide, it should be the address of your wallet, but it can be any address. \n\n> ## \ud83d\udcd8\n>\n>   * `abiJSON` must be stringified i.e. quote escaped. To stringfy the JSON\n> you can use the JsonFormatter's Stringfy tool.\n>   * `bytecode` must be prefixed with `0x`.\n>\n\nNode.jscURL\n\n    \n    \n    const response = await circleContractSdk.deployContract({\n      name: 'First Contract Name',\n      description: 'First Contract Description',\n      walletId: '046b6c7f-0b8a-43b9-b35d-6489e6daee91',\n      blockchain: 'MATIC-MUMBAI',\n      fee: {\n        type: 'level',\n        config: {\n          feeLevel: 'MEDIUM'\n        }\n      },\n      constructorSignature: 'constructor(address initialOwner)',\n      constructorParameters: ['0x6F77e56DFA40190349E1078e97ac3Eb479E0Dac6'],\n      entitySecretCiphertext: '0NtD3d3+nmgb4GqYQXzAjKF8h5Zq6sHM2k/...',\n      abiJSON:\n        '[\\n\\t{\\n\\t\\t\"inputs\": [],\\n\\t\\t\"stateMutability\": \"nonpayable\",\\n\\t\\t\"type\": \"constructor\"\\n\\t},\\n\\t{\\n\\t\\t\"anonymous\": false,',\n      bytecode: '0x...'\n    });\n    \n    \n    \n    curl --request POST \\\n         --url 'https://api.circle.com/v1/w3s/contracts/deploy' \\\n         --header 'accept: application/json' \\\n         --header 'content-type: application/json' \\\n         --header 'authorization: Bearer <API_KEY>' \\\n         --data '\n    {\n      \"idempotencyKey\": \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n      \"name\": \"First Contract Name\",\n      \"description\": \"First Contract Description\",\n      \"walletId\": \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n      \"blockchain\": \"MATIC-MUMBAI\",\n      \"feeLevel\": \"MEDIUM\",\n      \"constructorSignature\": \"constructor(address initialOwner)\",\n      \"constructorParameters\": [\"0x6F77e56DFA40190349E1078e97ac3Eb479E0Dac6\"],\n      \"entitySecretCiphertext\": \"0NtD3d3+nmgb4GqYQXzAjKF8h5Zq6sHM2k/...\",\n      \"abiJSON\": \"[\\n\\t{\\n\\t\\t\\\"inputs\\\": [],\\n\\t\\t\\\"stateMutability\\\": \\\"nonpayable\\\",\\n\\t\\t\\\"type\\\": \\\"constructor\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"anonymous\\\": false,\",\n      \"bytecode\": \"0x...\"\n    }\n    '\n    \n\nIf the call is successful, you will receive a `transactionId` and a\n`contractId` in the response.\n\nResponse Body\n\n    \n    \n    { \n      \"data\":  {\n        \"contractId\": \"0189db12-4089-72eb-b4a8-2aee38cc38fe\",  \n        \"transactionId\": \"7b989c65-9678-56d8-a998-d295b8b04535\"  \n      }\n    }\n    \n\nYou can now call `[GET /contracts/{id}](ref:getcontract)` to check the status\nof your transaction. When the transaction has been confirmed on-chain, the\ncontract response object will contain the `contractAddress` and have a status\nof `PENDING`. After 12 block confirmations, the contract will have a status of\n`COMPLETE` \\- as seen below.\n\nNode.jscURL\n\n    \n    \n    const response = await circleContractSdk.getContract({\n      id: '0189db84-72b7-7fcc-832b-5bf886b9a0ef'\n    });\n    \n    \n    \n    curl --request GET \\\n         --url 'https://api.circle.com/v1/w3s/contracts/{id}' \\\n         --header 'accept: application/json' \\\n         --header 'authorization: Bearer <API_KEY>'\n    \n\nJSON\n\n    \n    \n    {\n      \"data\": {\n        \"contract\": {\n          \"id\": \"0189db84-72b7-7fcc-832b-5bf886b9a0ef\",\n          \"deploymentTransactionId\": \"4f5bfa38-c598-56a6-932e-8b5bbd3d5fc9\",\n          \"name\": \"First Contract Name\",\n          \"description\": \"First Contract Description\",\n          \"contractInputType\": \"BYTECODE\",\n          \"createDate\": \"2023-08-09T18:17:17Z\",\n          \"updateDate\": \"2023-08-09T18:17:17Z\",\n          \"archived\": false,\n          \"contractAddress\": \"0x1e124d7384cd34448ea5907bd0052a79355ab5eb\",\n          \"blockchain\": \"MATIC-MUMBAI\",\n          \"status\": \"COMPLETE\",\n          \"deployerAddress\": \"0x1bf9ad0cc2ad298c69a2995aa806ee832788218c\",\n          \"txHash\": \"0x241c4df6f08f9ed2b569c9f9b1cc48fb6074ffffaeee7552e716ce059161a743\",\n          \"abiJSON\": \"[\\n\\t{\\n\\t\\t\\\"inputs\\\": [],\\n\\t\\t\\\"stateMutability\\\": \\\"nonpayable\\\",\\n\\t\\t\\\"type\\\": \\\"constructor\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"anonymous\\\": false,\",\n          \"functions\": [\n            {\n              \"name\": \"approve\",\n              \"type\": \"function\",\n              \"inputs\": [\n                {\n                  \"name\": \"to\",\n                  \"type\": \"address\"\n                },\n                {\n                  \"name\": \"tokenId\",\n                  \"type\": \"uint256\"\n                }\n              ],\n              \"stateMutability\": \"nonpayable\"\n            }\n          ],\n          \"verificationStatus\": \"UNVERIFIED\"\n        }\n      }\n    }\n    \n\nIf you have configured Webhooks, you will receive notifications on the status\nof the deployment transaction. Additionally, you can view your deployed\ncontract on the Polygon Mumbai block explorer Polygonscan by running a search\nusing `contractAddress`.\n\n __Updated about 1 month ago\n\n* * *\n\nWhat\u2019s Next\n\nNow that you have deployed a smart contract, you can interact with it and\ncreate your first NFT!\n\n  * Interact with a Smart Contract\n\nDid this page help you?\n\n __Yes\n\n __No\n\n  *  __Table of Contents\n  *     * Part One: Fund Your Wallet with Gas\n      * 1\\. Acquire Tokens for Gas Fees\n      * 2\\. Check the Wallet's Balance\n    * Part Two: Write and Deploy Smart Contract\n      * 3\\. Writing the Smart Contract\n      * 4\\. Deploy the Smart Contract\n\n",
    "links": "[{\"link\": \"https://developers.circle.com/w3s/docs\", \"text\": \"\"}, {\"link\": \"https://developers.circle.com/w3s/reference\", \"text\": \"\"}, {\"link\": \"https://developers.circle.com/w3s/changelog\", \"text\": \"\"}, {\"link\": \"https://developers.circle.com/w3s/docs\", \"text\": \"\"}, {\"link\": \"https://developers.circle.com/w3s/reference\", \"text\": \"\"}, {\"link\": \"https://developers.circle.com/w3s/changelog\", \"text\": \"\"}, {\"link\": \"https://developers.circle.com/w3s/docs/circle-programmable-wallets-an-overview\", \"text\": \"Overview\"}, {\"link\": \"https://developers.circle.com/w3s/docs/programmable-wallets\", \"text\": \"\"}, {\"link\": \"https://developers.circle.com/w3s/docs/programmable-wallets-infrastructure-models\", \"text\": \"Infrastructure Models\"}, {\"link\": \"https://developers.circle.com/w3s/docs/programmable-wallets-account-types\", \"text\": \"Account Types\"}, {\"link\": \"https://developers.circle.com/w3s/docs/smart-contract-platform\", \"text\": \"Smart Contract Platform\"}, {\"link\": \"https://developers.circle.com/w3s/docs/gas-station\", \"text\": \"Gas Station\"}, {\"link\": \"https://developers.circle.com/w3s/docs/circle-access-network-beta\", \"text\": \"Circle Access Network (Beta)\"}, {\"link\": \"https://developers.circle.com/w3s/docs/programmable-wallets-primitives\", \"text\": \"Primitives\"}, {\"link\": \"https://developers.circle.com/w3s/docs/web3-services-sdks\", \"text\": \"Web3 Services SDKs\"}, {\"link\": \"https://developers.circle.com/w3s/docs/user-controlled-initialization-and-wallet-creation-quickstart\", \"text\": \"\"}, {\"link\": \"https://developers.circle.com/w3s/docs/user-controlled-create-your-first-wallet\", \"text\": \"Create Your First User-Controlled Wallet\"}, {\"link\": \"https://developers.circle.com/w3s/docs/user-controlled-receive-inbound-transfer\", \"text\": \"Receive an Inbound Transfer\"}, {\"link\": \"https://developers.circle.com/w3s/docs/user-controlled-send-outbound-transfer\", \"text\": \"Send an Outbound Transfer\"}, {\"link\": \"https://developers.circle.com/w3s/docs/user-controlled-reset-account-pin\", \"text\": \"Reset Account Pin Code\"}, {\"link\": \"https://developers.circle.com/w3s/docs/user-controlled-recover-account\", \"text\": \"Recover an Account\"}, {\"link\": \"https://developers.circle.com/w3s/docs/programmable-wallets-sdk-overview\", \"text\": \"\"}, {\"link\": \"https://developers.circle.com/w3s/docs/programmable-wallets-sdk-overview\", \"text\": \"Overview\"}, {\"link\": \"https://developers.circle.com/w3s/docs/web\", \"text\": \"Web\"}, {\"link\": \"https://developers.circle.com/w3s/docs/web-sdk-ui-customizations\", \"text\": \"Web SDK UI Customizations\"}, {\"link\": \"https://developers.circle.com/w3s/docs/ios\", \"text\": \"iOS\"}, {\"link\": \"https://developers.circle.com/w3s/docs/ios-sdk-ui-customization-api\", \"text\": \"iOS SDK UI Customization API\"}, {\"link\": \"https://developers.circle.com/w3s/docs/android\", \"text\": \"Android\"}, {\"link\": \"https://developers.circle.com/w3s/docs/android-sdk-ui-customization-api\", \"text\": \"Android SDK UI Customization API\"}, {\"link\": \"https://developers.circle.com/w3s/docs/sample-applications\", \"text\": \"Web, iOS, and Android Sample Applications\"}, {\"link\": \"https://developers.circle.com/w3s/docs/developer-controlled-wallet-quickstart\", \"text\": \"\"}, {\"link\": \"https://developers.circle.com/w3s/docs/developer-controlled-create-your-first-wallet\", \"text\": \"Create Your First Developer-Controlled Wallet\"}, {\"link\": \"https://developers.circle.com/w3s/docs/developer-controlled-receive-an-inbound-transfer\", \"text\": \"Receive an Inbound Transfer\"}, {\"link\": \"https://developers.circle.com/w3s/docs/developer-controlled-transfer-tokens-across-wallets\", \"text\": \"Transfer Tokens from Wallet to Wallet\"}, {\"link\": \"https://developers.circle.com/w3s/docs/entity-secret-management\", \"text\": \"Entity Secret Management\"}, {\"link\": \"https://developers.circle.com/w3s/docs/onboard-users-to-developer-controlled-wallets\", \"text\": \"Onboard Users to Developer-Controlled Wallets\"}, {\"link\": \"https://developers.circle.com/w3s/docs/scp-quickstarts\", \"text\": \"\"}, {\"link\": \"https://developers.circle.com/w3s/docs/scp-deploy-smart-contract\", \"text\": \"Deploy a Smart Contract\"}, {\"link\": \"https://developers.circle.com/w3s/docs/deploy-smart-contract-template\", \"text\": \"Deploy a Smart Contract From a Template\"}, {\"link\": \"https://developers.circle.com/w3s/docs/scp-interact-smart-contract\", \"text\": \"Interact With a Smart Contract\"}, {\"link\": \"https://developers.circle.com/w3s/docs/scp-templates-overview\", \"text\": \"Smart Contract Template Overview\"}, {\"link\": \"https://developers.circle.com/w3s/docs/scp-templates-glossary\", \"text\": \"Smart Contract Template Glossary\"}, {\"link\": \"https://developers.circle.com/w3s/docs/send-a-gasless-transaction\", \"text\": \"\"}, {\"link\": \"https://developers.circle.com/w3s/docs/send-a-gasless-transaction\", \"text\": \"Send a Gasless Transaction\"}, {\"link\": \"https://developers.circle.com/w3s/docs/gas-station-policy-management\", \"text\": \"Policy Management\"}, {\"link\": \"https://developers.circle.com/w3s/docs/gas-station-billing\", \"text\": \"Billing for Sponsored Gas Fees\"}, {\"link\": \"https://developers.circle.com/w3s/docs/gas-station-paymaster\", \"text\": \"Paymaster\"}, {\"link\": \"https://developers.circle.com/w3s/docs/migrate-from-goerli-to-sepolia\", \"text\": \"Migrate from Goerli to Sepolia\"}, {\"link\": \"https://developers.circle.com/w3s/docs/circle-developer-account\", \"text\": \"\"}, {\"link\": \"https://developers.circle.com/w3s/docs/circle-developer-account\", \"text\": \"Circle Developer Account\"}, {\"link\": \"https://developers.circle.com/w3s/docs/developer-account-logs\", \"text\": \"Developer Account Logs\"}, {\"link\": \"https://developers.circle.com/w3s/docs/manage-team-members\", \"text\": \"Manage Team Members\"}, {\"link\": \"https://developers.circle.com/w3s/docs/web3-services-api-keys-authentication\", \"text\": \"\"}, {\"link\": \"https://developers.circle.com/w3s/docs/web3-services-api-keys-authentication\", \"text\": \"API Keys & Authentication\"}, {\"link\": \"https://developers.circle.com/w3s/docs/sandbox-vs-production\", \"text\": \"Testnet (Sandbox) vs. Mainnet (Production)\"}, {\"link\": \"https://developers.circle.com/w3s/docs/api-references\", \"text\": \"Testing API References\"}, {\"link\": \"https://developers.circle.com/w3s/docs/web3-services-notifications-quickstart\", \"text\": \"\"}, {\"link\": \"https://developers.circle.com/w3s/docs/web3-services-notifications-quickstart\", \"text\": \"Notifications Quickstart\"}, {\"link\": \"https://developers.circle.com/w3s/docs/notification-flows\", \"text\": \"Notification Flows\"}, {\"link\": \"https://developers.circle.com/w3s/docs/webhook-logs\", \"text\": \"Notification Logs\"}, {\"link\": \"https://developers.circle.com/w3s/docs/postman\", \"text\": \"Postman API Suite\"}, {\"link\": \"https://developers.circle.com/w3s/docs/gas-fees\", \"text\": \"Gas Fees\"}, {\"link\": \"https://developers.circle.com/w3s/docs/supported-blockchains-and-currencies\", \"text\": \"Supported Blockchains and Currencies\"}, {\"link\": \"https://developers.circle.com/w3s/docs/blockchain-confirmations\", \"text\": \"Blockchain Confirmations\"}, {\"link\": \"https://developers.circle.com/w3s/docs/idempotent-requests\", \"text\": \"Idempotent Requests\"}, {\"link\": \"https://developers.circle.com/w3s/docs/monitored-tokens\", \"text\": \"Monitored Tokens\"}, {\"link\": \"https://developers.circle.com/w3s/docs/wallet-security\", \"text\": \"Wallet Security\"}, {\"link\": \"https://developers.circle.com/w3s/docs/compliance-requirements\", \"text\": \"Compliance Requirements\"}, {\"link\": \"https://developers.circle.com/w3s/docs/synchronous-errors\", \"text\": \"\"}, {\"link\": \"https://developers.circle.com/w3s/docs/synchronous-errors\", \"text\": \"HTTP Errors\"}, {\"link\": \"https://developers.circle.com/w3s/docs/asynchronous-states-and-statuses\", \"text\": \"Transaction States and Errors\"}, {\"link\": \"https://developers.circle.com/w3s/edit/scp-deploy-smart-contract\", \"text\": \"\"}, {\"link\": \"https://developers.circle.com/w3s/docs/sandbox-vs-production\", \"text\": \"Testnet vs Mainnet\"}, {\"link\": \"https://developers.circle.com/w3s/docs/scp-deploy-smart-contract#part-two-write-and-deploy-smart-contract\", \"text\": \"part two\"}, {\"link\": \"https://developers.circle.com/w3s/docs/developer-controlled-create-your-first-wallet\", \"text\": \"Create Your First Developer-Controlled Wallet\"}, {\"link\": \"https://developers.circle.com/w3s/reference/listwallets-1\", \"text\": \"\"}, {\"link\": \"https://developers.circle.com/w3s/reference/listwalletballance-1\", \"text\": \"\"}, {\"link\": \"https://developers.circle.com/w3s/docs/entity-secret-management#how-to-re-encrypt-the-entity-secret\", \"text\": \"How to Re-Encrypt the Entity Secret\"}, {\"link\": \"https://developers.circle.com/w3s/docs/web3-services-notifications-quickstart\", \"text\": \"Webhooks\"}, {\"link\": \"https://developers.circle.com/w3s/docs/scp-interact-smart-contract\", \"text\": \"Interact with a Smart Contract\"}]"
}