{
    "summary": "Skip to content\n\nNavigation menu\n\nSearch\n\nLog in  Create account\n\n## DEV Community\n\nClose\n\nAdd reaction\n\nLike  Unicorn  Exploding Head  Raised Hands  Fire\n\nJump to Comments  Save\n\nMore...\n\nCopy link Copy link\n\nCopied to Clipboard\n\nShare to Twitter  Share to LinkedIn  Share to Reddit  Share to Hacker News\nShare to Facebook  Share to Mastodon\n\nShare Post via... Report Abuse\n\nVishnu Sivan\n\nPosted on May 6, 2022\n\n         \n\n#  Create and deploy your first smart contract with Solidity\n\n#blockchain #solidity #dapps #smartcontracts\n\nBlockchain is the backbone of cryptocurrency which redefines the way we\ncommunicate over the internet. It creates a decentralized, token-based system\nwhere contributors become the owner of the asset rather than guests.\n\nSmart Contracts play a vital role in Blockchain popularity as it makes\ntransactions safer and organized.  \n  \nEthereum is an open-source platform that allows anyone to build and run dapps\non a blockchain. It allows users to create Smart Contracts, which can be\ndeployed and executed by the Ethereum Virtual Machine (EVM). Solidity is the\nlanguage used for creating these smart contracts.\n\nIn this article, we will learn to create a smart contract using Solidity.\n\n##  Getting Started\n\nLet's begin with basic terminologies.\n\n###  Blockchain\n\nA blockchain is an auditable and irreversible database where data can only be\nadded. In a blockchain, the data can be added as blocks in which each block\nhas the address of the previous one, hence called the blockchain.\n\n###  Crypto Currency\n\nCryptocurrency is a digital currency in which all transactions use\ncryptography to add the block to a blockchain on a decentralized system. A\nblockchain is a collection of nodes responsible for validating the\ncryptocurrency. Though Bitcoin is the most popular cryptocurrency, Ethereum\n(ether) can also be used for blockchain transactions.\n\n###  Ethereum\n\nEthereum is an open-source decentralized platform built on blockchain and is\nused to run our smart contracts. It is not only a cryptocurrency but also a\nsophisticated application that executes the smart contracts on the blockchain\nso as to avoid the chances of any fraud attempts in the transactions. We use\nEthereum Virtual Machine (EVM) as the runtime for running the smart contracts.\n\n###  Smart Contracts\n\nSmart contracts are program snippets compiled and executed by the EVM and\nstored on a blockchain. It is executed automatically when the predefined\nconditions are met. It helps you to do safe transactions without the\ninvolvement of a third party. The good part of smart contract-based\ntransactions is that these transactions are irreversible but traceable.\n\nSolidity is the most widely used programming language to create and write\nsmart contracts even though there are other languages such as Mutan, Serpent\nand LLL available in the market.\n\n###  Ethereum Virtual Machine (EVM)\n\nThe Ethereum Virtual Machine is a computing engine used for running smart\ncontracts. It acts as a software platform for building and deploying\ndecentralized apps.\n\nLet's have a look into the working of an EVM.\n\nThe smart contract (Solidity code) is compiled by the Ethereum compiler and\ncreates an EVM bytecode. These bytecodes are the intermediate codes executed\nby the EVM. It creates different blocks after bytecode execution. Finally, the\ndeployed contracts are mapped to the respective blocks.\n\nWe can find multiple standalone implementations of EVM such as\n\n  * **Py-EVM** \\- Python\n  * **evmone** \\- C++\n  * **ethereumjs-vm** \\- JavaScript\n  * **eEVM** \\- C++\n  * **Hyperledger Burrow** \\- Go\n\n###  Solidity\n\nSolidity is the commonly used high-level object-oriented language for\nimplementing smart contracts. It is a curly-bracket based and ECMAScript-like\nsyntax language having almost similar syntax to C++, JavaScript and Python. It\nis statically typed and supports complex member variables for contracts. With\nSolidity, you can create contracts for applications such as voting,\ncrowdfunding, and multi-signature wallets.\n\n##  Setup the environment\n\nYou can execute a Smart contract in two ways\n\n  * Offline mode\n  * Online mode\n\n###  Offline mode\n\nLet's start with the software requirements.\n\n  * Node.js - An open-source JavaScript runtime environment used to execute JavaScript code outside a web browser.\n  * Truffle - The most popular development framework for Ethereum.\n  * Ganache - Provides a local network that shows different test / real blockchain accounts and transactions on the IDE/console. It is a part of the Truffle suite.\n\n  * Download and install node.js.\n\n  * Install Truffle globally.  \n\n    \n    \n    npm install -g truffle\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n  * Download and install ganache-cli.\n\n###  Online mode\n\nRemix Ethereum IDE is an online platform used to create smart contracts using\nSolidity with zero setup time. It has an offline installer to run it locally.\nCheck the offline installer here Remix desktop\n\nNow that all the tools are installed, let us explore some of the fundamental\nconcepts of Solidity.\n\n##  Solidity fundamentals\n\n###  Version Pragma\n\nPragma directive specifies the compiler version for running the source code.\nAll solidity programs should begin with a pragma . Note that this statement is\nlocal to the solidity program, which means you have to specify this line for\nall solidity programs.  \n\n    \n    \n    pragma solidity >=0.7.0 <0.9.0;\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n###  Contract\n\nThis keyword is used to create a smart contract. By convention, the name of\nthe contract is usually the name of the solidity file. Every function and\nvariable declaration in the file will be encapsulated within the smart\ncontract.  \n\n    \n    \n    contract Test{ \n        // Functions and Data \n    }\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n###  Variables\n\nVariables are reserved memory locations to store value. You may like to store\ninformation on various data types like character, wide character, integer,\nfloating point, double floating point, boolean etc.\n\n####  Solidity types\n\nSolidity is a statically typed language, hence we have to specify the type of\neach variable on their declaration. Like other languages, Solidity has value\ntypes and reference types.\n\n**Value types** \\- Value type variables store their own data. These are the\nbasic data types provided by solidity. Value type data in the solidity are\nlisted below:\n\n  * **Boolean** : This data type is used to store True or False values.\n  * **Integer** : This data type is used to store whole numbers. We can use int and uint to declare signed and unsigned integers respectively.\n  * **Fixed Point Numbers** : This data type is used to store floating point numbers. We can use fixed and unfixed to declare signed and unsigned fixed-point numbers respectively.\n  * **Address** : Address holds a 20-byte value which represents the size of an Ethereum address. An address can be used to get the balance of a blockchain account or to transfer the balance using the getbalance() or settransfer() method respectively.\n  * **Bytes and Strings** : Bytes are used to store a fixed-sized character set while the string is used to store the character set equal to or more than a byte.\n  * **Enums** : It is used to create user-defined data types, and also to assign a name to an integer constant which makes the contract more readable and maintainable. \n\n    \n    \n    // Solidity program to demonstrate value types\n    // SPDX-License-Identifier: MIT\n    pragma solidity >=0.4.22 <0.9.0; \n    \n    // Creating a contract\n    contract Types {   \n    \n        // Initializing Bool variable\n        bool public boolean = false;\n    \n        // Initializing Integer variable\n        int32 public int_var = -12345;\n    \n        //  Initializing String variable\n        string public str = \"Codemaker\";\n    \n        // Initializing Byte variable\n        bytes1 public b = \"v\";\n    \n        // Defining an enumerator\n        enum week { sunday, monday, tuesday, wednesday, thursday, friday, saturday  } \n    }\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n**Reference Types** \\- Reference type variables store the location of the\ndata. They don't share the data directly. The reference types in solidity are\nlisted below:\n\n  * **Arrays** : An array is a collection of similar data with a name and each element is identified with the help of an index.\n  * **Struct** : The structure is a group of different data types. It helps the user to create and define their own data type.\n  * **Mapping** : Mapping is the most used reference type which stores the data in a key-value pair where a key can be any value type. \n\n    \n    \n    // Solidity program to demonstrate Reference Types\n    // SPDX-License-Identifier: MIT\n    pragma solidity >=0.4.22 <0.9.0; \n    \n    // Creating a contract\n    contract Types {\n    \n        // Defining an array   \n        uint[5] public array = [uint(1), 2, 3, 4, 5] ;\n    \n        // Defining a Structure\n        struct student {\n            string name;\n            string subject;\n            uint8 marks;\n        }\n    \n        // Creating a structure object\n        student public std1;\n    \n        // Creating a mapping\n        mapping (address => student) result;\n        address[] student_result;\n    }\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n###  Function\n\nA function is a group of reusable codes that can be used anywhere in your\napplication. We can define a function using the function keyword, a unique\nfunction name, a list of parameters, and a block of statements surrounded by\ncurly braces. It can be specified as private, internal, external or public\n(default).\n\n  * **Private** : Functions and state variables are only visible for the contract which are defined.\n  * **Public** : Functions and state variables can be accessed anywhere in the program.\n  * **Internal** : Similar to private but Functions and state variables can only be accessed within the contracts derived from the defined contracts.\n  * **View** : These are read-only functions which guarantee the state of the variable. **Syntax**\n\n    \n    \n    function function-name(parameter-list) scope returns() {\n       //statements\n    }\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n**Example**  \n\n    \n    \n    // Solidity program to demonstrate Functions\n    // SPDX-License-Identifier: MIT\n    pragma solidity >=0.7.0 <0.9.0;  \n    \n    // Creating a contract\n    contract MathOperations {\n        function addNumbers() public pure returns(uint){\n            uint a = 100; // local variable\n            uint b = 200;\n            uint result = a + b;\n            return result;\n        }\n    }\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n###  Modifiers\n\nModifier allows the control of the behavior of a function. They can be used in\na variety of scenarios. For instance, checking who has access to a function\nbefore executing that function.  \n\n    \n    \n    // Solidity program to demonstrate Modifiers\n    // SPDX-License-Identifier: MIT\n    pragma solidity >=0.7.0 <0.9.0;  \n    \n    // Creating a contract\n    contract ModifierTest {\n        address testAddress;\n        constructor() {\n            testAddress = msg.sender;\n        }    \n        // Check if the function is called by the owner of the contract\n        modifier onlyOwner() {\n            if (msg.sender == testAddress) {\n                _;\n            }\n        }\n    \n        // Can only be called by the owner - using onlyOwner modifier\n        function test() public onlyOwner {\n        }\n    }\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nIf the condition of the modifier is met while calling the function, the\nfunction body is inserted where the special symbol `\"_;\"` appears in the\nmodifier definition. Then the code is executed else an exception is thrown.\n\n###  Constructors\n\nConstructor is an optional function which is automatically executed at the\ntime of contract creation. We can define a constructor using the constructor\nkeyword. It can be public or internal. The contract will create a default\nconstructor if there is no constructor specified.  \n\n    \n    \n    contructor() public {}\n    contract ConstructorTest {\n       uint regNo;   \n       constructor() public {\n          regNo = 10; \n       }\n    }\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n###  Events\n\nAn event stores arguments passed in the transaction logs. It is helpful to get\nthe current state of the contract while calling the function. It can be used\nto notify the application regarding the changes made in the contracts.\n\n**Syntax**  \n\n    \n    \n    event Transfer(address indexed from, address indexed to, uint _value);\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n**Example**  \n\n    \n    \n    emit Transfer(msg.sender, receiverAddress, msg.value);\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n###  Error handling\n\nSolidity provides various functions for error handling. However, the state of\nthe blockchain is reverted back to its original state when an error occurs.\nAlso, there is an option to prevent unauthorized code access. Following are\nsome of the important methods used in error handling.\n\n  * **assert(bool condition)** \u2212 In case the condition is not met, the method call causes an invalid opcode and any changes made to the state will get reverted. This can be used for internal errors.\n\n  * **require(bool condition)** \u2212 In case the condition is not met, the method call reverts to the original state. This can be used for external components.\n\n  * **require(bool condition, string memory message)** \u2212 The method is to be used for errors in inputs or external components. It has an option for a custom message.\n\n  * **revert()** \u2212 The method aborts the execution and reverts any changes done to the state.  \nrevert(string memory reason) \u2212 It has an option for a custom message.  \n\n    \n    \n    // Solidity program to demonstrate Error handling\n    // SPDX-License-Identifier: MIT\n    pragma solidity >=0.7.0 <0.9.0;  \n    \n    // Creating a contract\n    contract ErrorHandling {\n        address public seller;\n        modifier onlySeller() {\n            require(\n                msg.sender == seller,\n                \"Only seller can call this.\"\n            );\n            _;\n        }\n        function sell(uint amount) public payable onlySeller { \n            if (amount > msg.value / 2 ether)\n                revert(\"Not enough Ether provided.\");\n            // Perform the sell operation.\n        }\n    }\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n##  First Smart Contract\n\nThe fundamentals of Solidity are covered in the above sessions. Let's try to\ncreate and deploy our first smart contract.  \nLet's begin with the project folder creation. Subsequently, let's initialize\nthe project with Truffle by the following command.  \n\n    \n    \n    truffle init\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n`truffle init` will create the necessary project files which include\n`Migrations.sol`, `1_initial_migration.js` and `truffle-config.js`. Likewise,\nit will create three folders - contracts, migrations and test. the contracts\nfolder contains smart contracts, the migration folder contains codes for\ndeployment and the test folder contains codes for testing the smart contracts.  \nThe initial project structure will look like this,\n\nLet's have a look at the project structure.\n\n  1. **Contracts** \\- Here you can create all your .sol smart contracts. The `Migrations.sol` is a smart contract created by Truffle to keep the migration history. Don't make any changes to the `Migrations.sol` file. \n\n  2. **Migrations** \\- It contains the files that help you to deploy your smart contracts.  \nThe `1_initial_migartion.js` file deploys the `Migrations.sol` contract. You\ncan also create migration files for your contracts. Truffle runs the migration\nin ascending order in terms of the prefix therefore developers are required to\nassign the prefixes in ascending order(Eg: `2_name_file.js`).\n\n  3. **Test** \\- Here you can create your test files. Truffle provides an automated testing framework to test your contracts using Solidity and Javascript.\n\n  4. **Build** \\- A build folder will be automatically created after the compilation and it contains low-level details of each of your contracts such as the ABI and bytecode. The information is useful when you refer to the contract outside the truffle environment. We can find the address of the deployed contracts in the build files.\n\n  5. **Truffle Config** \\- It contains project configurations such as network and compilers. You can set your network to either the Ganache local blockchain, a mainnet or a test network like Ropsten.\n\n###  1\\. Write the contract\n\nNow, we can create a `HelloWorld.sol` smart contract. In this example, the\nconstructor takes a string parameter and assigns it to a global variable name.\nThe name can be changed using the function `changeName(string)` which acts as\na setter, while `getName()` acts as a getter.  \nCreate a file named 1_HelloWorld.sol and place it under the contracts folder\nthen add the following code to it.  \n\n    \n    \n    // Solidity program to demonstrate Hello World\n    // SPDX-License-Identifier: MIT\n    pragma solidity >=0.7.0 <0.9.0;  \n    \n    // Creating a contract\n    contract HelloWorld {\n    \n        string public name;\n    \n        constructor(string memory yourName) public{\n            name = yourName;\n        }\n    \n        function changeName(string memory yourName) public{\n            name = yourName;\n        }\n    \n        function getName() public view returns(string memory){\n            return name;\n        }\n    }\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n###  2\\. Setup the migration\n\nCreate a new migration file with a prefix greater than 1 (\n`2_hello_migartion.js`) inside the migration folder to deploy the\n`HelloWorld.sol` contract.\n\nInsert the following code snippet,  \n\n    \n    \n    const HelloWorld = artifacts.require(\"HelloWorld\");\n    \n    module.exports = function (deployer) {\n        const yourName = \"Codemaker\";\n        deployer.deploy(HelloWorld, yourName);\n    };\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nThe `artifacts.require()` notifies the truffle which contract you want to\ninteract with and `deployer.deploy()` function refers to the parameter we need\nto pass to the constructor.\n\n###  3\\. Compile and deploy\n\nCompile your project using the following command  \n\n    \n    \n    truffle compile\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n  \nWe can see a build folder inside the project folder if the compilation is\nsuccessful. We have to use Turffle and Ganache to deploy and test the\ncontracts.\n\nLet's begin with Ganache. Open Ganache IDE, and select \"QuickStart\" from the\nwindow.\n\nNext, go to truffle-config.js and modify the network details by uncommenting\nthe development section.\n\n> Make sure the RPC server port from Ganache is mapped in the `networks.port`\n> value.\n\n  \n  \nDeploy the contract using the following command.  \n\n    \n    \n    truffle deploy --network development\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nAfter successful deployment, you will get the contract details such as the\ncontract address and the block information.\n\n###  4\\. Test the contracts\n\nCreate a test filetest.js with .js prefix in the test folder and add the\nfollowing code.  \n\n    \n    \n    // to interact with the contract\n    const HelloWorld = artifacts.require(\"HelloWorld\");\n    \n    contract('HelloWorld', () => {\n    \n        // initialise the contract instance before running tests\n        let contractInstance = null;\n        before(async () => {\n            contractInstance = await HelloWorld.deployed();\n        });\n    \n        // TEST 1\n        it('initial name should be Codemaker', async () => {\n            // call contract's function\n            const currentName = await contractInstance.getName.call();\n            // check condition\n            assert.equal(currentName, \"Codemaker\", \"the name is not Codemaker\");\n        });\n    \n        // TEST 2\n        it('should change name in Vishnu', async () => {\n            // change name in contract\n            await contractInstance.changeName(\"Vishnu\");\n            // get the current name\n            const currentName = await contractInstance.getName.call();\n            // check condition\n            assert.equal(currentName, \"Vishnu\", \"the name is not Vishnu\");\n        }); \n    });\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nLet's understand the code,\n\nThe `before()` function executes in advance of the execution of the tests such\nthat we can initialize the contract instance. The `call()` function is used\nwhen the method does not modify the state variables of the contract. We used\ncall() in the `getName()` function else it would have returned the transaction\nreceipt.\n\nWe have defined two test cases here. The first test verifies parameters in the\ncontructor, gets the value using getter method and uses assert to check the\nequality. The second test tries to change the name using `changeName()`.\n\nRun the test using the following command  \n\n    \n    \n    truffle test\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n  \nThere you have it! Your own smart contract deployed on the blockchain :)\n\n###  5\\. Working with Remix IDE\n\nRemix is an online IDE used to develop smart contracts using the Solidity\nlanguage.\n\nLet's try `HelloWorld.sol` smart contract in the online Remix Ethereum IDE.\n\n  * Open Remix IDE on your browser.\n  * Select on the `New File` and choose the `Solidity` environment.\n\n  * Now, you will get a code section. Write your contract logic in the code window and click the Compile button to compile it.\n\n  * Click on the Deploy button to execute the code.\n\n  * Click on the method calls under the deployed contracts to run the program.\n  * Click on the console to see the result.\n\n  * Click on the Debug button to debug the contract. It shows each function call and variable assignments.\n\nThanks for reading this article.\n\nIf you enjoyed this article, please click on the heart button \u2665 and share to\nhelp others find it!\n\nThe full source code of this tutorial is available on\nhttps://github.com/codemaker2015/solidity-smart-contract-examples\n\nHere are some useful links,\n\n  * https://docs.soliditylang.org/en/v0.8.11\n  * https://remix-project.org/\n  * https://github.com/ethereum/remix-desktop/releases\n\nOriginally posted on Medium -  \nCreate and deploy your first smart contract with Solidity\n\n##  Top comments (0)\n\nSubscribe\n\nPersonal Trusted User\n\nCreate template\n\nTemplates let you quickly answer FAQs or store snippets for re-use.\n\nSubmit Preview Dismiss\n\nCode of Conduct \u2022 Report abuse\n\nAre you sure you want to hide this comment? It will become hidden in your\npost, but will still be visible via the comment's permalink.\n\nHide child comments as well\n\nConfirm\n\nFor further actions, you may consider blocking this person and/or reporting\nabuse\n\n## Read next\n\n### Retrieving Implementation Contract Addresses from Proxy Contracts in EVM\nNetworks\n\nMr. G - Nov 9 '23\n\n### Social Protocols on Arweave\n\nK - Nov 6 '23\n\n### Supercharge Your Trading: Footprint's Batch Download for Easier\nBacktesting\n\nFootprint Analytics - Nov 29 '23\n\n### Near Blockchain Development Guide For Ethereum Developers\n\nRishabhraghwendra18 - Oct 22 '23\n\nVishnu Sivan\n\nFollow\n\nSeasoned professional, forward looking software engineer with 4+ years of\nexperience in creating and executing innovative solutions in immersive field\nto enhance business productivity.\n\n  * Location \n\nErnakulam, Kerala, India\n\n  * Education \n\nMar Athanasius College Kothamangalam\n\n  * Work \n\nGame Development | Web Development | Mobile App Development | AI | AR, VR |\nJumber, Jumbo Games\n\n  * Joined \n\nApr 12, 2022\n\n###  More from Vishnu Sivan\n\nDevelop your first Dapp with Web3.js\n\n#blockchain #web3 #smartcontract #beginners\n\nOnce suspended, codemaker2015 will not be able to comment or publish posts\nuntil their suspension is removed.\n\nNote:\n\nSubmit & Suspend\n\nOnce unsuspended, codemaker2015 will be able to comment and publish posts\nagain.\n\nNote:\n\nSubmit & Unsuspend\n\nOnce unpublished, all posts by codemaker2015 will become hidden and only\naccessible to themselves.\n\nIf codemaker2015 is not suspended, they can still re-publish their posts from\ntheir dashboard.\n\nNote:\n\nUnpublish all posts\n\nOnce unpublished, this post will become invisible to the public and only\naccessible to Vishnu Sivan.\n\nThey can still re-publish the post if they are not suspended.\n\nUnpublish Post\n\nThanks for keeping DEV Community safe. Here is what you can do to flag\ncodemaker2015:\n\nMake all posts by codemaker2015 less visible\n\ncodemaker2015 consistently posts content that violates DEV Community's code of\nconduct because it is harassing, offensive or spammy.\n\nReport other inappropriate conduct\n\nConfirm Flag\n\nUnflagging codemaker2015 will restore default visibility to their posts.\n\nConfirm Unflag\n\nDEV Community \u2014 A constructive and inclusive social network for software\ndevelopers. With you every step of your journey.\n\n  * Home \n  * Podcasts \n  * Videos \n  * Tags \n  * FAQ \n  * Forem Shop \n  * Advertise on DEV \n  * About \n  * Contact \n  * Guides \n  * Software comparisons \n\n  * Code of Conduct \n  * Privacy Policy \n  * Terms of use \n\nBuilt on Forem \u2014 the open source software that powers DEV and other inclusive\ncommunities.\n\nMade with love and Ruby on Rails. DEV Community \u00a9 2016 - 2024.\n\nWe're a place where coders share, stay up-to-date and grow their careers.\n\nLog in  Create account\n\n**Some content on our site requires cookies for personalization.**\n\nRead our full privacy policy to learn more.\n\nDismiss  Accept Cookies\n\n",
    "links": "[{\"link\": \"https://dev.to/\", \"text\": \"\"}, {\"link\": \"https://dev.to/search\", \"text\": \"\"}, {\"link\": \"https://dev.to/enter\", \"text\": \"\\n              Log in\\n            \"}, {\"link\": \"https://dev.to/enter?state=new-user\", \"text\": \"\\n            Create account\\n          \"}, {\"link\": \"https://dev.to/report-abuse\", \"text\": \"Report Abuse\"}, {\"link\": \"https://dev.to/codemaker2015\", \"text\": \"\"}, {\"link\": \"https://dev.to/codemaker2015\", \"text\": \"Vishnu Sivan\"}, {\"link\": \"https://dev.to/t/blockchain\", \"text\": \"\"}, {\"link\": \"https://dev.to/t/solidity\", \"text\": \"\"}, {\"link\": \"https://dev.to/t/dapps\", \"text\": \"\"}, {\"link\": \"https://dev.to/t/smartcontracts\", \"text\": \"\"}, {\"link\": \"https://dev.to/settings/response-templates\", \"text\": \"\\n        Create template\\n      \"}, {\"link\": \"https://dev.to/404.html\", \"text\": \"Dismiss\"}, {\"link\": \"https://dev.to/code-of-conduct\", \"text\": \"Code of Conduct\"}, {\"link\": \"https://dev.to/report-abuse\", \"text\": \"Report abuse\"}, {\"link\": \"https://dev.to/report-abuse\", \"text\": \"reporting abuse\"}, {\"link\": \"https://dev.to/mister_g/retrieving-implementation-contract-addresses-from-proxy-contracts-in-evm-networks-38fm\", \"text\": \"\"}, {\"link\": \"https://dev.to/fllstck/social-protocols-on-arweave-486a\", \"text\": \"\"}, {\"link\": \"https://dev.to/footprint-analytics/supercharge-your-trading-footprints-batch-download-for-easier-backtesting-3j2h\", \"text\": \"\"}, {\"link\": \"https://dev.to/rishabhraghwendra/near-blockchain-development-guide-for-ethereum-developers-1f1n\", \"text\": \"\"}, {\"link\": \"https://dev.to/codemaker2015\", \"text\": \"\"}, {\"link\": \"https://dev.to/codemaker2015\", \"text\": \"Vishnu Sivan\"}, {\"link\": \"https://dev.to/codemaker2015/develop-your-first-dapp-with-web3js-3mnc\", \"text\": \"\"}, {\"link\": \"https://dev.to/\", \"text\": \"DEV Community\"}, {\"link\": \"https://dev.to/\", \"text\": \"\\n      Home\\n    \"}, {\"link\": \"https://dev.to/pod\", \"text\": \"\\n      Podcasts\\n    \"}, {\"link\": \"https://dev.to/videos\", \"text\": \"\\n      Videos\\n    \"}, {\"link\": \"https://dev.to/tags\", \"text\": \"\\n      Tags\\n    \"}, {\"link\": \"https://dev.to/faq\", \"text\": \"\\n      FAQ\\n    \"}, {\"link\": \"https://dev.to/advertise\", \"text\": \"\\n      Advertise on DEV\\n    \"}, {\"link\": \"https://dev.to/about\", \"text\": \"\\n      About\\n    \"}, {\"link\": \"https://dev.to/contact\", \"text\": \"\\n      Contact\\n    \"}, {\"link\": \"https://dev.to/guides\", \"text\": \"\\n      Guides\\n    \"}, {\"link\": \"https://dev.to/software-comparisons\", \"text\": \"\\n      Software comparisons\\n    \"}, {\"link\": \"https://dev.to/code-of-conduct\", \"text\": \"\\n      Code of Conduct\\n    \"}, {\"link\": \"https://dev.to/privacy\", \"text\": \"\\n      Privacy Policy\\n    \"}, {\"link\": \"https://dev.to/terms\", \"text\": \"\\n      Terms of use\\n    \"}, {\"link\": \"https://dev.to/enter\", \"text\": \"\\n        Log in\\n      \"}, {\"link\": \"https://dev.to/enter?state=new-user\", \"text\": \"\\n        Create account\\n      \"}, {\"link\": \"https://dev.to/privacy\", \"text\": \"privacy policy\"}]"
}