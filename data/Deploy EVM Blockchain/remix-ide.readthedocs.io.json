{
    "summary": "Remix - Ethereum IDE\n\nlatest\n\nIntroduction\n\n  * Navigating Remix\n  * Using Remix Safely\n  * Tutorials in Remix\n  * Remix URLs & Links with Parameters\n  * FAQ\n\nCore Modules\n\n  * File Explorer\n  * Search in Files\n  * Plugin Manager\n  * Settings\n  * Editor\n  * Terminal\n  * Remixd: Access your Local Filesystem\n\nSolidity modules\n\n  * Solidity Compiler\n  * Deploy & Run\n    * Environment\n    * Forking chains in Remix\n      * Custom Fork\n    * More about External HTTP Provider\n    * Account:\n    * Gas Limit:\n    * Value:\n    * Deploy & AtAddress\n    * Using the ABI with AtAddress\n    * Pending Instances\n    * Using the Recorder\n      * scenario.json\n  * Deploy & Run (part 2)\n  * Deploy & Run Proxy Contracts\n  * Debugger\n  * Solidity Analyzers\n\nUnit Testing\n\n  * Unit Testing Plugin\n  * Command Line Interface\n  * Remix Assert Library\n  * Testing by Example\n  * Testing using Chai & Mocha\n\nExternal Tool Integrations\n\n  * Hardhat\n  * Truffle\n  * Slither\n  * Foundry\n\nGuides\n\n  * Creating and Deploying a Contract\n  * Debugging Transactions\n  * Importing & Loading Source Files in Solidity\n  * Contract Verification\n  * Running Scripts\n  * Frequently Asked Scripts\n\nAdvanced\n\n  * Compilation Artifacts\n  * Remix Commands\n\nMiscellaneous\n\n  * Plugin List\n  * Remix as code viewer\n  * Code Contribution Guide\n  * Community Support\n\n__Remix - Ethereum IDE\n\n  *   * Deploy & Run\n  * Edit on GitHub\n\n* * *\n\n# Deploy & Run\uf0c1\n\nThe Deploy & Run module is for sending transactions to the current\n**Environment**.\n\nFor deploying, you need to have a contract compiled. To check that there is a\ncompiled contract, find the **CONTRACT** select box (which is under the VALUE\ninput field), you can use this module.\n\nIf nothing is there, you need to compile a file. If you do not see the\ncontract you want, you need to select a contract in the editor to make it\nactive.\n\n## Environment\uf0c1\n\n  * `Remix VM (Merge)` : Connects to a sandbox blockchain in the browser. The Remix VM (previously called JavaScript VM) is its own \u201cblockchain\u201d and on each reload the old chain will be cleared and a new blockchain will be started. **The old one will not be saved**. Merge refers to the fork of Ethereum when the Merge occurred. This fork is also known as the **Paris** fork.\n\n  * `Remix VM (London)` : Same as above except this chain is using the London fork of Ethereum.\n\n  * `Remix VM (Berlin)` : Same as above except this chain is using the Berlin fork of Ethereum.\n\n  * `Remix VM - Mainnet fork` : This will fork the Ethereum mainnet and will load it into the Remix VM. It is useful for developing contracts that need to access deployed mainnet contracts. (See below for more info about Forking)\n\n  * `Remix VM - Goerli fork` : Same as above except this forks the Goerli testnet. (See below for more info about Forking)\n\n  * `Remix VM - Sepolia fork` : Same as above except this forks the Sepolia testnet. (See below for more info about Forking)\n\n  * `Remix VM - Custom fork` : Forks a chain, at block number, and in an EVM version of your choice. (See below for more info about Forking)\n\n  * `Injected Provider - provider name`: Connects Remix to an injected web3 provider. The most common injected provider is `Metamask`.\n\n  * `Custom - External HTTP Provider`: Remix will connect to a remote node. You will need to provide the URL to the selected provider: geth, parity or any Ethereum client. This was previously called **Web3 Provider**. (See below for more info about External HTTP Provider)\n\n  * `Dev - Hardhat Provider`: Connects Remix to a local Hardhat test chain.\n\n  * `Dev - Ganache Provider`: Connects Remix to a local Truffle Ganache test chain.\n\n  * `Dev - Foundry Provider`: Connects Remix to a local Foundry Anvil test chain.\n\n  * `L2 - Optimism Provider`: Connects Remix to an Injected Provider (usually Metamask) with the settings for the mainnet of Optimism.\n\n  * `L2 - Arbitrum One Provider`: Connects Remix to an Injected Provider (usually Metamask) with the settings for the Arbitrum One network.\n\n  * `WalletConnect`: Connects Remix to a wallet on a mobile device.\n\n## Forking chains in Remix\uf0c1\n\nForking is a great technique for developing a contract that interacts with\ndeployed contracts on a specific chain. By bringing in a chain to the Remix\nVM, you\u2019ll have the 10 accounts loaded with 100ETH.\n\nCareful though, if you refresh the browser, you\u2019ll lose the forked chain.\n\n### Custom Fork\uf0c1\n\nThe Custom fork option allows you to specify a chain\u2019s RPC server, a block\nnumber, and an EVM version.\n\nYou can get the **Node URL** from chainlist.org. If the chain does not load,\nyou may need to choose a different RPC server. You will also need to choose an\nEVM version appropriate to the block number. So, if you choose a very low\nblock number, the EVM with the Merge \u201cflavor\u201d won\u2019t work because this version\nof the EVM came out later.\n\n## More about External HTTP Provider\uf0c1\n\nIf you are using Geth & https://remix.ethereum.org, please use the following\nGeth command to allow requests from Remix:\n\n    \n    \n    geth --http --http.corsdomain https://remix.ethereum.org\n    \n\nAlso see Geth Docs about the http server\n\nTo run Remix using https://remix.ethereum.org & a local test node, use this\nGeth command:\n\n    \n    \n    geth --http --http.corsdomain=\"https://remix.ethereum.org\" --http.api web3,eth,debug,personal,net --vmdebug --datadir <path/to/local/folder/for/test/chain> --dev console\n    \n\nIf you are using remix-alpha or a local version of remix - replace the url of\nthe \u2013http.corsdomain with the url of Remix that you are using.\n\nTo run Remix Desktop & a local test node, use this Geth command:\n\n    \n    \n    geth --http --http.corsdomain=\"package://a7df6d3c223593f3550b35e90d7b0b1f.mod\" --http.api web3,eth,debug,personal,net --vmdebug --datadir <path/to/local/folder/for/test/chain> --dev console\n    \n\nAlso see Geth Docs on Dev mode\n\nThe Web3 Provider Endpoint for a local node is **http://localhost:8545**\n\n* * *\n\n**WARNING:** Don\u2019t get lazy. It is a bad idea to use the Geth flag\n**\u2013http.corsdomain** with a wildcard: `--http.corsdomain *`\n\nIf you put the wildcard `*`, it means everyone can request the node. Whereas,\nif you put a URL, it restricts the urls to just that one - e.g.\n`--http.corsdomain 'https://remix-alpha.ethereum.org'`\n\nOnly use `--http.corsdomain *` when using a **test chain** AND using only\n**test accounts**. For real accounts or on the mainchain **specify the url**.\n\n* * *\n\n## Account:\uf0c1\n\n  * Account: the list of accounts associated with the current environment (and their associated balances). On the Remix VM, you have a choice of 5 accounts. If using Injected Web3 with MetaMask, you need to change the account in MetaMask.\n\n## Gas Limit:\uf0c1\n\n  * This sets the maximum amount of gas that will be allowed for all the transactions created in Remix.\n\n## Value:\uf0c1\n\n  * This sets the amount of ETH, WEI, GWEI etc that is sent to a contract or a payable function.   \n**Note:** payable functions have a red button.\n\nThe **Value** field is always reset to 0 after each transaction execution.  \nThe **Value** field is **NOT** for gas.\n\n## Deploy & AtAddress\uf0c1\n\n  * In the image above, the select box is set to **Ballot**. This select box will contain the list of compiled contracts.\n\n  * `Deploy` sends a transaction that deploys the selected contract. When the transaction is mined, the newly created instance will be added (this might take several seconds).   \n**Note:** If the contract\u2019s constructor function has parameters, you need to\nspecify them.\n\n  * `At Address` is used to access a contract that has already been deployed. Because the contract is already deployed, accessing a contract with **AtAddress** does not cost gas.\n\n**Note:** When using AtAddress, be sure you trust the contract at that\naddress.\n\nTo use **AtAddress** , you need to have the **source code** or **ABI** of the\ndeployed contract **in the active tab** of the editor. When using the source\ncode, it must be compiled with the same compilation settings as the deployed\ncontract that you are trying to access.\n\n## Using the ABI with AtAddress\uf0c1\n\nThe **ABI** is a JSON array which describes the contract\u2019s interface.\n\nTo interact with a contract using the ABI, create a new file in Remix with\nextension * **.abi** and copy the ABI content to it.\n\nMake sure this file is the active tab in the editor. Then, in the field next\nto `At Address`, input the contract\u2019s address and click on `At Address`. If\nsuccessful, an instance of the contract will appear below - in the list of\n**Deployed Contracts**.\n\n**Note:** To generate the ABI, in the Solidity compiler, after a contract is\ncompiled, click on the **Compilation Details** button. A modal will come up\nwith that contains the ABI among other info.\n\n## Pending Instances\uf0c1\n\nValidating a transaction takes several seconds. During this time, the GUI\nshows it in a pending mode. When the transaction is mined, the number of\npending transactions is updated and the transaction is added to the log (see\nterminal).\n\n## Using the Recorder\uf0c1\n\nThe Recorder is a tool used to save a bunch of transactions in a JSON file and\nre-run them later either in the same environment or in another.\n\nSaving to the JSON file (by default it\u2019s called scenario.json) allows one to\neasily check the transaction list, tweak input parameters, change linked\nlibrary, etc\u2026\n\nThere are many use cases for the recorder.\n\nFor instance:\n\n  * After having coded and tested contracts in a constrained environment (like the Remix VM), you could then change the environment and redeploy it to a more realistic environment like a public testnet or to a Geth node. By using the generated **scenario.json** file, you will be using all the same settings that you used in the Remix VM. And this means that you won\u2019t need to click the interface 100 times or whatever to get the state that you achieved originally. So the recorder could be a tool to protect your sanity.\n\nYou can also change the settings in the scenario.json file to customize the\nplayback.\n\n  * Deploying contract does often require more than creating one transaction and so the recorder will automate this deployment.\n\n  * Working in a dev environment often requires setting up the state in the first place.\n\nWhen checked, the option `Run transactions using the last compilation result`\nallows you to develop a contract and easily set the state using **the latest\ncompiled versions of the contracts.**\n\n### scenario.json\uf0c1\n\nTo create this file in the recorder, you first of course need to have run some\ntransactions. In the image above - it has a `0` next to **Transactions\nRecorded**. So this isn\u2019t the right moment to save transactions because - well\nbecause there aren\u2019t any. Each time you make a transaction, that number will\nincrement. Then when you are ready, click the floppy disk icon and the\nscenario.json file will be created.\n\nThe JSON file below is an example of the scenario.json file.\n\nIn it, 3 transactions are executed:\n\nThe first corresponds to the deployment of the lib `testLib`.\n\nThe second corresponds to the deployment of the contract `test` with the first\nparameter of the constructor set to 11. That contract depends on a library.\nThe linkage is done using the property `linkReferences`. In that case we use\nthe address of the previously created library : `created{1512830014773}`. The\nnumber is the id (timestamp) of the transaction that led to the creation of\nthe library.\n\nThe third record corresponds to the call to the function `set` of the contract\n`test` (the property to is set to: `created{1512830015080}`) . Input\nparameters are `1` and `0xca35b7d915458ef540ade6068dfe2f44e8fa733c`\n\nAll these transactions are created using the value of the accounts\n`account{0}`.\n\n    \n    \n    {\n    \"accounts\": {\n        \"account{0}\": \"0xca35b7d915458ef540ade6068dfe2f44e8fa733c\"\n    },\n    \"linkReferences\": {\n        \"testLib\": \"created{1512830014773}\"\n    },\n    \"transactions\": [\n        {\n        \"timestamp\": 1512830014773,\n        \"record\": {\n            \"value\": \"0\",\n            \"parameters\": [],\n            \"abi\": \"0xbc36789e7a1e281436464229828f817d6612f7b477d66591ff96a9e064bcc98a\",\n            \"contractName\": \"testLib\",\n            \"bytecode\": \"60606040523415600e57600080fd5b60968061001c6000396000f300606060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680636d4ce63c146044575b600080fd5b604a6060565b6040518082815260200191505060405180910390f35b6000610d809050905600a165627a7a7230582022d123b15248b8176151f8d45c2dc132063bcc9bb8d5cd652aea7efae362c8050029\",\n            \"linkReferences\": {},\n            \"type\": \"constructor\",\n            \"from\": \"account{0}\"\n        }\n        },\n        {\n        \"timestamp\": 1512830015080,\n        \"record\": {\n            \"value\": \"100\",\n            \"parameters\": [\n            11\n            ],\n            \"abi\": \"0xc41589e7559804ea4a2080dad19d876a024ccb05117835447d72ce08c1d020ec\",\n            \"contractName\": \"test\",\n            \"bytecode\": \"60606040526040516020806102b183398101604052808051906020019091905050806000819055505061027a806100376000396000f300606060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632f30c6f61461006757806338cc48311461009e57806362738998146100f357806387cc10e11461011c575b600080fd5b61009c600480803590602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610145565b005b34156100a957600080fd5b6100b1610191565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156100fe57600080fd5b6101066101bb565b6040518082815260200191505060405180910390f35b341561012757600080fd5b61012f6101c4565b6040518082815260200191505060405180910390f35b8160008190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008054905090565b600073__browser/ballot.sol:testLib____________636d4ce63c6000604051602001526040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b151561022e57600080fd5b6102c65a03f4151561023f57600080fd5b505050604051805190509050905600a165627a7a72305820e0b2510bb2890a0334bfe5613d96db3e72442e63b514cdeaee8fc2c6bbd19d3a0029\",\n            \"linkReferences\": {\n            \"browser/ballot.sol\": {\n                \"testLib\": [\n                {\n                    \"length\": 20,\n                    \"start\": 511\n                }\n                ]\n            }\n            },\n            \"name\": \"\",\n            \"type\": \"constructor\",\n            \"from\": \"account{0}\"\n        }\n        },\n        {\n        \"timestamp\": 1512830034180,\n        \"record\": {\n            \"value\": \"1000000000000000000\",\n            \"parameters\": [\n            1,\n            \"0xca35b7d915458ef540ade6068dfe2f44e8fa733c\"\n            ],\n            \"to\": \"created{1512830015080}\",\n            \"abi\": \"0xc41589e7559804ea4a2080dad19d876a024ccb05117835447d72ce08c1d020ec\",\n            \"name\": \"set\",\n            \"type\": \"function\",\n            \"from\": \"account{0}\"\n        }\n        }\n    ],\n    \"abis\": {\n        \"0xbc36789e7a1e281436464229828f817d6612f7b477d66591ff96a9e064bcc98a\": [\n        {\n            \"constant\": true,\n            \"inputs\": [],\n            \"name\": \"get\",\n            \"outputs\": [\n            {\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n            ],\n            \"payable\": false,\n            \"stateMutability\": \"view\",\n            \"type\": \"function\"\n        }\n        ],\n        \"0xc41589e7559804ea4a2080dad19d876a024ccb05117835447d72ce08c1d020ec\": [\n        {\n            \"constant\": true,\n            \"inputs\": [],\n            \"name\": \"getInt\",\n            \"outputs\": [\n            {\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n            ],\n            \"payable\": false,\n            \"stateMutability\": \"view\",\n            \"type\": \"function\"\n        },\n        {\n            \"constant\": true,\n            \"inputs\": [],\n            \"name\": \"getFromLib\",\n            \"outputs\": [\n            {\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n            ],\n            \"payable\": false,\n            \"stateMutability\": \"view\",\n            \"type\": \"function\"\n        },\n        {\n            \"constant\": true,\n            \"inputs\": [],\n            \"name\": \"getAddress\",\n            \"outputs\": [\n            {\n                \"name\": \"\",\n                \"type\": \"address\"\n            }\n            ],\n            \"payable\": false,\n            \"stateMutability\": \"view\",\n            \"type\": \"function\"\n        },\n        {\n            \"constant\": false,\n            \"inputs\": [\n            {\n                \"name\": \"_t\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"name\": \"_add\",\n                \"type\": \"address\"\n            }\n            ],\n            \"name\": \"set\",\n            \"outputs\": [],\n            \"payable\": true,\n            \"stateMutability\": \"payable\",\n            \"type\": \"function\"\n        },\n        {\n            \"inputs\": [\n            {\n                \"name\": \"_r\",\n                \"type\": \"uint256\"\n            }\n            ],\n            \"payable\": true,\n            \"stateMutability\": \"payable\",\n            \"type\": \"constructor\"\n        }\n        ]\n    }\n    }\n    \n\nPrevious Next\n\n* * *\n\n\u00a9 Copyright 2019-23, Remix;. Revision `10f1087f`.  Last updated on Feb 07,\n2024.\n\nBuilt with Sphinx using a theme provided by Read the Docs.\n\nRead the Docs v: latest\n\nLanguages\n\n     en\n     zh-cn\n     fr\n     it\n     ru\n     es\n\nVersions\n\n     latest\n\nOn Read the Docs\n\n     Project Home\n     Builds\n     Downloads\n\nOn GitHub\n\n     View\n     Edit\n\nSearch\n\n    \n\n* * *\n\nHosted by Read the Docs \u00b7  Privacy Policy\n\n",
    "links": "[{\"link\": \"https://remix-ide.readthedocs.io/en/latest/run.html\", \"text\": \"en\"}, {\"link\": \"https://remix-ide.readthedocs.io/en/latest/run.html\", \"text\": \"latest\"}, {\"link\": \"https://readthedocs.org/projects/remix-ide/\", \"text\": \"Project Home\"}, {\"link\": \"https://readthedocs.org/projects/remix-ide/builds/\", \"text\": \"Builds\"}, {\"link\": \"https://readthedocs.org/projects/remix-ide/downloads/\", \"text\": \"Downloads\"}]"
}