{
    "summary": "Can we use cookies?\n\nThis website will use cookies to enhance the user experience.\n\nDeclineAccept\n\n  * Products\n\nZilliz Cloud\n\nFully-managed vector database service designed for speed, scale and high\nperformance.\n\nMilvus\n\nOpen-source vector database built for billion-scale vector similarity search.\n\n    * Cloud vs. Milvus\n    * Benchmark\n    * Open Source\n    * Integrations\n    * Support Portal\n\nHow to Select the Most Appropriate CU Type and Size for Your Business?Learn\nMore\n\n  * Pricing\n\n    * Pricing PlanFlexible pricing options for every team on any budget\n    * CalculatorEstimate your cost\n    * MarketplaceSubscribe on AWS Marketplace\n\nFree TierLearn More\n\n  * Developers\n\nDocumentation\n\nThe Zilliz Cloud Developer Hub where you can find all the information to work\nwith Zilliz Cloud\n\nLearn More\n\n    * Learn\n    * Community\n\nCommunity Office HoursSave your spot now\n\n  * Resources\n\n    * Blog\n    * Whitepapers\n    * Webinars\n    * Trainings\n    * Events\n\nWhy Vector Databases Matter for Unstructured DataDownload Whitepaper\n\n  * Solutions\n\nBy Use CaseRetrieval Augmented GenerationView all use cases\n\nHow Short-video Platform Likee Removes Duplicate Videos with MilvusRead all\ncustomer stories\n\nContact usLog inGet Started Free\n\nBack\n\n  * Vector Database 101\n\n### What is a Vector Database? - Zilliz\n\nOct 23, 202310 min read\n\nFrank Liu\n\n# What is a Vector Database\n\nWelcome back to Vector Database 101.\n\nIn the previous tutorial, we took a quick look at the ever-increasing amount\nof data that is being generated on a daily basis. We then covered how these\nbits of data can be split into structured/semi-structured and unstructured\ndata types, the differences between them, and how modern machine learning can\nbe used to understand unstructured data through embeddings. Finally, we\nbriefly touched upon unstructured data processing via ANN search.\n\nThrough all of this information, it\u2019s now clear that the ever-increasing\namount of unstructured data requires a paradigm shift and a new category of\ndatabase management system - the vector database.\n\n## Vector databases vs traditional databases\n\nBefore we delve in, let's briefly discuss the key differences between vector\ndatabases and traditional databases.\n\nTraditional relational database systems excel at managing structured data with\npredefined formats and executing precise search operations. In contrast,\nvector databases specialize in storing and retrieving unstructured data types,\nsuch as images, audio, videos, and textual content, through high-dimensional\nnumerical representations known as vector embeddings.\n\nVector databases are used to perform similarity searches using techniques like\nthe Approximate Nearest Neighbor (ANN) algorithm. They are popular in building\nwidespread applications in various domains, including recommender systems,\nchatbots, and tools for searching for similar images, videos, and audio\ncontent. With the rise of AI and large language models (LLMs) like ChatGPT,\nvector databases are also beneficial in addressing LLM hallucinations.\n\n## What is a Vector Database?\n\nA vector database is a fully managed, no-frills solution for storing, indexing\nand searching across a massive dataset of unstructured data that leverages the\npower of embeddings from machine learning models.\n\n## Vector databases from 1000 feet\n\nGuess how many curators it took to label the now-famous _ImageNet_ dataset.\nReady for the answer?\n\n_25000_ people (that's a lot).\n\nBeing able to search across images, video, text, audio, and other forms of\nunstructured data via their content rather than human-generated labels or tags\nis exactly what vector databases were meant to solve. When combined with\npowerful machine learning models, these databases like Milvus have the ability\nto revolutionize e-commerce solutions, recommendation systems, semantic\nsearch, computer security, pharmaceuticals, and many other industries.\n\nLet\u2019s think about it from a user perspective. What good is a piece of\ntechnology without strong usability and a good user API? In concert with the\nunderlying technology, multi-tenancy and usability are also incredibly\nimportant attributes. Let\u2019s list out all of the vector database features to\nlook out for (many of these features overlap with those of databases for\nstructured/semi-structured data):\n\n  * **Scalability and tunability** : As the number of unstructured data elements stored in a vector database grows into the hundreds of millions or billions, horizontal scaling across multiple nodes becomes paramount (scaling up by manually inserting sticks of RAM into a server rack every 3 months is no fun). Furthermore, differences in insert rate, query rate, and underlying hardware may result in different application needs, making overall system tunability mandatory for the best vector databases.\n\n  * **Multi-tenancy and data isolation** : Supporting multiple users is an obvious feature for all database systems. However, going guns blazing and creating a new vector database for every new user will probably turn out poorly for everyone. Parallel to this notion is data isolation - the idea that any inserts, deletes, or queries made to one collection in a database should be invisible to the rest of the system unless the collection owner explicitly wishes to share the information.\n\n  * **A complete suite of APIs** : A database without a full suite of APIs and SDKs is, frankly speaking, not a real database. For example, Milvus maintains Python, Node, Go, and Java SDKs for communicating with and administering a Milvus vector database.\n\n  * **An intuitive user interface/administrative console** : User interfaces can help significantly reduce the learning curve associated with VectorDBs. These interfaces also expose new features and tools that would otherwise be inaccessible.\n\nPhew. That was quite a bit of info, so we\u2019ll summarize it right here: a vector\ndatabase should have the following features: 1) scalability and tunability, 2)\nmulti-tenancy and data isolation, 3) a complete suite of APIs, and 4) an\nintuitive user interface/administrative console. In the next two sections,\nwe\u2019ll follow up on this concept by comparing vector databases versus vector\nsearch libraries and vector search plugins, respectively.\n\n## How does a vector database work?\n\nVector databases like Milvus and Zilliz (fully managed Milvus) are purpose-\nbuilt to store, process, and search unstructured data through the use of\nvector embeddings. In other words, vector databases mainly operate on vector\nembeddings and closely collaborate with machine learning models that transform\nunstructured data into embeddings.\n\nBelow is a typical pipeline for a vector database (Here, we use Zilliz as an\nexample).\n\n  1. A machine learning model transforms all types of unstructured data into vector embeddings.\n  2. Vector embeddings are stored in Zilliz Cloud.\n  3. Users perform a query.\n  4. The machine learning model converts the query into vector embeddings.\n  5. Zilliz Cloud compares the distance between the query vector and the vector held in the dataset using an approximate nearest neighbor (ANN) algorithm and finds the Top-K results most relevant to the query.\n  6. Zilliz Cloud returns the results to the user.\n\n## Technical challenges of vector databases\n\nEarlier in this tutorial, I listed the desired features a vector database\nshould implement, before comparing vector databases to vector search libraries\nand vector search plugins. Now, let\u2019s briefly go over some high-level\ntechnical challenges of vector databases. In future tutorials, we\u2019ll provide\nan overview of how Milvus tackles each of these, in addition to how these\ntechnical decisions improve Milvus\u2019 performance over other open-source vector\ndatabases.\n\nPicture an airplane. The airplane itself contains a number of interconnected\nmechanical, electrical, and embedded systems, all working on harmony to\nprovide us with a smooth and pleasurable in-flight experience. Likewise, a\nVectorDB are composed of a number of evolving software components. Roughly\nspeaking, these can be broken down into the storage, the index, and the\nservice. Although these three components are tightly integrated[1], companies\nsuch as Snowflake have shown the broader storage industry that \"shared\nnothing\" database architectures are arguably superior to the traditional\n\"shared storage\" cloud database models. Thus, the first technical challenge\nassociated with these databases is _designing a flexible and scalable data\nmodel_.\n\nGreat, so we have a data model. What's next? With data already stored in a\nvector database, being able to search across that data, i.e. querying and\nindexing, is the next important component. The compute-heavy nature of machine\nlearning and multi-layer neural networks has allowed GPUs, NPUs/TPUs, FPGAs,\nand other general purpose compute hardware to flourish. Vector indexing and\nquerying is also compute-heavy, operating at maximum speed and efficiency when\nrun on accelerators. This diverse set of compute resources gives way to the\nsecond main technical challenge, _developing a heterogeneous computing\narchitecture_.\n\nWith a data model and architecture in place, the last step is making sure your\napplication can, well, read from the database - this ties closely into the API\nand user interface bullet points mentioned in the first section. While a new\ncategory of database necessitates a new architecture in order to extract\nmaximal performance at minimal cost, the majority of vector database users are\nstill acclimated to traditional CRUD operations (e.g. `INSERT`, `SELECT`,\n`UPDATE`, and `DELETE` in SQL). Therefore, the final primary challenge is\n_developing a set of APIs and GUIs that leverage existing user interface\nconventions_ while maintaining compatibility with the underlying architecture.\n\nNote how each of the three components corresponds to a primary technical\nchallenge. With that being said, there is no one-size-fits-all vector database\narchitecture. The best vector databases will fulfill all of these technical\nchallenges by focusing on delivering the features mentioned in the first\nsection.\n\n## Advantages of vector databases\n\nVector databases offer several advantages over traditional databases for use\ncases that involve similarity search, machine learning, and AI applications.\nHere are some of the benefits of vector databases:\n\n  * High-dimensional search: efficiently perform similarity searches on high-dimensional vectors, commonly used in machine learning and AI applications, such as image recognition, natural language processing, and recommendation systems.\n  * Scalability: scale horizontally, efficiently storing and retrieving large amounts of vector data. Scalability is significant for applications that require real-time search and retrieval of large amounts of data.\n  * Flexibility: handle various vector data types, including sparse and dense vectors. They can also handle multiple data types, including numerical, text, and binary.\n  * Performance: perform similarity searches efficiently, often providing faster search times than traditional databases.\n  * Customizable indexing: allow custom indexing schemes for specific use cases and data types.\n\nOverall, they offer significant advantages for applications that involve\nsimilarity search and machine learning, providing fast and efficient search\nand retrieval of high-dimensional vector data.\n\n## What is the fastest vector database\n\nANN-Benchmarks is a benchmarking environment to evaluate the performance of\nvarious vector databases and nearest neighbor search algorithms. The main\nfunctions of ANN Benchmarks include the following:\n\n  * Dataset and parameter specification: The benchmark provides a variety of datasets of different sizes and dimensions, along with a set of parameters for each dataset, such as the number of neighbors to search for and the distance metric to use.\n  * Search recall calculation: The benchmark calculates the search recall, the proportion of queries for which the true nearest neighbors are found among the k returned neighbors. Search recall is a metric for evaluating the accuracy of nearest-neighbor search algorithms.\n  * RPS calculation: The benchmark also calculates the RPS (queries per second), the rate at which the vector database or search algorithm can process queries. This metric is vital for evaluating the speed and scalability of the system.\n\nUsing the ANN Benchmarks, users can compare the performance of different\nvectordbs and search algorithms under a standardized set of conditions, making\nit easier to identify the most suitable option for a particular use case.\n\n## Vector databases comparison\n\nNo matter what your semantic search use case is, your application will require\nstoring lots of vector embeddings while being able to retrieve the most\nrelevant vectors with low latency. You also want to choose a vector database\nthat you can use long-term and adhere to the compliance requirements of the\ntarget application.\n\nWhen comparing a vector database to an alternative, you should consider these\nfactors: architecture, scalability, performance, use cases, and costs. Each\nalternative database may have different strengths and weaknesses in these\nareas, so evaluating them based on specific requirements and priorities is\nessential. The following is a list of resources that will help you choose the\nright tool for your use case:\n\n  * Open Source Vector Database Comparison\n  * Vector Database benchmark \n  * Milvus vs Pinecone (and Zilliz vs Pinecone)\n\n## Wrapping up\n\nIn this tutorial, we took a quick tour of vector databases. Specifically, we\nlooked at 1) what features go into a mature example, 2) how a vector database\ndiffers from vector search libraries, 3) how a vector database differs from\nvector search plugins in traditional databases or search systems, and 4) the\nkey challenges associated with building a vector database.\n\nThis tutorial is not meant to be a deep dive, nor is it meant to show how it\ncan be used in applications. Rather, the goal is to provide an overview. This\nis where your journey truly begins!\n\nIn the next tutorial, we\u2019ll provide an introduction to Milvus, the world\u2019s\nmost popular open-source vector database:\n\n  * Provide a brief history of Milvus, including the most important question - where does the name come from!\n\n  * Cover how Milvus 1.0 differs from Milvus 2.0 and where the future of Milvus lies.\n\n  * Discuss the differences between Milvus and other vectorDBs such as Google Vertex AI\u2019s Matching Engine.\n\n  * Go over some common vector database applications.\n\n## Take another look at the Vector Database 101 courses\n\n  1. Introduction to Unstructured Data\n  2. What is a Vector Database?\n  3. Comparing Vector Databases, Vector Search Libraries, and Vector Search Plugins\n  4. Introduction to Milvus\n  5. Milvus Quickstart\n  6. Introduction to Vector Similarity Search\n  7. Vector Index Basics and the Inverted File Index\n  8. Scalar Quantization and Product Quantization\n  9. Hierarchical Navigable Small Worlds (HNSW)\n  10. Approximate Nearest Neighbor Oh Yeah (ANNOY)\n  11. Choosing the Right Vector Index for Your Project\n  12. DiskANN and the Vamana Algorithm\n\n* * *\n\n* * *\n\n  1. Updating the storage component, for example, will impact how the vector indices are built in addition to how the user-facing services implement reads, writes, and deletes. \u21a9\n\n### Content\n\n  * Vector databases vs traditional databases\n  * What is a Vector Database?\n  * Vector databases from 1000 feet\n  * How does a vector database work?\n  * Technical challenges of vector databases\n  * Advantages of vector databases\n  * What is the fastest vector database\n  * Vector databases comparison\n  * Wrapping up\n  * Take another look at the Vector Database 101 courses\n\nTake Zilliz for a spin with our free 30-day trial\n\nStart Free Trial\n\nShare this article\n\nCopied\n\n **Sign Up for the Zilliz newsletter**\n\nSubscribe\n\n201 Redwood Shores Pkwy, Suite 330 Redwood City, California 94065\n\n  * Product\n\n    * Zilliz Cloud\n    * Free Tier\n    * What is Milvus\n    * What is GPTCache\n    * Towhee\n    * Attu\n    * Milvus CLI\n    * Feder\n  * Resources\n\n    * Docs\n    * Blog\n    * GitHub\n    * Benchmark\n    * Comparison\n    * Resources\n    * Glossary\n  * Company\n\n    * About\n    * Careers\n    * News\n    * Partners\n    * Events\n    * Contact Sales\n\nTerms of ServicePrivacy PolicySecuritySystem Status\n\nLF AI, LF AI & data, Milvus, and associated open-source project names are\ntrademarks of the the Linux Foundation.\n\n\u00a9 Zilliz 2023 All rights reserved.\n\n"
}